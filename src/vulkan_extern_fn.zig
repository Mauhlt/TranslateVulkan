extern fn vkCreateInstance(p_create_info: [*c]const InstanceCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_instance: [*c]Instance) Result;
pub const createInstance = vkCreateInstance;
extern fn vkDestroyInstance(instance: Instance,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyInstance = vkDestroyInstance;
extern fn vkEnumeratePhysicalDevices(instance: Instance,  p_physical_device_count: [*c]u32,  p_physical_devices: [*c]PhysicalDevice) Result;
pub const enumeratePhysicalDevices = vkEnumeratePhysicalDevices;
extern fn vkGetPhysicalDeviceFeatures(physical_device: PhysicalDevice,  p_features: [*c]PhysicalDeviceFeatures) void;
pub const getPhysicalDeviceFeatures = vkGetPhysicalDeviceFeatures;
extern fn vkGetPhysicalDeviceFormatProperties(physical_device: PhysicalDevice,  format: Format,  p_format_properties: [*c]FormatProperties) void;
pub const getPhysicalDeviceFormatProperties = vkGetPhysicalDeviceFormatProperties;
extern fn vkGetPhysicalDeviceImageFormatProperties(physical_device: PhysicalDevice,  format: Format,  @"type": ImageType,  tiling: ImageTiling,  usage: ImageUsageFlags,  flags: ImageCreateFlags,  p_image_format_properties: [*c]ImageFormatProperties) Result;
pub const getPhysicalDeviceImageFormatProperties = vkGetPhysicalDeviceImageFormatProperties;
extern fn vkGetPhysicalDeviceProperties(physical_device: PhysicalDevice,  p_properties: [*c]PhysicalDeviceProperties) void;
pub const getPhysicalDeviceProperties = vkGetPhysicalDeviceProperties;
extern fn vkGetPhysicalDeviceQueueFamilyProperties(physical_device: PhysicalDevice,  p_queue_family_property_count: [*c]u32,  p_queue_family_properties: [*c]QueueFamilyProperties) void;
pub const getPhysicalDeviceQueueFamilyProperties = vkGetPhysicalDeviceQueueFamilyProperties;
extern fn vkGetPhysicalDeviceMemoryProperties(physical_device: PhysicalDevice,  p_memory_properties: [*c]PhysicalDeviceMemoryProperties) void;
pub const getPhysicalDeviceMemoryProperties = vkGetPhysicalDeviceMemoryProperties;
extern fn vkGetInstanceProcAddr(instance: Instance,  p_name: [*c]const u8) PFN_vkVoidFunction;
pub const getInstanceProcAddr = vkGetInstanceProcAddr;
extern fn vkGetDeviceProcAddr(device: Device,  p_name: [*c]const u8) PFN_vkVoidFunction;
pub const getDeviceProcAddr = vkGetDeviceProcAddr;
extern fn vkCreateDevice(physical_device: PhysicalDevice,  p_create_info: [*c]const DeviceCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_device: [*c]Device) Result;
pub const createDevice = vkCreateDevice;
extern fn vkDestroyDevice(device: Device,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDevice = vkDestroyDevice;
extern fn vkEnumerateInstanceExtensionProperties(p_layer_name: [*c]const u8,  p_property_count: [*c]u32,  p_properties: [*c]ExtensionProperties) Result;
pub const enumerateInstanceExtensionProperties = vkEnumerateInstanceExtensionProperties;
extern fn vkEnumerateDeviceExtensionProperties(physical_device: PhysicalDevice,  p_layer_name: [*c]const u8,  p_property_count: [*c]u32,  p_properties: [*c]ExtensionProperties) Result;
pub const enumerateDeviceExtensionProperties = vkEnumerateDeviceExtensionProperties;
extern fn vkEnumerateInstanceLayerProperties(p_property_count: [*c]u32,  p_properties: [*c]LayerProperties) Result;
pub const enumerateInstanceLayerProperties = vkEnumerateInstanceLayerProperties;
extern fn vkEnumerateDeviceLayerProperties(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]LayerProperties) Result;
pub const enumerateDeviceLayerProperties = vkEnumerateDeviceLayerProperties;
extern fn vkGetDeviceQueue(device: Device,  queue_family_index: u32,  queue_index: u32,  p_queue: [*c]Queue) void;
pub const getDeviceQueue = vkGetDeviceQueue;
extern fn vkQueueSubmit(queue: Queue,  submit_count: u32,  p_submits: [*c]const SubmitInfo,  fence: Fence) Result;
pub const queueSubmit = vkQueueSubmit;
extern fn vkQueueWaitIdle(queue: Queue) Result;
pub const queueWaitIdle = vkQueueWaitIdle;
extern fn vkDeviceWaitIdle(device: Device) Result;
pub const deviceWaitIdle = vkDeviceWaitIdle;
extern fn vkAllocateMemory(device: Device,  p_allocate_info: [*c]const MemoryAllocateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_memory: [*c]DeviceMemory) Result;
pub const allocateMemory = vkAllocateMemory;
extern fn vkFreeMemory(device: Device,  memory: DeviceMemory,  p_allocator: [*c]const AllocationCallbacks) void;
pub const freeMemory = vkFreeMemory;
extern fn vkMapMemory(device: Device,  memory: DeviceMemory,  offset: DeviceSize,  size: DeviceSize,  flags: MemoryMapFlags,  pp_data: [*c]?*anyopaque) Result;
pub const mapMemory = vkMapMemory;
extern fn vkUnmapMemory(device: Device,  memory: DeviceMemory) void;
pub const unmapMemory = vkUnmapMemory;
extern fn vkFlushMappedMemoryRanges(device: Device,  memory_range_count: u32,  p_memory_ranges: [*c]const MappedMemoryRange) Result;
pub const flushMappedMemoryRanges = vkFlushMappedMemoryRanges;
extern fn vkInvalidateMappedMemoryRanges(device: Device,  memory_range_count: u32,  p_memory_ranges: [*c]const MappedMemoryRange) Result;
pub const invalidateMappedMemoryRanges = vkInvalidateMappedMemoryRanges;
extern fn vkGetDeviceMemoryCommitment(device: Device,  memory: DeviceMemory,  p_committed_memory_in_bytes: [*c]DeviceSize) void;
pub const getDeviceMemoryCommitment = vkGetDeviceMemoryCommitment;
extern fn vkBindBufferMemory(device: Device,  buffer: Buffer,  memory: DeviceMemory,  memory_offset: DeviceSize) Result;
pub const bindBufferMemory = vkBindBufferMemory;
extern fn vkBindImageMemory(device: Device,  image: Image,  memory: DeviceMemory,  memory_offset: DeviceSize) Result;
pub const bindImageMemory = vkBindImageMemory;
extern fn vkGetBufferMemoryRequirements(device: Device,  buffer: Buffer,  p_memory_requirements: [*c]MemoryRequirements) void;
pub const getBufferMemoryRequirements = vkGetBufferMemoryRequirements;
extern fn vkGetImageMemoryRequirements(device: Device,  image: Image,  p_memory_requirements: [*c]MemoryRequirements) void;
pub const getImageMemoryRequirements = vkGetImageMemoryRequirements;
extern fn vkGetImageSparseMemoryRequirements(device: Device,  image: Image,  p_sparse_memory_requirement_count: [*c]u32,  p_sparse_memory_requirements: [*c]SparseImageMemoryRequirements) void;
pub const getImageSparseMemoryRequirements = vkGetImageSparseMemoryRequirements;
extern fn vkGetPhysicalDeviceSparseImageFormatProperties(physical_device: PhysicalDevice,  format: Format,  @"type": ImageType,  samples: SampleCountFlagBits,  usage: ImageUsageFlags,  tiling: ImageTiling,  p_property_count: [*c]u32,  p_properties: [*c]SparseImageFormatProperties) void;
pub const getPhysicalDeviceSparseImageFormatProperties = vkGetPhysicalDeviceSparseImageFormatProperties;
extern fn vkQueueBindSparse(queue: Queue,  bind_info_count: u32,  p_bind_info: [*c]const BindSparseInfo,  fence: Fence) Result;
pub const queueBindSparse = vkQueueBindSparse;
extern fn vkCreateFence(device: Device,  p_create_info: [*c]const FenceCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_fence: [*c]Fence) Result;
pub const createFence = vkCreateFence;
extern fn vkDestroyFence(device: Device,  fence: Fence,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyFence = vkDestroyFence;
extern fn vkResetFences(device: Device,  fence_count: u32,  p_fences: [*c]const Fence) Result;
pub const resetFences = vkResetFences;
extern fn vkGetFenceStatus(device: Device,  fence: Fence) Result;
pub const getFenceStatus = vkGetFenceStatus;
extern fn vkWaitForFences(device: Device,  fence_count: u32,  p_fences: [*c]const Fence,  wait_all: Bool32,  timeout: u64) Result;
pub const waitForFences = vkWaitForFences;
extern fn vkCreateSemaphore(device: Device,  p_create_info: [*c]const SemaphoreCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_semaphore: [*c]Semaphore) Result;
pub const createSemaphore = vkCreateSemaphore;
extern fn vkDestroySemaphore(device: Device,  semaphore: Semaphore,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroySemaphore = vkDestroySemaphore;
extern fn vkCreateEvent(device: Device,  p_create_info: [*c]const EventCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_event: [*c]Event) Result;
pub const createEvent = vkCreateEvent;
extern fn vkDestroyEvent(device: Device,  event: Event,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyEvent = vkDestroyEvent;
extern fn vkGetEventStatus(device: Device,  event: Event) Result;
pub const getEventStatus = vkGetEventStatus;
extern fn vkSetEvent(device: Device,  event: Event) Result;
pub const setEvent = vkSetEvent;
extern fn vkResetEvent(device: Device,  event: Event) Result;
pub const resetEvent = vkResetEvent;
extern fn vkCreateQueryPool(device: Device,  p_create_info: [*c]const QueryPoolCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_query_pool: [*c]QueryPool) Result;
pub const createQueryPool = vkCreateQueryPool;
extern fn vkDestroyQueryPool(device: Device,  query_pool: QueryPool,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyQueryPool = vkDestroyQueryPool;
extern fn vkGetQueryPoolResults(device: Device,  query_pool: QueryPool,  first_query: u32,  query_count: u32,  data_size: usize,  p_data: ?*anyopaque,  stride: DeviceSize,  flags: QueryResultFlags) Result;
pub const getQueryPoolResults = vkGetQueryPoolResults;
extern fn vkCreateBuffer(device: Device,  p_create_info: [*c]const BufferCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_buffer: [*c]Buffer) Result;
pub const createBuffer = vkCreateBuffer;
extern fn vkDestroyBuffer(device: Device,  buffer: Buffer,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyBuffer = vkDestroyBuffer;
extern fn vkCreateBufferView(device: Device,  p_create_info: [*c]const BufferViewCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_view: [*c]BufferView) Result;
pub const createBufferView = vkCreateBufferView;
extern fn vkDestroyBufferView(device: Device,  buffer_view: BufferView,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyBufferView = vkDestroyBufferView;
extern fn vkCreateImage(device: Device,  p_create_info: [*c]const ImageCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_image: [*c]Image) Result;
pub const createImage = vkCreateImage;
extern fn vkDestroyImage(device: Device,  image: Image,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyImage = vkDestroyImage;
extern fn vkGetImageSubresourceLayout(device: Device,  image: Image,  p_subresource: [*c]const ImageSubresource,  p_layout: [*c]SubresourceLayout) void;
pub const getImageSubresourceLayout = vkGetImageSubresourceLayout;
extern fn vkCreateImageView(device: Device,  p_create_info: [*c]const ImageViewCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_view: [*c]ImageView) Result;
pub const createImageView = vkCreateImageView;
extern fn vkDestroyImageView(device: Device,  image_view: ImageView,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyImageView = vkDestroyImageView;
extern fn vkCreateShaderModule(device: Device,  p_create_info: [*c]const ShaderModuleCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_shader_module: [*c]ShaderModule) Result;
pub const createShaderModule = vkCreateShaderModule;
extern fn vkDestroyShaderModule(device: Device,  shader_module: ShaderModule,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyShaderModule = vkDestroyShaderModule;
extern fn vkCreatePipelineCache(device: Device,  p_create_info: [*c]const PipelineCacheCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_pipeline_cache: [*c]PipelineCache) Result;
pub const createPipelineCache = vkCreatePipelineCache;
extern fn vkDestroyPipelineCache(device: Device,  pipeline_cache: PipelineCache,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyPipelineCache = vkDestroyPipelineCache;
extern fn vkGetPipelineCacheData(device: Device,  pipeline_cache: PipelineCache,  p_data_size: [*c]usize,  p_data: ?*anyopaque) Result;
pub const getPipelineCacheData = vkGetPipelineCacheData;
extern fn vkMergePipelineCaches(device: Device,  dst_cache: PipelineCache,  src_cache_count: u32,  p_src_caches: [*c]const PipelineCache) Result;
pub const mergePipelineCaches = vkMergePipelineCaches;
extern fn vkCreateGraphicsPipelines(device: Device,  pipeline_cache: PipelineCache,  create_info_count: u32,  p_create_infos: [*c]const GraphicsPipelineCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_pipelines: [*c]Pipeline) Result;
pub const createGraphicsPipelines = vkCreateGraphicsPipelines;
extern fn vkCreateComputePipelines(device: Device,  pipeline_cache: PipelineCache,  create_info_count: u32,  p_create_infos: [*c]const ComputePipelineCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_pipelines: [*c]Pipeline) Result;
pub const createComputePipelines = vkCreateComputePipelines;
extern fn vkDestroyPipeline(device: Device,  pipeline: Pipeline,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyPipeline = vkDestroyPipeline;
extern fn vkCreatePipelineLayout(device: Device,  p_create_info: [*c]const PipelineLayoutCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_pipeline_layout: [*c]PipelineLayout) Result;
pub const createPipelineLayout = vkCreatePipelineLayout;
extern fn vkDestroyPipelineLayout(device: Device,  pipeline_layout: PipelineLayout,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyPipelineLayout = vkDestroyPipelineLayout;
extern fn vkCreateSampler(device: Device,  p_create_info: [*c]const SamplerCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_sampler: [*c]Sampler) Result;
pub const createSampler = vkCreateSampler;
extern fn vkDestroySampler(device: Device,  sampler: Sampler,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroySampler = vkDestroySampler;
extern fn vkCreateDescriptorSetLayout(device: Device,  p_create_info: [*c]const DescriptorSetLayoutCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_set_layout: [*c]DescriptorSetLayout) Result;
pub const createDescriptorSetLayout = vkCreateDescriptorSetLayout;
extern fn vkDestroyDescriptorSetLayout(device: Device,  descriptor_set_layout: DescriptorSetLayout,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDescriptorSetLayout = vkDestroyDescriptorSetLayout;
extern fn vkCreateDescriptorPool(device: Device,  p_create_info: [*c]const DescriptorPoolCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_descriptor_pool: [*c]DescriptorPool) Result;
pub const createDescriptorPool = vkCreateDescriptorPool;
extern fn vkDestroyDescriptorPool(device: Device,  descriptor_pool: DescriptorPool,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDescriptorPool = vkDestroyDescriptorPool;
extern fn vkResetDescriptorPool(device: Device,  descriptor_pool: DescriptorPool,  flags: DescriptorPoolResetFlags) Result;
pub const resetDescriptorPool = vkResetDescriptorPool;
extern fn vkAllocateDescriptorSets(device: Device,  p_allocate_info: [*c]const DescriptorSetAllocateInfo,  p_descriptor_sets: [*c]DescriptorSet) Result;
pub const allocateDescriptorSets = vkAllocateDescriptorSets;
extern fn vkFreeDescriptorSets(device: Device,  descriptor_pool: DescriptorPool,  descriptor_set_count: u32,  p_descriptor_sets: [*c]const DescriptorSet) Result;
pub const freeDescriptorSets = vkFreeDescriptorSets;
extern fn vkUpdateDescriptorSets(device: Device,  descriptor_write_count: u32,  p_descriptor_writes: [*c]const WriteDescriptorSet,  descriptor_copy_count: u32,  p_descriptor_copies: [*c]const CopyDescriptorSet) void;
pub const updateDescriptorSets = vkUpdateDescriptorSets;
extern fn vkCreateFramebuffer(device: Device,  p_create_info: [*c]const FramebufferCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_framebuffer: [*c]Framebuffer) Result;
pub const createFramebuffer = vkCreateFramebuffer;
extern fn vkDestroyFramebuffer(device: Device,  framebuffer: Framebuffer,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyFramebuffer = vkDestroyFramebuffer;
extern fn vkCreateRenderPass(device: Device,  p_create_info: [*c]const RenderPassCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_render_pass: [*c]RenderPass) Result;
pub const createRenderPass = vkCreateRenderPass;
extern fn vkDestroyRenderPass(device: Device,  render_pass: RenderPass,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyRenderPass = vkDestroyRenderPass;
extern fn vkGetRenderAreaGranularity(device: Device,  render_pass: RenderPass,  p_granularity: [*c]Extent2D) void;
pub const getRenderAreaGranularity = vkGetRenderAreaGranularity;
extern fn vkCreateCommandPool(device: Device,  p_create_info: [*c]const CommandPoolCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_command_pool: [*c]CommandPool) Result;
pub const createCommandPool = vkCreateCommandPool;
extern fn vkDestroyCommandPool(device: Device,  command_pool: CommandPool,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyCommandPool = vkDestroyCommandPool;
extern fn vkResetCommandPool(device: Device,  command_pool: CommandPool,  flags: CommandPoolResetFlags) Result;
pub const resetCommandPool = vkResetCommandPool;
extern fn vkAllocateCommandBuffers(device: Device,  p_allocate_info: [*c]const CommandBufferAllocateInfo,  p_command_buffers: [*c]CommandBuffer) Result;
pub const allocateCommandBuffers = vkAllocateCommandBuffers;
extern fn vkFreeCommandBuffers(device: Device,  command_pool: CommandPool,  command_buffer_count: u32,  p_command_buffers: [*c]const CommandBuffer) void;
pub const freeCommandBuffers = vkFreeCommandBuffers;
extern fn vkBeginCommandBuffer(command_buffer: CommandBuffer,  p_begin_info: [*c]const CommandBufferBeginInfo) Result;
pub const beginCommandBuffer = vkBeginCommandBuffer;
extern fn vkEndCommandBuffer(command_buffer: CommandBuffer) Result;
pub const endCommandBuffer = vkEndCommandBuffer;
extern fn vkResetCommandBuffer(command_buffer: CommandBuffer,  flags: CommandBufferResetFlags) Result;
pub const resetCommandBuffer = vkResetCommandBuffer;
extern fn vkCmdBindPipeline(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  pipeline: Pipeline) void;
pub const cmdBindPipeline = vkCmdBindPipeline;
extern fn vkCmdSetViewport(command_buffer: CommandBuffer,  first_viewport: u32,  viewport_count: u32,  p_viewports: [*c]const Viewport) void;
pub const cmdSetViewport = vkCmdSetViewport;
extern fn vkCmdSetScissor(command_buffer: CommandBuffer,  first_scissor: u32,  scissor_count: u32,  p_scissors: [*c]const Rect2D) void;
pub const cmdSetScissor = vkCmdSetScissor;
extern fn vkCmdSetLineWidth(command_buffer: CommandBuffer,  line_width: f32) void;
pub const cmdSetLineWidth = vkCmdSetLineWidth;
extern fn vkCmdSetDepthBias(command_buffer: CommandBuffer,  depth_bias_constant_factor: f32,  depth_bias_clamp: f32,  depth_bias_slope_factor: f32) void;
pub const cmdSetDepthBias = vkCmdSetDepthBias;
extern fn vkCmdSetBlendConstants(command_buffer: CommandBuffer,  blend_constants: [*c]const f32) void;
pub const cmdSetBlendConstants = vkCmdSetBlendConstants;
extern fn vkCmdSetDepthBounds(command_buffer: CommandBuffer,  min_depth_bounds: f32,  max_depth_bounds: f32) void;
pub const cmdSetDepthBounds = vkCmdSetDepthBounds;
extern fn vkCmdSetStencilCompareMask(command_buffer: CommandBuffer,  face_mask: StencilFaceFlags,  compare_mask: u32) void;
pub const cmdSetStencilCompareMask = vkCmdSetStencilCompareMask;
extern fn vkCmdSetStencilWriteMask(command_buffer: CommandBuffer,  face_mask: StencilFaceFlags,  write_mask: u32) void;
pub const cmdSetStencilWriteMask = vkCmdSetStencilWriteMask;
extern fn vkCmdSetStencilReference(command_buffer: CommandBuffer,  face_mask: StencilFaceFlags,  reference: u32) void;
pub const cmdSetStencilReference = vkCmdSetStencilReference;
extern fn vkCmdBindDescriptorSets(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  layout: PipelineLayout,  first_set: u32,  descriptor_set_count: u32,  p_descriptor_sets: [*c]const DescriptorSet,  dynamic_offset_count: u32,  p_dynamic_offsets: [*c]const u32) void;
pub const cmdBindDescriptorSets = vkCmdBindDescriptorSets;
extern fn vkCmdBindIndexBuffer(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  index_type: IndexType) void;
pub const cmdBindIndexBuffer = vkCmdBindIndexBuffer;
extern fn vkCmdBindVertexBuffers(command_buffer: CommandBuffer,  first_binding: u32,  binding_count: u32,  p_buffers: [*c]const Buffer,  p_offsets: [*c]const DeviceSize) void;
pub const cmdBindVertexBuffers = vkCmdBindVertexBuffers;
extern fn vkCmdDraw(command_buffer: CommandBuffer,  vertex_count: u32,  instance_count: u32,  first_vertex: u32,  first_instance: u32) void;
pub const cmdDraw = vkCmdDraw;
extern fn vkCmdDrawIndexed(command_buffer: CommandBuffer,  index_count: u32,  instance_count: u32,  first_index: u32,  vertex_offset: i32,  first_instance: u32) void;
pub const cmdDrawIndexed = vkCmdDrawIndexed;
extern fn vkCmdDrawIndirect(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  draw_count: u32,  stride: u32) void;
pub const cmdDrawIndirect = vkCmdDrawIndirect;
extern fn vkCmdDrawIndexedIndirect(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  draw_count: u32,  stride: u32) void;
pub const cmdDrawIndexedIndirect = vkCmdDrawIndexedIndirect;
extern fn vkCmdDispatch(command_buffer: CommandBuffer,  group_count_x: u32,  group_count_y: u32,  group_count_z: u32) void;
pub const cmdDispatch = vkCmdDispatch;
extern fn vkCmdDispatchIndirect(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize) void;
pub const cmdDispatchIndirect = vkCmdDispatchIndirect;
extern fn vkCmdCopyBuffer(command_buffer: CommandBuffer,  src_buffer: Buffer,  dst_buffer: Buffer,  region_count: u32,  p_regions: [*c]const BufferCopy) void;
pub const cmdCopyBuffer = vkCmdCopyBuffer;
extern fn vkCmdCopyImage(command_buffer: CommandBuffer,  src_image: Image,  src_image_layout: ImageLayout,  dst_image: Image,  dst_image_layout: ImageLayout,  region_count: u32,  p_regions: [*c]const ImageCopy) void;
pub const cmdCopyImage = vkCmdCopyImage;
extern fn vkCmdBlitImage(command_buffer: CommandBuffer,  src_image: Image,  src_image_layout: ImageLayout,  dst_image: Image,  dst_image_layout: ImageLayout,  region_count: u32,  p_regions: [*c]const ImageBlit,  filter: Filter) void;
pub const cmdBlitImage = vkCmdBlitImage;
extern fn vkCmdCopyBufferToImage(command_buffer: CommandBuffer,  src_buffer: Buffer,  dst_image: Image,  dst_image_layout: ImageLayout,  region_count: u32,  p_regions: [*c]const BufferImageCopy) void;
pub const cmdCopyBufferToImage = vkCmdCopyBufferToImage;
extern fn vkCmdCopyImageToBuffer(command_buffer: CommandBuffer,  src_image: Image,  src_image_layout: ImageLayout,  dst_buffer: Buffer,  region_count: u32,  p_regions: [*c]const BufferImageCopy) void;
pub const cmdCopyImageToBuffer = vkCmdCopyImageToBuffer;
extern fn vkCmdUpdateBuffer(command_buffer: CommandBuffer,  dst_buffer: Buffer,  dst_offset: DeviceSize,  data_size: DeviceSize,  p_data: ?*const anyopaque) void;
pub const cmdUpdateBuffer = vkCmdUpdateBuffer;
extern fn vkCmdFillBuffer(command_buffer: CommandBuffer,  dst_buffer: Buffer,  dst_offset: DeviceSize,  size: DeviceSize,  data: u32) void;
pub const cmdFillBuffer = vkCmdFillBuffer;
extern fn vkCmdClearColorImage(command_buffer: CommandBuffer,  image: Image,  image_layout: ImageLayout,  p_color: [*c]const ClearColorValue,  range_count: u32,  p_ranges: [*c]const ImageSubresourceRange) void;
pub const cmdClearColorImage = vkCmdClearColorImage;
extern fn vkCmdClearDepthStencilImage(command_buffer: CommandBuffer,  image: Image,  image_layout: ImageLayout,  p_depth_stencil: [*c]const ClearDepthStencilValue,  range_count: u32,  p_ranges: [*c]const ImageSubresourceRange) void;
pub const cmdClearDepthStencilImage = vkCmdClearDepthStencilImage;
extern fn vkCmdClearAttachments(command_buffer: CommandBuffer,  attachment_count: u32,  p_attachments: [*c]const ClearAttachment,  rect_count: u32,  p_rects: [*c]const ClearRect) void;
pub const cmdClearAttachments = vkCmdClearAttachments;
extern fn vkCmdResolveImage(command_buffer: CommandBuffer,  src_image: Image,  src_image_layout: ImageLayout,  dst_image: Image,  dst_image_layout: ImageLayout,  region_count: u32,  p_regions: [*c]const ImageResolve) void;
pub const cmdResolveImage = vkCmdResolveImage;
extern fn vkCmdSetEvent(command_buffer: CommandBuffer,  event: Event,  stage_mask: PipelineStageFlags) void;
pub const cmdSetEvent = vkCmdSetEvent;
extern fn vkCmdResetEvent(command_buffer: CommandBuffer,  event: Event,  stage_mask: PipelineStageFlags) void;
pub const cmdResetEvent = vkCmdResetEvent;
extern fn vkCmdWaitEvents(command_buffer: CommandBuffer,  event_count: u32,  p_events: [*c]const Event,  src_stage_mask: PipelineStageFlags,  dst_stage_mask: PipelineStageFlags,  memory_barrier_count: u32,  p_memory_barriers: [*c]const MemoryBarrier,  buffer_memory_barrier_count: u32,  p_buffer_memory_barriers: [*c]const BufferMemoryBarrier,  image_memory_barrier_count: u32,  p_image_memory_barriers: [*c]const ImageMemoryBarrier) void;
pub const cmdWaitEvents = vkCmdWaitEvents;
extern fn vkCmdPipelineBarrier(command_buffer: CommandBuffer,  src_stage_mask: PipelineStageFlags,  dst_stage_mask: PipelineStageFlags,  dependency_flags: DependencyFlags,  memory_barrier_count: u32,  p_memory_barriers: [*c]const MemoryBarrier,  buffer_memory_barrier_count: u32,  p_buffer_memory_barriers: [*c]const BufferMemoryBarrier,  image_memory_barrier_count: u32,  p_image_memory_barriers: [*c]const ImageMemoryBarrier) void;
pub const cmdPipelineBarrier = vkCmdPipelineBarrier;
extern fn vkCmdBeginQuery(command_buffer: CommandBuffer,  query_pool: QueryPool,  query: u32,  flags: QueryControlFlags) void;
pub const cmdBeginQuery = vkCmdBeginQuery;
extern fn vkCmdEndQuery(command_buffer: CommandBuffer,  query_pool: QueryPool,  query: u32) void;
pub const cmdEndQuery = vkCmdEndQuery;
extern fn vkCmdResetQueryPool(command_buffer: CommandBuffer,  query_pool: QueryPool,  first_query: u32,  query_count: u32) void;
pub const cmdResetQueryPool = vkCmdResetQueryPool;
extern fn vkCmdWriteTimestamp(command_buffer: CommandBuffer,  pipeline_stage: PipelineStageFlagBits,  query_pool: QueryPool,  query: u32) void;
pub const cmdWriteTimestamp = vkCmdWriteTimestamp;
extern fn vkCmdCopyQueryPoolResults(command_buffer: CommandBuffer,  query_pool: QueryPool,  first_query: u32,  query_count: u32,  dst_buffer: Buffer,  dst_offset: DeviceSize,  stride: DeviceSize,  flags: QueryResultFlags) void;
pub const cmdCopyQueryPoolResults = vkCmdCopyQueryPoolResults;
extern fn vkCmdPushConstants(command_buffer: CommandBuffer,  layout: PipelineLayout,  stage_flags: ShaderStageFlags,  offset: u32,  size: u32,  p_values: ?*const anyopaque) void;
pub const cmdPushConstants = vkCmdPushConstants;
extern fn vkCmdBeginRenderPass(command_buffer: CommandBuffer,  p_render_pass_begin: [*c]const RenderPassBeginInfo,  contents: SubpassContents) void;
pub const cmdBeginRenderPass = vkCmdBeginRenderPass;
extern fn vkCmdNextSubpass(command_buffer: CommandBuffer,  contents: SubpassContents) void;
pub const cmdNextSubpass = vkCmdNextSubpass;
extern fn vkCmdEndRenderPass(command_buffer: CommandBuffer) void;
pub const cmdEndRenderPass = vkCmdEndRenderPass;
extern fn vkCmdExecuteCommands(command_buffer: CommandBuffer,  command_buffer_count: u32,  p_command_buffers: [*c]const CommandBuffer) void;
pub const cmdExecuteCommands = vkCmdExecuteCommands;
extern fn vkEnumerateInstanceVersion(p_api_version: [*c]u32) Result;
pub const enumerateInstanceVersion = vkEnumerateInstanceVersion;
extern fn vkBindBufferMemory2(device: Device,  bind_info_count: u32,  p_bind_infos: [*c]const BindBufferMemoryInfo) Result;
pub const bindBufferMemory2 = vkBindBufferMemory2;
extern fn vkBindImageMemory2(device: Device,  bind_info_count: u32,  p_bind_infos: [*c]const BindImageMemoryInfo) Result;
pub const bindImageMemory2 = vkBindImageMemory2;
extern fn vkGetDeviceGroupPeerMemoryFeatures(device: Device,  heap_index: u32,  local_device_index: u32,  remote_device_index: u32,  p_peer_memory_features: [*c]PeerMemoryFeatureFlags) void;
pub const getDeviceGroupPeerMemoryFeatures = vkGetDeviceGroupPeerMemoryFeatures;
extern fn vkCmdSetDeviceMask(command_buffer: CommandBuffer,  device_mask: u32) void;
pub const cmdSetDeviceMask = vkCmdSetDeviceMask;
extern fn vkCmdDispatchBase(command_buffer: CommandBuffer,  base_group_x: u32,  base_group_y: u32,  base_group_z: u32,  group_count_x: u32,  group_count_y: u32,  group_count_z: u32) void;
pub const cmdDispatchBase = vkCmdDispatchBase;
extern fn vkEnumeratePhysicalDeviceGroups(instance: Instance,  p_physical_device_group_count: [*c]u32,  p_physical_device_group_properties: [*c]PhysicalDeviceGroupProperties) Result;
pub const enumeratePhysicalDeviceGroups = vkEnumeratePhysicalDeviceGroups;
extern fn vkGetImageMemoryRequirements2(device: Device,  p_info: [*c]const ImageMemoryRequirementsInfo2,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getImageMemoryRequirements2 = vkGetImageMemoryRequirements2;
extern fn vkGetBufferMemoryRequirements2(device: Device,  p_info: [*c]const BufferMemoryRequirementsInfo2,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getBufferMemoryRequirements2 = vkGetBufferMemoryRequirements2;
extern fn vkGetImageSparseMemoryRequirements2(device: Device,  p_info: [*c]const ImageSparseMemoryRequirementsInfo2,  p_sparse_memory_requirement_count: [*c]u32,  p_sparse_memory_requirements: [*c]SparseImageMemoryRequirements2) void;
pub const getImageSparseMemoryRequirements2 = vkGetImageSparseMemoryRequirements2;
extern fn vkGetPhysicalDeviceFeatures2(physical_device: PhysicalDevice,  p_features: [*c]PhysicalDeviceFeatures2) void;
pub const getPhysicalDeviceFeatures2 = vkGetPhysicalDeviceFeatures2;
extern fn vkGetPhysicalDeviceProperties2(physical_device: PhysicalDevice,  p_properties: [*c]PhysicalDeviceProperties2) void;
pub const getPhysicalDeviceProperties2 = vkGetPhysicalDeviceProperties2;
extern fn vkGetPhysicalDeviceFormatProperties2(physical_device: PhysicalDevice,  format: Format,  p_format_properties: [*c]FormatProperties2) void;
pub const getPhysicalDeviceFormatProperties2 = vkGetPhysicalDeviceFormatProperties2;
extern fn vkGetPhysicalDeviceImageFormatProperties2(physical_device: PhysicalDevice,  p_image_format_info: [*c]const PhysicalDeviceImageFormatInfo2,  p_image_format_properties: [*c]ImageFormatProperties2) Result;
pub const getPhysicalDeviceImageFormatProperties2 = vkGetPhysicalDeviceImageFormatProperties2;
extern fn vkGetPhysicalDeviceQueueFamilyProperties2(physical_device: PhysicalDevice,  p_queue_family_property_count: [*c]u32,  p_queue_family_properties: [*c]QueueFamilyProperties2) void;
pub const getPhysicalDeviceQueueFamilyProperties2 = vkGetPhysicalDeviceQueueFamilyProperties2;
extern fn vkGetPhysicalDeviceMemoryProperties2(physical_device: PhysicalDevice,  p_memory_properties: [*c]PhysicalDeviceMemoryProperties2) void;
pub const getPhysicalDeviceMemoryProperties2 = vkGetPhysicalDeviceMemoryProperties2;
extern fn vkGetPhysicalDeviceSparseImageFormatProperties2(physical_device: PhysicalDevice,  p_format_info: [*c]const PhysicalDeviceSparseImageFormatInfo2,  p_property_count: [*c]u32,  p_properties: [*c]SparseImageFormatProperties2) void;
pub const getPhysicalDeviceSparseImageFormatProperties2 = vkGetPhysicalDeviceSparseImageFormatProperties2;
extern fn vkTrimCommandPool(device: Device,  command_pool: CommandPool,  flags: CommandPoolTrimFlags) void;
pub const trimCommandPool = vkTrimCommandPool;
extern fn vkGetDeviceQueue2(device: Device,  p_queue_info: [*c]const DeviceQueueInfo2,  p_queue: [*c]Queue) void;
pub const getDeviceQueue2 = vkGetDeviceQueue2;
extern fn vkCreateSamplerYcbcrConversion(device: Device,  p_create_info: [*c]const SamplerYcbcrConversionCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_ycbcr_conversion: [*c]SamplerYcbcrConversion) Result;
pub const createSamplerYcbcrConversion = vkCreateSamplerYcbcrConversion;
extern fn vkDestroySamplerYcbcrConversion(device: Device,  ycbcr_conversion: SamplerYcbcrConversion,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroySamplerYcbcrConversion = vkDestroySamplerYcbcrConversion;
extern fn vkCreateDescriptorUpdateTemplate(device: Device,  p_create_info: [*c]const DescriptorUpdateTemplateCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_descriptor_update_template: [*c]DescriptorUpdateTemplate) Result;
pub const createDescriptorUpdateTemplate = vkCreateDescriptorUpdateTemplate;
extern fn vkDestroyDescriptorUpdateTemplate(device: Device,  descriptor_update_template: DescriptorUpdateTemplate,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDescriptorUpdateTemplate = vkDestroyDescriptorUpdateTemplate;
extern fn vkUpdateDescriptorSetWithTemplate(device: Device,  descriptor_set: DescriptorSet,  descriptor_update_template: DescriptorUpdateTemplate,  p_data: ?*const anyopaque) void;
pub const updateDescriptorSetWithTemplate = vkUpdateDescriptorSetWithTemplate;
extern fn vkGetPhysicalDeviceExternalBufferProperties(physical_device: PhysicalDevice,  p_external_buffer_info: [*c]const PhysicalDeviceExternalBufferInfo,  p_external_buffer_properties: [*c]ExternalBufferProperties) void;
pub const getPhysicalDeviceExternalBufferProperties = vkGetPhysicalDeviceExternalBufferProperties;
extern fn vkGetPhysicalDeviceExternalFenceProperties(physical_device: PhysicalDevice,  p_external_fence_info: [*c]const PhysicalDeviceExternalFenceInfo,  p_external_fence_properties: [*c]ExternalFenceProperties) void;
pub const getPhysicalDeviceExternalFenceProperties = vkGetPhysicalDeviceExternalFenceProperties;
extern fn vkGetPhysicalDeviceExternalSemaphoreProperties(physical_device: PhysicalDevice,  p_external_semaphore_info: [*c]const PhysicalDeviceExternalSemaphoreInfo,  p_external_semaphore_properties: [*c]ExternalSemaphoreProperties) void;
pub const getPhysicalDeviceExternalSemaphoreProperties = vkGetPhysicalDeviceExternalSemaphoreProperties;
extern fn vkGetDescriptorSetLayoutSupport(device: Device,  p_create_info: [*c]const DescriptorSetLayoutCreateInfo,  p_support: [*c]DescriptorSetLayoutSupport) void;
pub const getDescriptorSetLayoutSupport = vkGetDescriptorSetLayoutSupport;
extern fn vkCmdDrawIndirectCount(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawIndirectCount = vkCmdDrawIndirectCount;
extern fn vkCmdDrawIndexedIndirectCount(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawIndexedIndirectCount = vkCmdDrawIndexedIndirectCount;
extern fn vkCreateRenderPass2(device: Device,  p_create_info: [*c]const RenderPassCreateInfo2,  p_allocator: [*c]const AllocationCallbacks,  p_render_pass: [*c]RenderPass) Result;
pub const createRenderPass2 = vkCreateRenderPass2;
extern fn vkCmdBeginRenderPass2(command_buffer: CommandBuffer,  p_render_pass_begin: [*c]const RenderPassBeginInfo,  p_subpass_begin_info: [*c]const SubpassBeginInfo) void;
pub const cmdBeginRenderPass2 = vkCmdBeginRenderPass2;
extern fn vkCmdNextSubpass2(command_buffer: CommandBuffer,  p_subpass_begin_info: [*c]const SubpassBeginInfo,  p_subpass_end_info: [*c]const SubpassEndInfo) void;
pub const cmdNextSubpass2 = vkCmdNextSubpass2;
extern fn vkCmdEndRenderPass2(command_buffer: CommandBuffer,  p_subpass_end_info: [*c]const SubpassEndInfo) void;
pub const cmdEndRenderPass2 = vkCmdEndRenderPass2;
extern fn vkResetQueryPool(device: Device,  query_pool: QueryPool,  first_query: u32,  query_count: u32) void;
pub const resetQueryPool = vkResetQueryPool;
extern fn vkGetSemaphoreCounterValue(device: Device,  semaphore: Semaphore,  p_value: [*c]u64) Result;
pub const getSemaphoreCounterValue = vkGetSemaphoreCounterValue;
extern fn vkWaitSemaphores(device: Device,  p_wait_info: [*c]const SemaphoreWaitInfo,  timeout: u64) Result;
pub const waitSemaphores = vkWaitSemaphores;
extern fn vkSignalSemaphore(device: Device,  p_signal_info: [*c]const SemaphoreSignalInfo) Result;
pub const signalSemaphore = vkSignalSemaphore;
extern fn vkGetBufferDeviceAddress(device: Device,  p_info: [*c]const BufferDeviceAddressInfo) DeviceAddress;
pub const getBufferDeviceAddress = vkGetBufferDeviceAddress;
extern fn vkGetBufferOpaqueCaptureAddress(device: Device,  p_info: [*c]const BufferDeviceAddressInfo) u64;
pub const getBufferOpaqueCaptureAddress = vkGetBufferOpaqueCaptureAddress;
extern fn vkGetDeviceMemoryOpaqueCaptureAddress(device: Device,  p_info: [*c]const DeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const getDeviceMemoryOpaqueCaptureAddress = vkGetDeviceMemoryOpaqueCaptureAddress;
extern fn vkGetPhysicalDeviceToolProperties(physical_device: PhysicalDevice,  p_tool_count: [*c]u32,  p_tool_properties: [*c]PhysicalDeviceToolProperties) Result;
pub const getPhysicalDeviceToolProperties = vkGetPhysicalDeviceToolProperties;
extern fn vkCreatePrivateDataSlot(device: Device,  p_create_info: [*c]const PrivateDataSlotCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_private_data_slot: [*c]PrivateDataSlot) Result;
pub const createPrivateDataSlot = vkCreatePrivateDataSlot;
extern fn vkDestroyPrivateDataSlot(device: Device,  private_data_slot: PrivateDataSlot,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyPrivateDataSlot = vkDestroyPrivateDataSlot;
extern fn vkSetPrivateData(device: Device,  object_type: ObjectType,  object_handle: u64,  private_data_slot: PrivateDataSlot,  data: u64) Result;
pub const setPrivateData = vkSetPrivateData;
extern fn vkGetPrivateData(device: Device,  object_type: ObjectType,  object_handle: u64,  private_data_slot: PrivateDataSlot,  p_data: [*c]u64) void;
pub const getPrivateData = vkGetPrivateData;
extern fn vkCmdSetEvent2(command_buffer: CommandBuffer,  event: Event,  p_dependency_info: [*c]const DependencyInfo) void;
pub const cmdSetEvent2 = vkCmdSetEvent2;
extern fn vkCmdResetEvent2(command_buffer: CommandBuffer,  event: Event,  stage_mask: PipelineStageFlags2) void;
pub const cmdResetEvent2 = vkCmdResetEvent2;
extern fn vkCmdWaitEvents2(command_buffer: CommandBuffer,  event_count: u32,  p_events: [*c]const Event,  p_dependency_infos: [*c]const DependencyInfo) void;
pub const cmdWaitEvents2 = vkCmdWaitEvents2;
extern fn vkCmdPipelineBarrier2(command_buffer: CommandBuffer,  p_dependency_info: [*c]const DependencyInfo) void;
pub const cmdPipelineBarrier2 = vkCmdPipelineBarrier2;
extern fn vkCmdWriteTimestamp2(command_buffer: CommandBuffer,  stage: PipelineStageFlags2,  query_pool: QueryPool,  query: u32) void;
pub const cmdWriteTimestamp2 = vkCmdWriteTimestamp2;
extern fn vkQueueSubmit2(queue: Queue,  submit_count: u32,  p_submits: [*c]const SubmitInfo2,  fence: Fence) Result;
pub const queueSubmit2 = vkQueueSubmit2;
extern fn vkCmdCopyBuffer2(command_buffer: CommandBuffer,  p_copy_buffer_info: [*c]const CopyBufferInfo2) void;
pub const cmdCopyBuffer2 = vkCmdCopyBuffer2;
extern fn vkCmdCopyImage2(command_buffer: CommandBuffer,  p_copy_image_info: [*c]const CopyImageInfo2) void;
pub const cmdCopyImage2 = vkCmdCopyImage2;
extern fn vkCmdCopyBufferToImage2(command_buffer: CommandBuffer,  p_copy_buffer_to_image_info: [*c]const CopyBufferToImageInfo2) void;
pub const cmdCopyBufferToImage2 = vkCmdCopyBufferToImage2;
extern fn vkCmdCopyImageToBuffer2(command_buffer: CommandBuffer,  p_copy_image_to_buffer_info: [*c]const CopyImageToBufferInfo2) void;
pub const cmdCopyImageToBuffer2 = vkCmdCopyImageToBuffer2;
extern fn vkCmdBlitImage2(command_buffer: CommandBuffer,  p_blit_image_info: [*c]const BlitImageInfo2) void;
pub const cmdBlitImage2 = vkCmdBlitImage2;
extern fn vkCmdResolveImage2(command_buffer: CommandBuffer,  p_resolve_image_info: [*c]const ResolveImageInfo2) void;
pub const cmdResolveImage2 = vkCmdResolveImage2;
extern fn vkCmdBeginRendering(command_buffer: CommandBuffer,  p_rendering_info: [*c]const RenderingInfo) void;
pub const cmdBeginRendering = vkCmdBeginRendering;
extern fn vkCmdEndRendering(command_buffer: CommandBuffer) void;
pub const cmdEndRendering = vkCmdEndRendering;
extern fn vkCmdSetCullMode(command_buffer: CommandBuffer,  cull_mode: CullModeFlags) void;
pub const cmdSetCullMode = vkCmdSetCullMode;
extern fn vkCmdSetFrontFace(command_buffer: CommandBuffer,  front_face: FrontFace) void;
pub const cmdSetFrontFace = vkCmdSetFrontFace;
extern fn vkCmdSetPrimitiveTopology(command_buffer: CommandBuffer,  primitive_topology: PrimitiveTopology) void;
pub const cmdSetPrimitiveTopology = vkCmdSetPrimitiveTopology;
extern fn vkCmdSetViewportWithCount(command_buffer: CommandBuffer,  viewport_count: u32,  p_viewports: [*c]const Viewport) void;
pub const cmdSetViewportWithCount = vkCmdSetViewportWithCount;
extern fn vkCmdSetScissorWithCount(command_buffer: CommandBuffer,  scissor_count: u32,  p_scissors: [*c]const Rect2D) void;
pub const cmdSetScissorWithCount = vkCmdSetScissorWithCount;
extern fn vkCmdBindVertexBuffers2(command_buffer: CommandBuffer,  first_binding: u32,  binding_count: u32,  p_buffers: [*c]const Buffer,  p_offsets: [*c]const DeviceSize,  p_sizes: [*c]const DeviceSize,  p_strides: [*c]const DeviceSize) void;
pub const cmdBindVertexBuffers2 = vkCmdBindVertexBuffers2;
extern fn vkCmdSetDepthTestEnable(command_buffer: CommandBuffer,  depth_test_enable: Bool32) void;
pub const cmdSetDepthTestEnable = vkCmdSetDepthTestEnable;
extern fn vkCmdSetDepthWriteEnable(command_buffer: CommandBuffer,  depth_write_enable: Bool32) void;
pub const cmdSetDepthWriteEnable = vkCmdSetDepthWriteEnable;
extern fn vkCmdSetDepthCompareOp(command_buffer: CommandBuffer,  depth_compare_op: CompareOp) void;
pub const cmdSetDepthCompareOp = vkCmdSetDepthCompareOp;
extern fn vkCmdSetDepthBoundsTestEnable(command_buffer: CommandBuffer,  depth_bounds_test_enable: Bool32) void;
pub const cmdSetDepthBoundsTestEnable = vkCmdSetDepthBoundsTestEnable;
extern fn vkCmdSetStencilTestEnable(command_buffer: CommandBuffer,  stencil_test_enable: Bool32) void;
pub const cmdSetStencilTestEnable = vkCmdSetStencilTestEnable;
extern fn vkCmdSetStencilOp(command_buffer: CommandBuffer,  face_mask: StencilFaceFlags,  fail_op: StencilOp,  pass_op: StencilOp,  depth_fail_op: StencilOp,  compare_op: CompareOp) void;
pub const cmdSetStencilOp = vkCmdSetStencilOp;
extern fn vkCmdSetRasterizerDiscardEnable(command_buffer: CommandBuffer,  rasterizer_discard_enable: Bool32) void;
pub const cmdSetRasterizerDiscardEnable = vkCmdSetRasterizerDiscardEnable;
extern fn vkCmdSetDepthBiasEnable(command_buffer: CommandBuffer,  depth_bias_enable: Bool32) void;
pub const cmdSetDepthBiasEnable = vkCmdSetDepthBiasEnable;
extern fn vkCmdSetPrimitiveRestartEnable(command_buffer: CommandBuffer,  primitive_restart_enable: Bool32) void;
pub const cmdSetPrimitiveRestartEnable = vkCmdSetPrimitiveRestartEnable;
extern fn vkGetDeviceBufferMemoryRequirements(device: Device,  p_info: [*c]const DeviceBufferMemoryRequirements,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getDeviceBufferMemoryRequirements = vkGetDeviceBufferMemoryRequirements;
extern fn vkGetDeviceImageMemoryRequirements(device: Device,  p_info: [*c]const DeviceImageMemoryRequirements,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getDeviceImageMemoryRequirements = vkGetDeviceImageMemoryRequirements;
extern fn vkGetDeviceImageSparseMemoryRequirements(device: Device,  p_info: [*c]const DeviceImageMemoryRequirements,  p_sparse_memory_requirement_count: [*c]u32,  p_sparse_memory_requirements: [*c]SparseImageMemoryRequirements2) void;
pub const getDeviceImageSparseMemoryRequirements = vkGetDeviceImageSparseMemoryRequirements;
extern fn vkCmdSetLineStipple(command_buffer: CommandBuffer,  line_stipple_factor: u32,  line_stipple_pattern: u16) void;
pub const cmdSetLineStipple = vkCmdSetLineStipple;
extern fn vkMapMemory2(device: Device,  p_memory_map_info: [*c]const MemoryMapInfo,  pp_data: [*c]?*anyopaque) Result;
pub const mapMemory2 = vkMapMemory2;
extern fn vkUnmapMemory2(device: Device,  p_memory_unmap_info: [*c]const MemoryUnmapInfo) Result;
pub const unmapMemory2 = vkUnmapMemory2;
extern fn vkCmdBindIndexBuffer2(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  size: DeviceSize,  index_type: IndexType) void;
pub const cmdBindIndexBuffer2 = vkCmdBindIndexBuffer2;
extern fn vkGetRenderingAreaGranularity(device: Device,  p_rendering_area_info: [*c]const RenderingAreaInfo,  p_granularity: [*c]Extent2D) void;
pub const getRenderingAreaGranularity = vkGetRenderingAreaGranularity;
extern fn vkGetDeviceImageSubresourceLayout(device: Device,  p_info: [*c]const DeviceImageSubresourceInfo,  p_layout: [*c]SubresourceLayout2) void;
pub const getDeviceImageSubresourceLayout = vkGetDeviceImageSubresourceLayout;
extern fn vkGetImageSubresourceLayout2(device: Device,  image: Image,  p_subresource: [*c]const ImageSubresource2,  p_layout: [*c]SubresourceLayout2) void;
pub const getImageSubresourceLayout2 = vkGetImageSubresourceLayout2;
extern fn vkCmdPushDescriptorSet(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  layout: PipelineLayout,  set: u32,  descriptor_write_count: u32,  p_descriptor_writes: [*c]const WriteDescriptorSet) void;
pub const cmdPushDescriptorSet = vkCmdPushDescriptorSet;
extern fn vkCmdPushDescriptorSetWithTemplate(command_buffer: CommandBuffer,  descriptor_update_template: DescriptorUpdateTemplate,  layout: PipelineLayout,  set: u32,  p_data: ?*const anyopaque) void;
pub const cmdPushDescriptorSetWithTemplate = vkCmdPushDescriptorSetWithTemplate;
extern fn vkCmdSetRenderingAttachmentLocations(command_buffer: CommandBuffer,  p_location_info: [*c]const RenderingAttachmentLocationInfo) void;
pub const cmdSetRenderingAttachmentLocations = vkCmdSetRenderingAttachmentLocations;
extern fn vkCmdSetRenderingInputAttachmentIndices(command_buffer: CommandBuffer,  p_input_attachment_index_info: [*c]const RenderingInputAttachmentIndexInfo) void;
pub const cmdSetRenderingInputAttachmentIndices = vkCmdSetRenderingInputAttachmentIndices;
extern fn vkCmdBindDescriptorSets2(command_buffer: CommandBuffer,  p_bind_descriptor_sets_info: [*c]const BindDescriptorSetsInfo) void;
pub const cmdBindDescriptorSets2 = vkCmdBindDescriptorSets2;
extern fn vkCmdPushConstants2(command_buffer: CommandBuffer,  p_push_constants_info: [*c]const PushConstantsInfo) void;
pub const cmdPushConstants2 = vkCmdPushConstants2;
extern fn vkCmdPushDescriptorSet2(command_buffer: CommandBuffer,  p_push_descriptor_set_info: [*c]const PushDescriptorSetInfo) void;
pub const cmdPushDescriptorSet2 = vkCmdPushDescriptorSet2;
extern fn vkCmdPushDescriptorSetWithTemplate2(command_buffer: CommandBuffer,  p_push_descriptor_set_with_template_info: [*c]const PushDescriptorSetWithTemplateInfo) void;
pub const cmdPushDescriptorSetWithTemplate2 = vkCmdPushDescriptorSetWithTemplate2;
extern fn vkCopyMemoryToImage(device: Device,  p_copy_memory_to_image_info: [*c]const CopyMemoryToImageInfo) Result;
pub const copyMemoryToImage = vkCopyMemoryToImage;
extern fn vkCopyImageToMemory(device: Device,  p_copy_image_to_memory_info: [*c]const CopyImageToMemoryInfo) Result;
pub const copyImageToMemory = vkCopyImageToMemory;
extern fn vkCopyImageToImage(device: Device,  p_copy_image_to_image_info: [*c]const CopyImageToImageInfo) Result;
pub const copyImageToImage = vkCopyImageToImage;
extern fn vkTransitionImageLayout(device: Device,  transition_count: u32,  p_transitions: [*c]const HostImageLayoutTransitionInfo) Result;
pub const transitionImageLayout = vkTransitionImageLayout;
extern fn vkDestroySurfaceKHR(instance: Instance,  surface: SurfaceKHR,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroySurfaceKHR = vkDestroySurfaceKHR;
extern fn vkGetPhysicalDeviceSurfaceSupportKHR(physical_device: PhysicalDevice,  queue_family_index: u32,  surface: SurfaceKHR,  p_supported: [*c]Bool32) Result;
pub const getPhysicalDeviceSurfaceSupportKHR = vkGetPhysicalDeviceSurfaceSupportKHR;
extern fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physical_device: PhysicalDevice,  surface: SurfaceKHR,  p_surface_capabilities: [*c]SurfaceCapabilitiesKHR) Result;
pub const getPhysicalDeviceSurfaceCapabilitiesKHR = vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
extern fn vkGetPhysicalDeviceSurfaceFormatsKHR(physical_device: PhysicalDevice,  surface: SurfaceKHR,  p_surface_format_count: [*c]u32,  p_surface_formats: [*c]SurfaceFormatKHR) Result;
pub const getPhysicalDeviceSurfaceFormatsKHR = vkGetPhysicalDeviceSurfaceFormatsKHR;
extern fn vkGetPhysicalDeviceSurfacePresentModesKHR(physical_device: PhysicalDevice,  surface: SurfaceKHR,  p_present_mode_count: [*c]u32,  p_present_modes: [*c]PresentModeKHR) Result;
pub const getPhysicalDeviceSurfacePresentModesKHR = vkGetPhysicalDeviceSurfacePresentModesKHR;
extern fn vkCreateSwapchainKHR(device: Device,  p_create_info: [*c]const SwapchainCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_swapchain: [*c]SwapchainKHR) Result;
pub const createSwapchainKHR = vkCreateSwapchainKHR;
extern fn vkDestroySwapchainKHR(device: Device,  swapchain: SwapchainKHR,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroySwapchainKHR = vkDestroySwapchainKHR;
extern fn vkGetSwapchainImagesKHR(device: Device,  swapchain: SwapchainKHR,  p_swapchain_image_count: [*c]u32,  p_swapchain_images: [*c]Image) Result;
pub const getSwapchainImagesKHR = vkGetSwapchainImagesKHR;
extern fn vkAcquireNextImageKHR(device: Device,  swapchain: SwapchainKHR,  timeout: u64,  semaphore: Semaphore,  fence: Fence,  p_image_index: [*c]u32) Result;
pub const acquireNextImageKHR = vkAcquireNextImageKHR;
extern fn vkQueuePresentKHR(queue: Queue,  p_present_info: [*c]const PresentInfoKHR) Result;
pub const queuePresentKHR = vkQueuePresentKHR;
extern fn vkGetDeviceGroupPresentCapabilitiesKHR(device: Device,  p_device_group_present_capabilities: [*c]DeviceGroupPresentCapabilitiesKHR) Result;
pub const getDeviceGroupPresentCapabilitiesKHR = vkGetDeviceGroupPresentCapabilitiesKHR;
extern fn vkGetDeviceGroupSurfacePresentModesKHR(device: Device,  surface: SurfaceKHR,  p_modes: [*c]DeviceGroupPresentModeFlagsKHR) Result;
pub const getDeviceGroupSurfacePresentModesKHR = vkGetDeviceGroupSurfacePresentModesKHR;
extern fn vkGetPhysicalDevicePresentRectanglesKHR(physical_device: PhysicalDevice,  surface: SurfaceKHR,  p_rect_count: [*c]u32,  p_rects: [*c]Rect2D) Result;
pub const getPhysicalDevicePresentRectanglesKHR = vkGetPhysicalDevicePresentRectanglesKHR;
extern fn vkAcquireNextImage2KHR(device: Device,  p_acquire_info: [*c]const AcquireNextImageInfoKHR,  p_image_index: [*c]u32) Result;
pub const acquireNextImage2KHR = vkAcquireNextImage2KHR;
extern fn vkGetPhysicalDeviceDisplayPropertiesKHR(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]DisplayPropertiesKHR) Result;
pub const getPhysicalDeviceDisplayPropertiesKHR = vkGetPhysicalDeviceDisplayPropertiesKHR;
extern fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]DisplayPlanePropertiesKHR) Result;
pub const getPhysicalDeviceDisplayPlanePropertiesKHR = vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
extern fn vkGetDisplayPlaneSupportedDisplaysKHR(physical_device: PhysicalDevice,  plane_index: u32,  p_display_count: [*c]u32,  p_displays: [*c]DisplayKHR) Result;
pub const getDisplayPlaneSupportedDisplaysKHR = vkGetDisplayPlaneSupportedDisplaysKHR;
extern fn vkGetDisplayModePropertiesKHR(physical_device: PhysicalDevice,  display: DisplayKHR,  p_property_count: [*c]u32,  p_properties: [*c]DisplayModePropertiesKHR) Result;
pub const getDisplayModePropertiesKHR = vkGetDisplayModePropertiesKHR;
extern fn vkCreateDisplayModeKHR(physical_device: PhysicalDevice,  display: DisplayKHR,  p_create_info: [*c]const DisplayModeCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_mode: [*c]DisplayModeKHR) Result;
pub const createDisplayModeKHR = vkCreateDisplayModeKHR;
extern fn vkGetDisplayPlaneCapabilitiesKHR(physical_device: PhysicalDevice,  mode: DisplayModeKHR,  plane_index: u32,  p_capabilities: [*c]DisplayPlaneCapabilitiesKHR) Result;
pub const getDisplayPlaneCapabilitiesKHR = vkGetDisplayPlaneCapabilitiesKHR;
extern fn vkCreateDisplayPlaneSurfaceKHR(instance: Instance,  p_create_info: [*c]const DisplaySurfaceCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_surface: [*c]SurfaceKHR) Result;
pub const createDisplayPlaneSurfaceKHR = vkCreateDisplayPlaneSurfaceKHR;
extern fn vkCreateSharedSwapchainsKHR(device: Device,  swapchain_count: u32,  p_create_infos: [*c]const SwapchainCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_swapchains: [*c]SwapchainKHR) Result;
pub const createSharedSwapchainsKHR = vkCreateSharedSwapchainsKHR;
extern fn vkGetPhysicalDeviceVideoCapabilitiesKHR(physical_device: PhysicalDevice,  p_video_profile: [*c]const VideoProfileInfoKHR,  p_capabilities: [*c]VideoCapabilitiesKHR) Result;
pub const getPhysicalDeviceVideoCapabilitiesKHR = vkGetPhysicalDeviceVideoCapabilitiesKHR;
extern fn vkGetPhysicalDeviceVideoFormatPropertiesKHR(physical_device: PhysicalDevice,  p_video_format_info: [*c]const PhysicalDeviceVideoFormatInfoKHR,  p_video_format_property_count: [*c]u32,  p_video_format_properties: [*c]VideoFormatPropertiesKHR) Result;
pub const getPhysicalDeviceVideoFormatPropertiesKHR = vkGetPhysicalDeviceVideoFormatPropertiesKHR;
extern fn vkCreateVideoSessionKHR(device: Device,  p_create_info: [*c]const VideoSessionCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_video_session: [*c]VideoSessionKHR) Result;
pub const createVideoSessionKHR = vkCreateVideoSessionKHR;
extern fn vkDestroyVideoSessionKHR(device: Device,  video_session: VideoSessionKHR,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyVideoSessionKHR = vkDestroyVideoSessionKHR;
extern fn vkGetVideoSessionMemoryRequirementsKHR(device: Device,  video_session: VideoSessionKHR,  p_memory_requirements_count: [*c]u32,  p_memory_requirements: [*c]VideoSessionMemoryRequirementsKHR) Result;
pub const getVideoSessionMemoryRequirementsKHR = vkGetVideoSessionMemoryRequirementsKHR;
extern fn vkBindVideoSessionMemoryKHR(device: Device,  video_session: VideoSessionKHR,  bind_session_memory_info_count: u32,  p_bind_session_memory_infos: [*c]const BindVideoSessionMemoryInfoKHR) Result;
pub const bindVideoSessionMemoryKHR = vkBindVideoSessionMemoryKHR;
extern fn vkCreateVideoSessionParametersKHR(device: Device,  p_create_info: [*c]const VideoSessionParametersCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_video_session_parameters: [*c]VideoSessionParametersKHR) Result;
pub const createVideoSessionParametersKHR = vkCreateVideoSessionParametersKHR;
extern fn vkUpdateVideoSessionParametersKHR(device: Device,  video_session_parameters: VideoSessionParametersKHR,  p_update_info: [*c]const VideoSessionParametersUpdateInfoKHR) Result;
pub const updateVideoSessionParametersKHR = vkUpdateVideoSessionParametersKHR;
extern fn vkDestroyVideoSessionParametersKHR(device: Device,  video_session_parameters: VideoSessionParametersKHR,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyVideoSessionParametersKHR = vkDestroyVideoSessionParametersKHR;
extern fn vkCmdBeginVideoCodingKHR(command_buffer: CommandBuffer,  p_begin_info: [*c]const VideoBeginCodingInfoKHR) void;
pub const cmdBeginVideoCodingKHR = vkCmdBeginVideoCodingKHR;
extern fn vkCmdEndVideoCodingKHR(command_buffer: CommandBuffer,  p_end_coding_info: [*c]const VideoEndCodingInfoKHR) void;
pub const cmdEndVideoCodingKHR = vkCmdEndVideoCodingKHR;
extern fn vkCmdControlVideoCodingKHR(command_buffer: CommandBuffer,  p_coding_control_info: [*c]const VideoCodingControlInfoKHR) void;
pub const cmdControlVideoCodingKHR = vkCmdControlVideoCodingKHR;
extern fn vkCmdDecodeVideoKHR(command_buffer: CommandBuffer,  p_decode_info: [*c]const VideoDecodeInfoKHR) void;
pub const cmdDecodeVideoKHR = vkCmdDecodeVideoKHR;
extern fn vkCmdBeginRenderingKHR(command_buffer: CommandBuffer,  p_rendering_info: [*c]const RenderingInfo) void;
pub const cmdBeginRenderingKHR = vkCmdBeginRenderingKHR;
extern fn vkCmdEndRenderingKHR(command_buffer: CommandBuffer) void;
pub const cmdEndRenderingKHR = vkCmdEndRenderingKHR;
extern fn vkGetPhysicalDeviceFeatures2KHR(physical_device: PhysicalDevice,  p_features: [*c]PhysicalDeviceFeatures2) void;
pub const getPhysicalDeviceFeatures2KHR = vkGetPhysicalDeviceFeatures2KHR;
extern fn vkGetPhysicalDeviceProperties2KHR(physical_device: PhysicalDevice,  p_properties: [*c]PhysicalDeviceProperties2) void;
pub const getPhysicalDeviceProperties2KHR = vkGetPhysicalDeviceProperties2KHR;
extern fn vkGetPhysicalDeviceFormatProperties2KHR(physical_device: PhysicalDevice,  format: Format,  p_format_properties: [*c]FormatProperties2) void;
pub const getPhysicalDeviceFormatProperties2KHR = vkGetPhysicalDeviceFormatProperties2KHR;
extern fn vkGetPhysicalDeviceImageFormatProperties2KHR(physical_device: PhysicalDevice,  p_image_format_info: [*c]const PhysicalDeviceImageFormatInfo2,  p_image_format_properties: [*c]ImageFormatProperties2) Result;
pub const getPhysicalDeviceImageFormatProperties2KHR = vkGetPhysicalDeviceImageFormatProperties2KHR;
extern fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(physical_device: PhysicalDevice,  p_queue_family_property_count: [*c]u32,  p_queue_family_properties: [*c]QueueFamilyProperties2) void;
pub const getPhysicalDeviceQueueFamilyProperties2KHR = vkGetPhysicalDeviceQueueFamilyProperties2KHR;
extern fn vkGetPhysicalDeviceMemoryProperties2KHR(physical_device: PhysicalDevice,  p_memory_properties: [*c]PhysicalDeviceMemoryProperties2) void;
pub const getPhysicalDeviceMemoryProperties2KHR = vkGetPhysicalDeviceMemoryProperties2KHR;
extern fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physical_device: PhysicalDevice,  p_format_info: [*c]const PhysicalDeviceSparseImageFormatInfo2,  p_property_count: [*c]u32,  p_properties: [*c]SparseImageFormatProperties2) void;
pub const getPhysicalDeviceSparseImageFormatProperties2KHR = vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
extern fn vkGetDeviceGroupPeerMemoryFeaturesKHR(device: Device,  heap_index: u32,  local_device_index: u32,  remote_device_index: u32,  p_peer_memory_features: [*c]PeerMemoryFeatureFlags) void;
pub const getDeviceGroupPeerMemoryFeaturesKHR = vkGetDeviceGroupPeerMemoryFeaturesKHR;
extern fn vkCmdSetDeviceMaskKHR(command_buffer: CommandBuffer,  device_mask: u32) void;
pub const cmdSetDeviceMaskKHR = vkCmdSetDeviceMaskKHR;
extern fn vkCmdDispatchBaseKHR(command_buffer: CommandBuffer,  base_group_x: u32,  base_group_y: u32,  base_group_z: u32,  group_count_x: u32,  group_count_y: u32,  group_count_z: u32) void;
pub const cmdDispatchBaseKHR = vkCmdDispatchBaseKHR;
extern fn vkTrimCommandPoolKHR(device: Device,  command_pool: CommandPool,  flags: CommandPoolTrimFlags) void;
pub const trimCommandPoolKHR = vkTrimCommandPoolKHR;
extern fn vkEnumeratePhysicalDeviceGroupsKHR(instance: Instance,  p_physical_device_group_count: [*c]u32,  p_physical_device_group_properties: [*c]PhysicalDeviceGroupProperties) Result;
pub const enumeratePhysicalDeviceGroupsKHR = vkEnumeratePhysicalDeviceGroupsKHR;
extern fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(physical_device: PhysicalDevice,  p_external_buffer_info: [*c]const PhysicalDeviceExternalBufferInfo,  p_external_buffer_properties: [*c]ExternalBufferProperties) void;
pub const getPhysicalDeviceExternalBufferPropertiesKHR = vkGetPhysicalDeviceExternalBufferPropertiesKHR;
extern fn vkGetMemoryFdKHR(device: Device,  p_get_fd_info: [*c]const MemoryGetFdInfoKHR,  p_fd: [*c]c_int) Result;
pub const getMemoryFdKHR = vkGetMemoryFdKHR;
extern fn vkGetMemoryFdPropertiesKHR(device: Device,  handle_type: ExternalMemoryHandleTypeFlagBits,  fd: c_int,  p_memory_fd_properties: [*c]MemoryFdPropertiesKHR) Result;
pub const getMemoryFdPropertiesKHR = vkGetMemoryFdPropertiesKHR;
extern fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physical_device: PhysicalDevice,  p_external_semaphore_info: [*c]const PhysicalDeviceExternalSemaphoreInfo,  p_external_semaphore_properties: [*c]ExternalSemaphoreProperties) void;
pub const getPhysicalDeviceExternalSemaphorePropertiesKHR = vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
extern fn vkImportSemaphoreFdKHR(device: Device,  p_import_semaphore_fd_info: [*c]const ImportSemaphoreFdInfoKHR) Result;
pub const importSemaphoreFdKHR = vkImportSemaphoreFdKHR;
extern fn vkGetSemaphoreFdKHR(device: Device,  p_get_fd_info: [*c]const SemaphoreGetFdInfoKHR,  p_fd: [*c]c_int) Result;
pub const getSemaphoreFdKHR = vkGetSemaphoreFdKHR;
extern fn vkCmdPushDescriptorSetKHR(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  layout: PipelineLayout,  set: u32,  descriptor_write_count: u32,  p_descriptor_writes: [*c]const WriteDescriptorSet) void;
pub const cmdPushDescriptorSetKHR = vkCmdPushDescriptorSetKHR;
extern fn vkCmdPushDescriptorSetWithTemplateKHR(command_buffer: CommandBuffer,  descriptor_update_template: DescriptorUpdateTemplate,  layout: PipelineLayout,  set: u32,  p_data: ?*const anyopaque) void;
pub const cmdPushDescriptorSetWithTemplateKHR = vkCmdPushDescriptorSetWithTemplateKHR;
extern fn vkCreateDescriptorUpdateTemplateKHR(device: Device,  p_create_info: [*c]const DescriptorUpdateTemplateCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_descriptor_update_template: [*c]DescriptorUpdateTemplate) Result;
pub const createDescriptorUpdateTemplateKHR = vkCreateDescriptorUpdateTemplateKHR;
extern fn vkDestroyDescriptorUpdateTemplateKHR(device: Device,  descriptor_update_template: DescriptorUpdateTemplate,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDescriptorUpdateTemplateKHR = vkDestroyDescriptorUpdateTemplateKHR;
extern fn vkUpdateDescriptorSetWithTemplateKHR(device: Device,  descriptor_set: DescriptorSet,  descriptor_update_template: DescriptorUpdateTemplate,  p_data: ?*const anyopaque) void;
pub const updateDescriptorSetWithTemplateKHR = vkUpdateDescriptorSetWithTemplateKHR;
extern fn vkCreateRenderPass2KHR(device: Device,  p_create_info: [*c]const RenderPassCreateInfo2,  p_allocator: [*c]const AllocationCallbacks,  p_render_pass: [*c]RenderPass) Result;
pub const createRenderPass2KHR = vkCreateRenderPass2KHR;
extern fn vkCmdBeginRenderPass2KHR(command_buffer: CommandBuffer,  p_render_pass_begin: [*c]const RenderPassBeginInfo,  p_subpass_begin_info: [*c]const SubpassBeginInfo) void;
pub const cmdBeginRenderPass2KHR = vkCmdBeginRenderPass2KHR;
extern fn vkCmdNextSubpass2KHR(command_buffer: CommandBuffer,  p_subpass_begin_info: [*c]const SubpassBeginInfo,  p_subpass_end_info: [*c]const SubpassEndInfo) void;
pub const cmdNextSubpass2KHR = vkCmdNextSubpass2KHR;
extern fn vkCmdEndRenderPass2KHR(command_buffer: CommandBuffer,  p_subpass_end_info: [*c]const SubpassEndInfo) void;
pub const cmdEndRenderPass2KHR = vkCmdEndRenderPass2KHR;
extern fn vkGetSwapchainStatusKHR(device: Device,  swapchain: SwapchainKHR) Result;
pub const getSwapchainStatusKHR = vkGetSwapchainStatusKHR;
extern fn vkGetPhysicalDeviceExternalFencePropertiesKHR(physical_device: PhysicalDevice,  p_external_fence_info: [*c]const PhysicalDeviceExternalFenceInfo,  p_external_fence_properties: [*c]ExternalFenceProperties) void;
pub const getPhysicalDeviceExternalFencePropertiesKHR = vkGetPhysicalDeviceExternalFencePropertiesKHR;
extern fn vkImportFenceFdKHR(device: Device,  p_import_fence_fd_info: [*c]const ImportFenceFdInfoKHR) Result;
pub const importFenceFdKHR = vkImportFenceFdKHR;
extern fn vkGetFenceFdKHR(device: Device,  p_get_fd_info: [*c]const FenceGetFdInfoKHR,  p_fd: [*c]c_int) Result;
pub const getFenceFdKHR = vkGetFenceFdKHR;
extern fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physical_device: PhysicalDevice,  queue_family_index: u32,  p_counter_count: [*c]u32,  p_counters: [*c]PerformanceCounterKHR,  p_counter_descriptions: [*c]PerformanceCounterDescriptionKHR) Result;
pub const enumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
extern fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physical_device: PhysicalDevice,  p_performance_query_create_info: [*c]const QueryPoolPerformanceCreateInfoKHR,  p_num_passes: [*c]u32) void;
pub const getPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
extern fn vkAcquireProfilingLockKHR(device: Device,  p_info: [*c]const AcquireProfilingLockInfoKHR) Result;
pub const acquireProfilingLockKHR = vkAcquireProfilingLockKHR;
extern fn vkReleaseProfilingLockKHR(device: Device) void;
pub const releaseProfilingLockKHR = vkReleaseProfilingLockKHR;
extern fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(physical_device: PhysicalDevice,  p_surface_info: [*c]const PhysicalDeviceSurfaceInfo2KHR,  p_surface_capabilities: [*c]SurfaceCapabilities2KHR) Result;
pub const getPhysicalDeviceSurfaceCapabilities2KHR = vkGetPhysicalDeviceSurfaceCapabilities2KHR;
extern fn vkGetPhysicalDeviceSurfaceFormats2KHR(physical_device: PhysicalDevice,  p_surface_info: [*c]const PhysicalDeviceSurfaceInfo2KHR,  p_surface_format_count: [*c]u32,  p_surface_formats: [*c]SurfaceFormat2KHR) Result;
pub const getPhysicalDeviceSurfaceFormats2KHR = vkGetPhysicalDeviceSurfaceFormats2KHR;
extern fn vkGetPhysicalDeviceDisplayProperties2KHR(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]DisplayProperties2KHR) Result;
pub const getPhysicalDeviceDisplayProperties2KHR = vkGetPhysicalDeviceDisplayProperties2KHR;
extern fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]DisplayPlaneProperties2KHR) Result;
pub const getPhysicalDeviceDisplayPlaneProperties2KHR = vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
extern fn vkGetDisplayModeProperties2KHR(physical_device: PhysicalDevice,  display: DisplayKHR,  p_property_count: [*c]u32,  p_properties: [*c]DisplayModeProperties2KHR) Result;
pub const getDisplayModeProperties2KHR = vkGetDisplayModeProperties2KHR;
extern fn vkGetDisplayPlaneCapabilities2KHR(physical_device: PhysicalDevice,  p_display_plane_info: [*c]const DisplayPlaneInfo2KHR,  p_capabilities: [*c]DisplayPlaneCapabilities2KHR) Result;
pub const getDisplayPlaneCapabilities2KHR = vkGetDisplayPlaneCapabilities2KHR;
extern fn vkGetImageMemoryRequirements2KHR(device: Device,  p_info: [*c]const ImageMemoryRequirementsInfo2,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getImageMemoryRequirements2KHR = vkGetImageMemoryRequirements2KHR;
extern fn vkGetBufferMemoryRequirements2KHR(device: Device,  p_info: [*c]const BufferMemoryRequirementsInfo2,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getBufferMemoryRequirements2KHR = vkGetBufferMemoryRequirements2KHR;
extern fn vkGetImageSparseMemoryRequirements2KHR(device: Device,  p_info: [*c]const ImageSparseMemoryRequirementsInfo2,  p_sparse_memory_requirement_count: [*c]u32,  p_sparse_memory_requirements: [*c]SparseImageMemoryRequirements2) void;
pub const getImageSparseMemoryRequirements2KHR = vkGetImageSparseMemoryRequirements2KHR;
extern fn vkCreateSamplerYcbcrConversionKHR(device: Device,  p_create_info: [*c]const SamplerYcbcrConversionCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_ycbcr_conversion: [*c]SamplerYcbcrConversion) Result;
pub const createSamplerYcbcrConversionKHR = vkCreateSamplerYcbcrConversionKHR;
extern fn vkDestroySamplerYcbcrConversionKHR(device: Device,  ycbcr_conversion: SamplerYcbcrConversion,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroySamplerYcbcrConversionKHR = vkDestroySamplerYcbcrConversionKHR;
extern fn vkBindBufferMemory2KHR(device: Device,  bind_info_count: u32,  p_bind_infos: [*c]const BindBufferMemoryInfo) Result;
pub const bindBufferMemory2KHR = vkBindBufferMemory2KHR;
extern fn vkBindImageMemory2KHR(device: Device,  bind_info_count: u32,  p_bind_infos: [*c]const BindImageMemoryInfo) Result;
pub const bindImageMemory2KHR = vkBindImageMemory2KHR;
extern fn vkGetDescriptorSetLayoutSupportKHR(device: Device,  p_create_info: [*c]const DescriptorSetLayoutCreateInfo,  p_support: [*c]DescriptorSetLayoutSupport) void;
pub const getDescriptorSetLayoutSupportKHR = vkGetDescriptorSetLayoutSupportKHR;
extern fn vkCmdDrawIndirectCountKHR(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawIndirectCountKHR = vkCmdDrawIndirectCountKHR;
extern fn vkCmdDrawIndexedIndirectCountKHR(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawIndexedIndirectCountKHR = vkCmdDrawIndexedIndirectCountKHR;
extern fn vkGetSemaphoreCounterValueKHR(device: Device,  semaphore: Semaphore,  p_value: [*c]u64) Result;
pub const getSemaphoreCounterValueKHR = vkGetSemaphoreCounterValueKHR;
extern fn vkWaitSemaphoresKHR(device: Device,  p_wait_info: [*c]const SemaphoreWaitInfo,  timeout: u64) Result;
pub const waitSemaphoresKHR = vkWaitSemaphoresKHR;
extern fn vkSignalSemaphoreKHR(device: Device,  p_signal_info: [*c]const SemaphoreSignalInfo) Result;
pub const signalSemaphoreKHR = vkSignalSemaphoreKHR;
extern fn vkGetPhysicalDeviceFragmentShadingRatesKHR(physical_device: PhysicalDevice,  p_fragment_shading_rate_count: [*c]u32,  p_fragment_shading_rates: [*c]PhysicalDeviceFragmentShadingRateKHR) Result;
pub const getPhysicalDeviceFragmentShadingRatesKHR = vkGetPhysicalDeviceFragmentShadingRatesKHR;
extern fn vkCmdSetFragmentShadingRateKHR(command_buffer: CommandBuffer,  p_fragment_size: [*c]const Extent2D,  combiner_ops: [*c]const FragmentShadingRateCombinerOpKHR) void;
pub const cmdSetFragmentShadingRateKHR = vkCmdSetFragmentShadingRateKHR;
extern fn vkCmdSetRenderingAttachmentLocationsKHR(command_buffer: CommandBuffer,  p_location_info: [*c]const RenderingAttachmentLocationInfo) void;
pub const cmdSetRenderingAttachmentLocationsKHR = vkCmdSetRenderingAttachmentLocationsKHR;
extern fn vkCmdSetRenderingInputAttachmentIndicesKHR(command_buffer: CommandBuffer,  p_input_attachment_index_info: [*c]const RenderingInputAttachmentIndexInfo) void;
pub const cmdSetRenderingInputAttachmentIndicesKHR = vkCmdSetRenderingInputAttachmentIndicesKHR;
extern fn vkWaitForPresentKHR(device: Device,  swapchain: SwapchainKHR,  present_id: u64,  timeout: u64) Result;
pub const waitForPresentKHR = vkWaitForPresentKHR;
extern fn vkGetBufferDeviceAddressKHR(device: Device,  p_info: [*c]const BufferDeviceAddressInfo) DeviceAddress;
pub const getBufferDeviceAddressKHR = vkGetBufferDeviceAddressKHR;
extern fn vkGetBufferOpaqueCaptureAddressKHR(device: Device,  p_info: [*c]const BufferDeviceAddressInfo) u64;
pub const getBufferOpaqueCaptureAddressKHR = vkGetBufferOpaqueCaptureAddressKHR;
extern fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(device: Device,  p_info: [*c]const DeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const getDeviceMemoryOpaqueCaptureAddressKHR = vkGetDeviceMemoryOpaqueCaptureAddressKHR;
extern fn vkCreateDeferredOperationKHR(device: Device,  p_allocator: [*c]const AllocationCallbacks,  p_deferred_operation: [*c]DeferredOperationKHR) Result;
pub const createDeferredOperationKHR = vkCreateDeferredOperationKHR;
extern fn vkDestroyDeferredOperationKHR(device: Device,  operation: DeferredOperationKHR,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDeferredOperationKHR = vkDestroyDeferredOperationKHR;
extern fn vkGetDeferredOperationMaxConcurrencyKHR(device: Device,  operation: DeferredOperationKHR) u32;
pub const getDeferredOperationMaxConcurrencyKHR = vkGetDeferredOperationMaxConcurrencyKHR;
extern fn vkGetDeferredOperationResultKHR(device: Device,  operation: DeferredOperationKHR) Result;
pub const getDeferredOperationResultKHR = vkGetDeferredOperationResultKHR;
extern fn vkDeferredOperationJoinKHR(device: Device,  operation: DeferredOperationKHR) Result;
pub const deferredOperationJoinKHR = vkDeferredOperationJoinKHR;
extern fn vkGetPipelineExecutablePropertiesKHR(device: Device,  p_pipeline_info: [*c]const PipelineInfoKHR,  p_executable_count: [*c]u32,  p_properties: [*c]PipelineExecutablePropertiesKHR) Result;
pub const getPipelineExecutablePropertiesKHR = vkGetPipelineExecutablePropertiesKHR;
extern fn vkGetPipelineExecutableStatisticsKHR(device: Device,  p_executable_info: [*c]const PipelineExecutableInfoKHR,  p_statistic_count: [*c]u32,  p_statistics: [*c]PipelineExecutableStatisticKHR) Result;
pub const getPipelineExecutableStatisticsKHR = vkGetPipelineExecutableStatisticsKHR;
extern fn vkGetPipelineExecutableInternalRepresentationsKHR(device: Device,  p_executable_info: [*c]const PipelineExecutableInfoKHR,  p_internal_representation_count: [*c]u32,  p_internal_representations: [*c]PipelineExecutableInternalRepresentationKHR) Result;
pub const getPipelineExecutableInternalRepresentationsKHR = vkGetPipelineExecutableInternalRepresentationsKHR;
extern fn vkMapMemory2KHR(device: Device,  p_memory_map_info: [*c]const MemoryMapInfo,  pp_data: [*c]?*anyopaque) Result;
pub const mapMemory2KHR = vkMapMemory2KHR;
extern fn vkUnmapMemory2KHR(device: Device,  p_memory_unmap_info: [*c]const MemoryUnmapInfo) Result;
pub const unmapMemory2KHR = vkUnmapMemory2KHR;
extern fn vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR(physical_device: PhysicalDevice,  p_quality_level_info: [*c]const PhysicalDeviceVideoEncodeQualityLevelInfoKHR,  p_quality_level_properties: [*c]VideoEncodeQualityLevelPropertiesKHR) Result;
pub const getPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR;
extern fn vkGetEncodedVideoSessionParametersKHR(device: Device,  p_video_session_parameters_info: [*c]const VideoEncodeSessionParametersGetInfoKHR,  p_feedback_info: [*c]VideoEncodeSessionParametersFeedbackInfoKHR,  p_data_size: [*c]usize,  p_data: ?*anyopaque) Result;
pub const getEncodedVideoSessionParametersKHR = vkGetEncodedVideoSessionParametersKHR;
extern fn vkCmdEncodeVideoKHR(command_buffer: CommandBuffer,  p_encode_info: [*c]const VideoEncodeInfoKHR) void;
pub const cmdEncodeVideoKHR = vkCmdEncodeVideoKHR;
extern fn vkCmdSetEvent2KHR(command_buffer: CommandBuffer,  event: Event,  p_dependency_info: [*c]const DependencyInfo) void;
pub const cmdSetEvent2KHR = vkCmdSetEvent2KHR;
extern fn vkCmdResetEvent2KHR(command_buffer: CommandBuffer,  event: Event,  stage_mask: PipelineStageFlags2) void;
pub const cmdResetEvent2KHR = vkCmdResetEvent2KHR;
extern fn vkCmdWaitEvents2KHR(command_buffer: CommandBuffer,  event_count: u32,  p_events: [*c]const Event,  p_dependency_infos: [*c]const DependencyInfo) void;
pub const cmdWaitEvents2KHR = vkCmdWaitEvents2KHR;
extern fn vkCmdPipelineBarrier2KHR(command_buffer: CommandBuffer,  p_dependency_info: [*c]const DependencyInfo) void;
pub const cmdPipelineBarrier2KHR = vkCmdPipelineBarrier2KHR;
extern fn vkCmdWriteTimestamp2KHR(command_buffer: CommandBuffer,  stage: PipelineStageFlags2,  query_pool: QueryPool,  query: u32) void;
pub const cmdWriteTimestamp2KHR = vkCmdWriteTimestamp2KHR;
extern fn vkQueueSubmit2KHR(queue: Queue,  submit_count: u32,  p_submits: [*c]const SubmitInfo2,  fence: Fence) Result;
pub const queueSubmit2KHR = vkQueueSubmit2KHR;
extern fn vkCmdCopyBuffer2KHR(command_buffer: CommandBuffer,  p_copy_buffer_info: [*c]const CopyBufferInfo2) void;
pub const cmdCopyBuffer2KHR = vkCmdCopyBuffer2KHR;
extern fn vkCmdCopyImage2KHR(command_buffer: CommandBuffer,  p_copy_image_info: [*c]const CopyImageInfo2) void;
pub const cmdCopyImage2KHR = vkCmdCopyImage2KHR;
extern fn vkCmdCopyBufferToImage2KHR(command_buffer: CommandBuffer,  p_copy_buffer_to_image_info: [*c]const CopyBufferToImageInfo2) void;
pub const cmdCopyBufferToImage2KHR = vkCmdCopyBufferToImage2KHR;
extern fn vkCmdCopyImageToBuffer2KHR(command_buffer: CommandBuffer,  p_copy_image_to_buffer_info: [*c]const CopyImageToBufferInfo2) void;
pub const cmdCopyImageToBuffer2KHR = vkCmdCopyImageToBuffer2KHR;
extern fn vkCmdBlitImage2KHR(command_buffer: CommandBuffer,  p_blit_image_info: [*c]const BlitImageInfo2) void;
pub const cmdBlitImage2KHR = vkCmdBlitImage2KHR;
extern fn vkCmdResolveImage2KHR(command_buffer: CommandBuffer,  p_resolve_image_info: [*c]const ResolveImageInfo2) void;
pub const cmdResolveImage2KHR = vkCmdResolveImage2KHR;
extern fn vkCmdTraceRaysIndirect2KHR(command_buffer: CommandBuffer,  indirect_device_address: DeviceAddress) void;
pub const cmdTraceRaysIndirect2KHR = vkCmdTraceRaysIndirect2KHR;
extern fn vkGetDeviceBufferMemoryRequirementsKHR(device: Device,  p_info: [*c]const DeviceBufferMemoryRequirements,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getDeviceBufferMemoryRequirementsKHR = vkGetDeviceBufferMemoryRequirementsKHR;
extern fn vkGetDeviceImageMemoryRequirementsKHR(device: Device,  p_info: [*c]const DeviceImageMemoryRequirements,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getDeviceImageMemoryRequirementsKHR = vkGetDeviceImageMemoryRequirementsKHR;
extern fn vkGetDeviceImageSparseMemoryRequirementsKHR(device: Device,  p_info: [*c]const DeviceImageMemoryRequirements,  p_sparse_memory_requirement_count: [*c]u32,  p_sparse_memory_requirements: [*c]SparseImageMemoryRequirements2) void;
pub const getDeviceImageSparseMemoryRequirementsKHR = vkGetDeviceImageSparseMemoryRequirementsKHR;
extern fn vkCmdBindIndexBuffer2KHR(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  size: DeviceSize,  index_type: IndexType) void;
pub const cmdBindIndexBuffer2KHR = vkCmdBindIndexBuffer2KHR;
extern fn vkGetRenderingAreaGranularityKHR(device: Device,  p_rendering_area_info: [*c]const RenderingAreaInfo,  p_granularity: [*c]Extent2D) void;
pub const getRenderingAreaGranularityKHR = vkGetRenderingAreaGranularityKHR;
extern fn vkGetDeviceImageSubresourceLayoutKHR(device: Device,  p_info: [*c]const DeviceImageSubresourceInfo,  p_layout: [*c]SubresourceLayout2) void;
pub const getDeviceImageSubresourceLayoutKHR = vkGetDeviceImageSubresourceLayoutKHR;
extern fn vkGetImageSubresourceLayout2KHR(device: Device,  image: Image,  p_subresource: [*c]const ImageSubresource2,  p_layout: [*c]SubresourceLayout2) void;
pub const getImageSubresourceLayout2KHR = vkGetImageSubresourceLayout2KHR;
extern fn vkWaitForPresent2KHR(device: Device,  swapchain: SwapchainKHR,  p_present_wait2info: [*c]const PresentWait2InfoKHR) Result;
pub const waitForPresent2KHR = vkWaitForPresent2KHR;
extern fn vkCreatePipelineBinariesKHR(device: Device,  p_create_info: [*c]const PipelineBinaryCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_binaries: [*c]PipelineBinaryHandlesInfoKHR) Result;
pub const createPipelineBinariesKHR = vkCreatePipelineBinariesKHR;
extern fn vkDestroyPipelineBinaryKHR(device: Device,  pipeline_binary: PipelineBinaryKHR,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyPipelineBinaryKHR = vkDestroyPipelineBinaryKHR;
extern fn vkGetPipelineKeyKHR(device: Device,  p_pipeline_create_info: [*c]const PipelineCreateInfoKHR,  p_pipeline_key: [*c]PipelineBinaryKeyKHR) Result;
pub const getPipelineKeyKHR = vkGetPipelineKeyKHR;
extern fn vkGetPipelineBinaryDataKHR(device: Device,  p_info: [*c]const PipelineBinaryDataInfoKHR,  p_pipeline_binary_key: [*c]PipelineBinaryKeyKHR,  p_pipeline_binary_data_size: [*c]usize,  p_pipeline_binary_data: ?*anyopaque) Result;
pub const getPipelineBinaryDataKHR = vkGetPipelineBinaryDataKHR;
extern fn vkReleaseCapturedPipelineDataKHR(device: Device,  p_info: [*c]const ReleaseCapturedPipelineDataInfoKHR,  p_allocator: [*c]const AllocationCallbacks) Result;
pub const releaseCapturedPipelineDataKHR = vkReleaseCapturedPipelineDataKHR;
extern fn vkReleaseSwapchainImagesKHR(device: Device,  p_release_info: [*c]const ReleaseSwapchainImagesInfoKHR) Result;
pub const releaseSwapchainImagesKHR = vkReleaseSwapchainImagesKHR;
extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]CooperativeMatrixPropertiesKHR) Result;
pub const getPhysicalDeviceCooperativeMatrixPropertiesKHR = vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR;
extern fn vkCmdSetLineStippleKHR(command_buffer: CommandBuffer,  line_stipple_factor: u32,  line_stipple_pattern: u16) void;
pub const cmdSetLineStippleKHR = vkCmdSetLineStippleKHR;
extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsKHR(physical_device: PhysicalDevice,  p_time_domain_count: [*c]u32,  p_time_domains: [*c]TimeDomainKHR) Result;
pub const getPhysicalDeviceCalibrateableTimeDomainsKHR = vkGetPhysicalDeviceCalibrateableTimeDomainsKHR;
extern fn vkGetCalibratedTimestampsKHR(device: Device,  timestamp_count: u32,  p_timestamp_infos: [*c]const CalibratedTimestampInfoKHR,  p_timestamps: [*c]u64,  p_max_deviation: [*c]u64) Result;
pub const getCalibratedTimestampsKHR = vkGetCalibratedTimestampsKHR;
extern fn vkCmdBindDescriptorSets2KHR(command_buffer: CommandBuffer,  p_bind_descriptor_sets_info: [*c]const BindDescriptorSetsInfo) void;
pub const cmdBindDescriptorSets2KHR = vkCmdBindDescriptorSets2KHR;
extern fn vkCmdPushConstants2KHR(command_buffer: CommandBuffer,  p_push_constants_info: [*c]const PushConstantsInfo) void;
pub const cmdPushConstants2KHR = vkCmdPushConstants2KHR;
extern fn vkCmdPushDescriptorSet2KHR(command_buffer: CommandBuffer,  p_push_descriptor_set_info: [*c]const PushDescriptorSetInfo) void;
pub const cmdPushDescriptorSet2KHR = vkCmdPushDescriptorSet2KHR;
extern fn vkCmdPushDescriptorSetWithTemplate2KHR(command_buffer: CommandBuffer,  p_push_descriptor_set_with_template_info: [*c]const PushDescriptorSetWithTemplateInfo) void;
pub const cmdPushDescriptorSetWithTemplate2KHR = vkCmdPushDescriptorSetWithTemplate2KHR;
extern fn vkCmdSetDescriptorBufferOffsets2EXT(command_buffer: CommandBuffer,  p_set_descriptor_buffer_offsets_info: [*c]const SetDescriptorBufferOffsetsInfoEXT) void;
pub const cmdSetDescriptorBufferOffsets2EXT = vkCmdSetDescriptorBufferOffsets2EXT;
extern fn vkCmdBindDescriptorBufferEmbeddedSamplers2EXT(command_buffer: CommandBuffer,  p_bind_descriptor_buffer_embedded_samplers_info: [*c]const BindDescriptorBufferEmbeddedSamplersInfoEXT) void;
pub const cmdBindDescriptorBufferEmbeddedSamplers2EXT = vkCmdBindDescriptorBufferEmbeddedSamplers2EXT;
extern fn vkCreateDebugReportCallbackEXT(instance: Instance,  p_create_info: [*c]const DebugReportCallbackCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_callback: [*c]DebugReportCallbackEXT) Result;
pub const createDebugReportCallbackEXT = vkCreateDebugReportCallbackEXT;
extern fn vkDestroyDebugReportCallbackEXT(instance: Instance,  callback: DebugReportCallbackEXT,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDebugReportCallbackEXT = vkDestroyDebugReportCallbackEXT;
extern fn vkDebugReportMessageEXT(instance: Instance,  flags: DebugReportFlagsEXT,  object_type: DebugReportObjectTypeEXT,  object: u64,  location: usize,  message_code: i32,  p_layer_prefix: [*c]const u8,  p_message: [*c]const u8) void;
pub const debugReportMessageEXT = vkDebugReportMessageEXT;
extern fn vkDebugMarkerSetObjectTagEXT(device: Device,  p_tag_info: [*c]const DebugMarkerObjectTagInfoEXT) Result;
pub const debugMarkerSetObjectTagEXT = vkDebugMarkerSetObjectTagEXT;
extern fn vkDebugMarkerSetObjectNameEXT(device: Device,  p_name_info: [*c]const DebugMarkerObjectNameInfoEXT) Result;
pub const debugMarkerSetObjectNameEXT = vkDebugMarkerSetObjectNameEXT;
extern fn vkCmdDebugMarkerBeginEXT(command_buffer: CommandBuffer,  p_marker_info: [*c]const DebugMarkerMarkerInfoEXT) void;
pub const cmdDebugMarkerBeginEXT = vkCmdDebugMarkerBeginEXT;
extern fn vkCmdDebugMarkerEndEXT(command_buffer: CommandBuffer) void;
pub const cmdDebugMarkerEndEXT = vkCmdDebugMarkerEndEXT;
extern fn vkCmdDebugMarkerInsertEXT(command_buffer: CommandBuffer,  p_marker_info: [*c]const DebugMarkerMarkerInfoEXT) void;
pub const cmdDebugMarkerInsertEXT = vkCmdDebugMarkerInsertEXT;
extern fn vkCmdBindTransformFeedbackBuffersEXT(command_buffer: CommandBuffer,  first_binding: u32,  binding_count: u32,  p_buffers: [*c]const Buffer,  p_offsets: [*c]const DeviceSize,  p_sizes: [*c]const DeviceSize) void;
pub const cmdBindTransformFeedbackBuffersEXT = vkCmdBindTransformFeedbackBuffersEXT;
extern fn vkCmdBeginTransformFeedbackEXT(command_buffer: CommandBuffer,  first_counter_buffer: u32,  counter_buffer_count: u32,  p_counter_buffers: [*c]const Buffer,  p_counter_buffer_offsets: [*c]const DeviceSize) void;
pub const cmdBeginTransformFeedbackEXT = vkCmdBeginTransformFeedbackEXT;
extern fn vkCmdEndTransformFeedbackEXT(command_buffer: CommandBuffer,  first_counter_buffer: u32,  counter_buffer_count: u32,  p_counter_buffers: [*c]const Buffer,  p_counter_buffer_offsets: [*c]const DeviceSize) void;
pub const cmdEndTransformFeedbackEXT = vkCmdEndTransformFeedbackEXT;
extern fn vkCmdBeginQueryIndexedEXT(command_buffer: CommandBuffer,  query_pool: QueryPool,  query: u32,  flags: QueryControlFlags,  index: u32) void;
pub const cmdBeginQueryIndexedEXT = vkCmdBeginQueryIndexedEXT;
extern fn vkCmdEndQueryIndexedEXT(command_buffer: CommandBuffer,  query_pool: QueryPool,  query: u32,  index: u32) void;
pub const cmdEndQueryIndexedEXT = vkCmdEndQueryIndexedEXT;
extern fn vkCmdDrawIndirectByteCountEXT(command_buffer: CommandBuffer,  instance_count: u32,  first_instance: u32,  counter_buffer: Buffer,  counter_buffer_offset: DeviceSize,  counter_offset: u32,  vertex_stride: u32) void;
pub const cmdDrawIndirectByteCountEXT = vkCmdDrawIndirectByteCountEXT;
extern fn vkCreateCuModuleNVX(device: Device,  p_create_info: [*c]const CuModuleCreateInfoNVX,  p_allocator: [*c]const AllocationCallbacks,  p_module: [*c]CuModuleNVX) Result;
pub const createCuModuleNVX = vkCreateCuModuleNVX;
extern fn vkCreateCuFunctionNVX(device: Device,  p_create_info: [*c]const CuFunctionCreateInfoNVX,  p_allocator: [*c]const AllocationCallbacks,  p_function: [*c]CuFunctionNVX) Result;
pub const createCuFunctionNVX = vkCreateCuFunctionNVX;
extern fn vkDestroyCuModuleNVX(device: Device,  module: CuModuleNVX,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyCuModuleNVX = vkDestroyCuModuleNVX;
extern fn vkDestroyCuFunctionNVX(device: Device,  function: CuFunctionNVX,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyCuFunctionNVX = vkDestroyCuFunctionNVX;
extern fn vkCmdCuLaunchKernelNVX(command_buffer: CommandBuffer,  p_launch_info: [*c]const CuLaunchInfoNVX) void;
pub const cmdCuLaunchKernelNVX = vkCmdCuLaunchKernelNVX;
extern fn vkGetImageViewHandleNVX(device: Device,  p_info: [*c]const ImageViewHandleInfoNVX) u32;
pub const getImageViewHandleNVX = vkGetImageViewHandleNVX;
extern fn vkGetImageViewHandle64NVX(device: Device,  p_info: [*c]const ImageViewHandleInfoNVX) u64;
pub const getImageViewHandle64NVX = vkGetImageViewHandle64NVX;
extern fn vkGetImageViewAddressNVX(device: Device,  image_view: ImageView,  p_properties: [*c]ImageViewAddressPropertiesNVX) Result;
pub const getImageViewAddressNVX = vkGetImageViewAddressNVX;
extern fn vkCmdDrawIndirectCountAMD(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawIndirectCountAMD = vkCmdDrawIndirectCountAMD;
extern fn vkCmdDrawIndexedIndirectCountAMD(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawIndexedIndirectCountAMD = vkCmdDrawIndexedIndirectCountAMD;
extern fn vkGetShaderInfoAMD(device: Device,  pipeline: Pipeline,  shader_stage: ShaderStageFlagBits,  info_type: ShaderInfoTypeAMD,  p_info_size: [*c]usize,  p_info: ?*anyopaque) Result;
pub const getShaderInfoAMD = vkGetShaderInfoAMD;
extern fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physical_device: PhysicalDevice,  format: Format,  @"type": ImageType,  tiling: ImageTiling,  usage: ImageUsageFlags,  flags: ImageCreateFlags,  external_handle_type: ExternalMemoryHandleTypeFlagsNV,  p_external_image_format_properties: [*c]ExternalImageFormatPropertiesNV) Result;
pub const getPhysicalDeviceExternalImageFormatPropertiesNV = vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
extern fn vkCmdBeginConditionalRenderingEXT(command_buffer: CommandBuffer,  p_conditional_rendering_begin: [*c]const ConditionalRenderingBeginInfoEXT) void;
pub const cmdBeginConditionalRenderingEXT = vkCmdBeginConditionalRenderingEXT;
extern fn vkCmdEndConditionalRenderingEXT(command_buffer: CommandBuffer) void;
pub const cmdEndConditionalRenderingEXT = vkCmdEndConditionalRenderingEXT;
extern fn vkCmdSetViewportWScalingNV(command_buffer: CommandBuffer,  first_viewport: u32,  viewport_count: u32,  p_viewport_wscalings: [*c]const ViewportWScalingNV) void;
pub const cmdSetViewportWScalingNV = vkCmdSetViewportWScalingNV;
extern fn vkReleaseDisplayEXT(physical_device: PhysicalDevice,  display: DisplayKHR) Result;
pub const releaseDisplayEXT = vkReleaseDisplayEXT;
extern fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(physical_device: PhysicalDevice,  surface: SurfaceKHR,  p_surface_capabilities: [*c]SurfaceCapabilities2EXT) Result;
pub const getPhysicalDeviceSurfaceCapabilities2EXT = vkGetPhysicalDeviceSurfaceCapabilities2EXT;
extern fn vkDisplayPowerControlEXT(device: Device,  display: DisplayKHR,  p_display_power_info: [*c]const DisplayPowerInfoEXT) Result;
pub const displayPowerControlEXT = vkDisplayPowerControlEXT;
extern fn vkRegisterDeviceEventEXT(device: Device,  p_device_event_info: [*c]const DeviceEventInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_fence: [*c]Fence) Result;
pub const registerDeviceEventEXT = vkRegisterDeviceEventEXT;
extern fn vkRegisterDisplayEventEXT(device: Device,  display: DisplayKHR,  p_display_event_info: [*c]const DisplayEventInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_fence: [*c]Fence) Result;
pub const registerDisplayEventEXT = vkRegisterDisplayEventEXT;
extern fn vkGetSwapchainCounterEXT(device: Device,  swapchain: SwapchainKHR,  counter: SurfaceCounterFlagBitsEXT,  p_counter_value: [*c]u64) Result;
pub const getSwapchainCounterEXT = vkGetSwapchainCounterEXT;
extern fn vkGetRefreshCycleDurationGOOGLE(device: Device,  swapchain: SwapchainKHR,  p_display_timing_properties: [*c]RefreshCycleDurationGOOGLE) Result;
pub const getRefreshCycleDurationGOOGLE = vkGetRefreshCycleDurationGOOGLE;
extern fn vkGetPastPresentationTimingGOOGLE(device: Device,  swapchain: SwapchainKHR,  p_presentation_timing_count: [*c]u32,  p_presentation_timings: [*c]PastPresentationTimingGOOGLE) Result;
pub const getPastPresentationTimingGOOGLE = vkGetPastPresentationTimingGOOGLE;
extern fn vkCmdSetDiscardRectangleEXT(command_buffer: CommandBuffer,  first_discard_rectangle: u32,  discard_rectangle_count: u32,  p_discard_rectangles: [*c]const Rect2D) void;
pub const cmdSetDiscardRectangleEXT = vkCmdSetDiscardRectangleEXT;
extern fn vkCmdSetDiscardRectangleEnableEXT(command_buffer: CommandBuffer,  discard_rectangle_enable: Bool32) void;
pub const cmdSetDiscardRectangleEnableEXT = vkCmdSetDiscardRectangleEnableEXT;
extern fn vkCmdSetDiscardRectangleModeEXT(command_buffer: CommandBuffer,  discard_rectangle_mode: DiscardRectangleModeEXT) void;
pub const cmdSetDiscardRectangleModeEXT = vkCmdSetDiscardRectangleModeEXT;
extern fn vkSetHdrMetadataEXT(device: Device,  swapchain_count: u32,  p_swapchains: [*c]const SwapchainKHR,  p_metadata: [*c]const HdrMetadataEXT) void;
pub const setHdrMetadataEXT = vkSetHdrMetadataEXT;
extern fn vkSetDebugUtilsObjectNameEXT(device: Device,  p_name_info: [*c]const DebugUtilsObjectNameInfoEXT) Result;
pub const setDebugUtilsObjectNameEXT = vkSetDebugUtilsObjectNameEXT;
extern fn vkSetDebugUtilsObjectTagEXT(device: Device,  p_tag_info: [*c]const DebugUtilsObjectTagInfoEXT) Result;
pub const setDebugUtilsObjectTagEXT = vkSetDebugUtilsObjectTagEXT;
extern fn vkQueueBeginDebugUtilsLabelEXT(queue: Queue,  p_label_info: [*c]const DebugUtilsLabelEXT) void;
pub const queueBeginDebugUtilsLabelEXT = vkQueueBeginDebugUtilsLabelEXT;
extern fn vkQueueEndDebugUtilsLabelEXT(queue: Queue) void;
pub const queueEndDebugUtilsLabelEXT = vkQueueEndDebugUtilsLabelEXT;
extern fn vkQueueInsertDebugUtilsLabelEXT(queue: Queue,  p_label_info: [*c]const DebugUtilsLabelEXT) void;
pub const queueInsertDebugUtilsLabelEXT = vkQueueInsertDebugUtilsLabelEXT;
extern fn vkCmdBeginDebugUtilsLabelEXT(command_buffer: CommandBuffer,  p_label_info: [*c]const DebugUtilsLabelEXT) void;
pub const cmdBeginDebugUtilsLabelEXT = vkCmdBeginDebugUtilsLabelEXT;
extern fn vkCmdEndDebugUtilsLabelEXT(command_buffer: CommandBuffer) void;
pub const cmdEndDebugUtilsLabelEXT = vkCmdEndDebugUtilsLabelEXT;
extern fn vkCmdInsertDebugUtilsLabelEXT(command_buffer: CommandBuffer,  p_label_info: [*c]const DebugUtilsLabelEXT) void;
pub const cmdInsertDebugUtilsLabelEXT = vkCmdInsertDebugUtilsLabelEXT;
extern fn vkCreateDebugUtilsMessengerEXT(instance: Instance,  p_create_info: [*c]const DebugUtilsMessengerCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_messenger: [*c]DebugUtilsMessengerEXT) Result;
pub const createDebugUtilsMessengerEXT = vkCreateDebugUtilsMessengerEXT;
extern fn vkDestroyDebugUtilsMessengerEXT(instance: Instance,  messenger: DebugUtilsMessengerEXT,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDebugUtilsMessengerEXT = vkDestroyDebugUtilsMessengerEXT;
extern fn vkSubmitDebugUtilsMessageEXT(instance: Instance,  message_severity: DebugUtilsMessageSeverityFlagBitsEXT,  message_types: DebugUtilsMessageTypeFlagsEXT,  p_callback_data: [*c]const DebugUtilsMessengerCallbackDataEXT) void;
pub const submitDebugUtilsMessageEXT = vkSubmitDebugUtilsMessageEXT;
extern fn vkCmdSetSampleLocationsEXT(command_buffer: CommandBuffer,  p_sample_locations_info: [*c]const SampleLocationsInfoEXT) void;
pub const cmdSetSampleLocationsEXT = vkCmdSetSampleLocationsEXT;
extern fn vkGetPhysicalDeviceMultisamplePropertiesEXT(physical_device: PhysicalDevice,  samples: SampleCountFlagBits,  p_multisample_properties: [*c]MultisamplePropertiesEXT) void;
pub const getPhysicalDeviceMultisamplePropertiesEXT = vkGetPhysicalDeviceMultisamplePropertiesEXT;
extern fn vkGetImageDrmFormatModifierPropertiesEXT(device: Device,  image: Image,  p_properties: [*c]ImageDrmFormatModifierPropertiesEXT) Result;
pub const getImageDrmFormatModifierPropertiesEXT = vkGetImageDrmFormatModifierPropertiesEXT;
extern fn vkCreateValidationCacheEXT(device: Device,  p_create_info: [*c]const ValidationCacheCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_validation_cache: [*c]ValidationCacheEXT) Result;
pub const createValidationCacheEXT = vkCreateValidationCacheEXT;
extern fn vkDestroyValidationCacheEXT(device: Device,  validation_cache: ValidationCacheEXT,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyValidationCacheEXT = vkDestroyValidationCacheEXT;
extern fn vkMergeValidationCachesEXT(device: Device,  dst_cache: ValidationCacheEXT,  src_cache_count: u32,  p_src_caches: [*c]const ValidationCacheEXT) Result;
pub const mergeValidationCachesEXT = vkMergeValidationCachesEXT;
extern fn vkGetValidationCacheDataEXT(device: Device,  validation_cache: ValidationCacheEXT,  p_data_size: [*c]usize,  p_data: ?*anyopaque) Result;
pub const getValidationCacheDataEXT = vkGetValidationCacheDataEXT;
extern fn vkCmdBindShadingRateImageNV(command_buffer: CommandBuffer,  image_view: ImageView,  image_layout: ImageLayout) void;
pub const cmdBindShadingRateImageNV = vkCmdBindShadingRateImageNV;
extern fn vkCmdSetViewportShadingRatePaletteNV(command_buffer: CommandBuffer,  first_viewport: u32,  viewport_count: u32,  p_shading_rate_palettes: [*c]const ShadingRatePaletteNV) void;
pub const cmdSetViewportShadingRatePaletteNV = vkCmdSetViewportShadingRatePaletteNV;
extern fn vkCmdSetCoarseSampleOrderNV(command_buffer: CommandBuffer,  sample_order_type: CoarseSampleOrderTypeNV,  custom_sample_order_count: u32,  p_custom_sample_orders: [*c]const CoarseSampleOrderCustomNV) void;
pub const cmdSetCoarseSampleOrderNV = vkCmdSetCoarseSampleOrderNV;
extern fn vkCreateAccelerationStructureNV(device: Device,  p_create_info: [*c]const AccelerationStructureCreateInfoNV,  p_allocator: [*c]const AllocationCallbacks,  p_acceleration_structure: [*c]AccelerationStructureNV) Result;
pub const createAccelerationStructureNV = vkCreateAccelerationStructureNV;
extern fn vkDestroyAccelerationStructureNV(device: Device,  acceleration_structure: AccelerationStructureNV,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyAccelerationStructureNV = vkDestroyAccelerationStructureNV;
extern fn vkGetAccelerationStructureMemoryRequirementsNV(device: Device,  p_info: [*c]const AccelerationStructureMemoryRequirementsInfoNV,  p_memory_requirements: [*c]MemoryRequirements2KHR) void;
pub const getAccelerationStructureMemoryRequirementsNV = vkGetAccelerationStructureMemoryRequirementsNV;
extern fn vkBindAccelerationStructureMemoryNV(device: Device,  bind_info_count: u32,  p_bind_infos: [*c]const BindAccelerationStructureMemoryInfoNV) Result;
pub const bindAccelerationStructureMemoryNV = vkBindAccelerationStructureMemoryNV;
extern fn vkCmdBuildAccelerationStructureNV(command_buffer: CommandBuffer,  p_info: [*c]const AccelerationStructureInfoNV,  instance_data: Buffer,  instance_offset: DeviceSize,  update: Bool32,  dst: AccelerationStructureNV,  src: AccelerationStructureNV,  scratch: Buffer,  scratch_offset: DeviceSize) void;
pub const cmdBuildAccelerationStructureNV = vkCmdBuildAccelerationStructureNV;
extern fn vkCmdCopyAccelerationStructureNV(command_buffer: CommandBuffer,  dst: AccelerationStructureNV,  src: AccelerationStructureNV,  mode: CopyAccelerationStructureModeKHR) void;
pub const cmdCopyAccelerationStructureNV = vkCmdCopyAccelerationStructureNV;
extern fn vkCmdTraceRaysNV(command_buffer: CommandBuffer,  raygen_shader_binding_table_buffer: Buffer,  raygen_shader_binding_offset: DeviceSize,  miss_shader_binding_table_buffer: Buffer,  miss_shader_binding_offset: DeviceSize,  miss_shader_binding_stride: DeviceSize,  hit_shader_binding_table_buffer: Buffer,  hit_shader_binding_offset: DeviceSize,  hit_shader_binding_stride: DeviceSize,  callable_shader_binding_table_buffer: Buffer,  callable_shader_binding_offset: DeviceSize,  callable_shader_binding_stride: DeviceSize,  width: u32,  height: u32,  depth: u32) void;
pub const cmdTraceRaysNV = vkCmdTraceRaysNV;
extern fn vkCreateRayTracingPipelinesNV(device: Device,  pipeline_cache: PipelineCache,  create_info_count: u32,  p_create_infos: [*c]const RayTracingPipelineCreateInfoNV,  p_allocator: [*c]const AllocationCallbacks,  p_pipelines: [*c]Pipeline) Result;
pub const createRayTracingPipelinesNV = vkCreateRayTracingPipelinesNV;
extern fn vkGetRayTracingShaderGroupHandlesKHR(device: Device,  pipeline: Pipeline,  first_group: u32,  group_count: u32,  data_size: usize,  p_data: ?*anyopaque) Result;
pub const getRayTracingShaderGroupHandlesKHR = vkGetRayTracingShaderGroupHandlesKHR;
extern fn vkGetRayTracingShaderGroupHandlesNV(device: Device,  pipeline: Pipeline,  first_group: u32,  group_count: u32,  data_size: usize,  p_data: ?*anyopaque) Result;
pub const getRayTracingShaderGroupHandlesNV = vkGetRayTracingShaderGroupHandlesNV;
extern fn vkGetAccelerationStructureHandleNV(device: Device,  acceleration_structure: AccelerationStructureNV,  data_size: usize,  p_data: ?*anyopaque) Result;
pub const getAccelerationStructureHandleNV = vkGetAccelerationStructureHandleNV;
extern fn vkCmdWriteAccelerationStructuresPropertiesNV(command_buffer: CommandBuffer,  acceleration_structure_count: u32,  p_acceleration_structures: [*c]const AccelerationStructureNV,  query_type: QueryType,  query_pool: QueryPool,  first_query: u32) void;
pub const cmdWriteAccelerationStructuresPropertiesNV = vkCmdWriteAccelerationStructuresPropertiesNV;
extern fn vkCompileDeferredNV(device: Device,  pipeline: Pipeline,  shader: u32) Result;
pub const compileDeferredNV = vkCompileDeferredNV;
extern fn vkGetMemoryHostPointerPropertiesEXT(device: Device,  handle_type: ExternalMemoryHandleTypeFlagBits,  p_host_pointer: ?*const anyopaque,  p_memory_host_pointer_properties: [*c]MemoryHostPointerPropertiesEXT) Result;
pub const getMemoryHostPointerPropertiesEXT = vkGetMemoryHostPointerPropertiesEXT;
extern fn vkCmdWriteBufferMarkerAMD(command_buffer: CommandBuffer,  pipeline_stage: PipelineStageFlagBits,  dst_buffer: Buffer,  dst_offset: DeviceSize,  marker: u32) void;
pub const cmdWriteBufferMarkerAMD = vkCmdWriteBufferMarkerAMD;
extern fn vkCmdWriteBufferMarker2AMD(command_buffer: CommandBuffer,  stage: PipelineStageFlags2,  dst_buffer: Buffer,  dst_offset: DeviceSize,  marker: u32) void;
pub const cmdWriteBufferMarker2AMD = vkCmdWriteBufferMarker2AMD;
extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physical_device: PhysicalDevice,  p_time_domain_count: [*c]u32,  p_time_domains: [*c]TimeDomainKHR) Result;
pub const getPhysicalDeviceCalibrateableTimeDomainsEXT = vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
extern fn vkGetCalibratedTimestampsEXT(device: Device,  timestamp_count: u32,  p_timestamp_infos: [*c]const CalibratedTimestampInfoKHR,  p_timestamps: [*c]u64,  p_max_deviation: [*c]u64) Result;
pub const getCalibratedTimestampsEXT = vkGetCalibratedTimestampsEXT;
extern fn vkCmdDrawMeshTasksNV(command_buffer: CommandBuffer,  task_count: u32,  first_task: u32) void;
pub const cmdDrawMeshTasksNV = vkCmdDrawMeshTasksNV;
extern fn vkCmdDrawMeshTasksIndirectNV(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  draw_count: u32,  stride: u32) void;
pub const cmdDrawMeshTasksIndirectNV = vkCmdDrawMeshTasksIndirectNV;
extern fn vkCmdDrawMeshTasksIndirectCountNV(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawMeshTasksIndirectCountNV = vkCmdDrawMeshTasksIndirectCountNV;
extern fn vkCmdSetExclusiveScissorEnableNV(command_buffer: CommandBuffer,  first_exclusive_scissor: u32,  exclusive_scissor_count: u32,  p_exclusive_scissor_enables: [*c]const Bool32) void;
pub const cmdSetExclusiveScissorEnableNV = vkCmdSetExclusiveScissorEnableNV;
extern fn vkCmdSetExclusiveScissorNV(command_buffer: CommandBuffer,  first_exclusive_scissor: u32,  exclusive_scissor_count: u32,  p_exclusive_scissors: [*c]const Rect2D) void;
pub const cmdSetExclusiveScissorNV = vkCmdSetExclusiveScissorNV;
extern fn vkCmdSetCheckpointNV(command_buffer: CommandBuffer,  p_checkpoint_marker: ?*const anyopaque) void;
pub const cmdSetCheckpointNV = vkCmdSetCheckpointNV;
extern fn vkGetQueueCheckpointDataNV(queue: Queue,  p_checkpoint_data_count: [*c]u32,  p_checkpoint_data: [*c]CheckpointDataNV) void;
pub const getQueueCheckpointDataNV = vkGetQueueCheckpointDataNV;
extern fn vkGetQueueCheckpointData2NV(queue: Queue,  p_checkpoint_data_count: [*c]u32,  p_checkpoint_data: [*c]CheckpointData2NV) void;
pub const getQueueCheckpointData2NV = vkGetQueueCheckpointData2NV;
extern fn vkInitializePerformanceApiINTEL(device: Device,  p_initialize_info: [*c]const InitializePerformanceApiInfoINTEL) Result;
pub const initializePerformanceApiINTEL = vkInitializePerformanceApiINTEL;
extern fn vkUninitializePerformanceApiINTEL(device: Device) void;
pub const uninitializePerformanceApiINTEL = vkUninitializePerformanceApiINTEL;
extern fn vkCmdSetPerformanceMarkerINTEL(command_buffer: CommandBuffer,  p_marker_info: [*c]const PerformanceMarkerInfoINTEL) Result;
pub const cmdSetPerformanceMarkerINTEL = vkCmdSetPerformanceMarkerINTEL;
extern fn vkCmdSetPerformanceStreamMarkerINTEL(command_buffer: CommandBuffer,  p_marker_info: [*c]const PerformanceStreamMarkerInfoINTEL) Result;
pub const cmdSetPerformanceStreamMarkerINTEL = vkCmdSetPerformanceStreamMarkerINTEL;
extern fn vkCmdSetPerformanceOverrideINTEL(command_buffer: CommandBuffer,  p_override_info: [*c]const PerformanceOverrideInfoINTEL) Result;
pub const cmdSetPerformanceOverrideINTEL = vkCmdSetPerformanceOverrideINTEL;
extern fn vkAcquirePerformanceConfigurationINTEL(device: Device,  p_acquire_info: [*c]const PerformanceConfigurationAcquireInfoINTEL,  p_configuration: [*c]PerformanceConfigurationINTEL) Result;
pub const acquirePerformanceConfigurationINTEL = vkAcquirePerformanceConfigurationINTEL;
extern fn vkReleasePerformanceConfigurationINTEL(device: Device,  configuration: PerformanceConfigurationINTEL) Result;
pub const releasePerformanceConfigurationINTEL = vkReleasePerformanceConfigurationINTEL;
extern fn vkQueueSetPerformanceConfigurationINTEL(queue: Queue,  configuration: PerformanceConfigurationINTEL) Result;
pub const queueSetPerformanceConfigurationINTEL = vkQueueSetPerformanceConfigurationINTEL;
extern fn vkGetPerformanceParameterINTEL(device: Device,  parameter: PerformanceParameterTypeINTEL,  p_value: [*c]PerformanceValueINTEL) Result;
pub const getPerformanceParameterINTEL = vkGetPerformanceParameterINTEL;
extern fn vkSetLocalDimmingAMD(device: Device,  swap_chain: SwapchainKHR,  local_dimming_enable: Bool32) void;
pub const setLocalDimmingAMD = vkSetLocalDimmingAMD;
extern fn vkGetBufferDeviceAddressEXT(device: Device,  p_info: [*c]const BufferDeviceAddressInfo) DeviceAddress;
pub const getBufferDeviceAddressEXT = vkGetBufferDeviceAddressEXT;
extern fn vkGetPhysicalDeviceToolPropertiesEXT(physical_device: PhysicalDevice,  p_tool_count: [*c]u32,  p_tool_properties: [*c]PhysicalDeviceToolProperties) Result;
pub const getPhysicalDeviceToolPropertiesEXT = vkGetPhysicalDeviceToolPropertiesEXT;
extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]CooperativeMatrixPropertiesNV) Result;
pub const getPhysicalDeviceCooperativeMatrixPropertiesNV = vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
extern fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physical_device: PhysicalDevice,  p_combination_count: [*c]u32,  p_combinations: [*c]FramebufferMixedSamplesCombinationNV) Result;
pub const getPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
extern fn vkCreateHeadlessSurfaceEXT(instance: Instance,  p_create_info: [*c]const HeadlessSurfaceCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_surface: [*c]SurfaceKHR) Result;
pub const createHeadlessSurfaceEXT = vkCreateHeadlessSurfaceEXT;
extern fn vkCmdSetLineStippleEXT(command_buffer: CommandBuffer,  line_stipple_factor: u32,  line_stipple_pattern: u16) void;
pub const cmdSetLineStippleEXT = vkCmdSetLineStippleEXT;
extern fn vkResetQueryPoolEXT(device: Device,  query_pool: QueryPool,  first_query: u32,  query_count: u32) void;
pub const resetQueryPoolEXT = vkResetQueryPoolEXT;
extern fn vkCmdSetCullModeEXT(command_buffer: CommandBuffer,  cull_mode: CullModeFlags) void;
pub const cmdSetCullModeEXT = vkCmdSetCullModeEXT;
extern fn vkCmdSetFrontFaceEXT(command_buffer: CommandBuffer,  front_face: FrontFace) void;
pub const cmdSetFrontFaceEXT = vkCmdSetFrontFaceEXT;
extern fn vkCmdSetPrimitiveTopologyEXT(command_buffer: CommandBuffer,  primitive_topology: PrimitiveTopology) void;
pub const cmdSetPrimitiveTopologyEXT = vkCmdSetPrimitiveTopologyEXT;
extern fn vkCmdSetViewportWithCountEXT(command_buffer: CommandBuffer,  viewport_count: u32,  p_viewports: [*c]const Viewport) void;
pub const cmdSetViewportWithCountEXT = vkCmdSetViewportWithCountEXT;
extern fn vkCmdSetScissorWithCountEXT(command_buffer: CommandBuffer,  scissor_count: u32,  p_scissors: [*c]const Rect2D) void;
pub const cmdSetScissorWithCountEXT = vkCmdSetScissorWithCountEXT;
extern fn vkCmdBindVertexBuffers2EXT(command_buffer: CommandBuffer,  first_binding: u32,  binding_count: u32,  p_buffers: [*c]const Buffer,  p_offsets: [*c]const DeviceSize,  p_sizes: [*c]const DeviceSize,  p_strides: [*c]const DeviceSize) void;
pub const cmdBindVertexBuffers2EXT = vkCmdBindVertexBuffers2EXT;
extern fn vkCmdSetDepthTestEnableEXT(command_buffer: CommandBuffer,  depth_test_enable: Bool32) void;
pub const cmdSetDepthTestEnableEXT = vkCmdSetDepthTestEnableEXT;
extern fn vkCmdSetDepthWriteEnableEXT(command_buffer: CommandBuffer,  depth_write_enable: Bool32) void;
pub const cmdSetDepthWriteEnableEXT = vkCmdSetDepthWriteEnableEXT;
extern fn vkCmdSetDepthCompareOpEXT(command_buffer: CommandBuffer,  depth_compare_op: CompareOp) void;
pub const cmdSetDepthCompareOpEXT = vkCmdSetDepthCompareOpEXT;
extern fn vkCmdSetDepthBoundsTestEnableEXT(command_buffer: CommandBuffer,  depth_bounds_test_enable: Bool32) void;
pub const cmdSetDepthBoundsTestEnableEXT = vkCmdSetDepthBoundsTestEnableEXT;
extern fn vkCmdSetStencilTestEnableEXT(command_buffer: CommandBuffer,  stencil_test_enable: Bool32) void;
pub const cmdSetStencilTestEnableEXT = vkCmdSetStencilTestEnableEXT;
extern fn vkCmdSetStencilOpEXT(command_buffer: CommandBuffer,  face_mask: StencilFaceFlags,  fail_op: StencilOp,  pass_op: StencilOp,  depth_fail_op: StencilOp,  compare_op: CompareOp) void;
pub const cmdSetStencilOpEXT = vkCmdSetStencilOpEXT;
extern fn vkCopyMemoryToImageEXT(device: Device,  p_copy_memory_to_image_info: [*c]const CopyMemoryToImageInfo) Result;
pub const copyMemoryToImageEXT = vkCopyMemoryToImageEXT;
extern fn vkCopyImageToMemoryEXT(device: Device,  p_copy_image_to_memory_info: [*c]const CopyImageToMemoryInfo) Result;
pub const copyImageToMemoryEXT = vkCopyImageToMemoryEXT;
extern fn vkCopyImageToImageEXT(device: Device,  p_copy_image_to_image_info: [*c]const CopyImageToImageInfo) Result;
pub const copyImageToImageEXT = vkCopyImageToImageEXT;
extern fn vkTransitionImageLayoutEXT(device: Device,  transition_count: u32,  p_transitions: [*c]const HostImageLayoutTransitionInfo) Result;
pub const transitionImageLayoutEXT = vkTransitionImageLayoutEXT;
extern fn vkGetImageSubresourceLayout2EXT(device: Device,  image: Image,  p_subresource: [*c]const ImageSubresource2,  p_layout: [*c]SubresourceLayout2) void;
pub const getImageSubresourceLayout2EXT = vkGetImageSubresourceLayout2EXT;
extern fn vkReleaseSwapchainImagesEXT(device: Device,  p_release_info: [*c]const ReleaseSwapchainImagesInfoKHR) Result;
pub const releaseSwapchainImagesEXT = vkReleaseSwapchainImagesEXT;
extern fn vkGetGeneratedCommandsMemoryRequirementsNV(device: Device,  p_info: [*c]const GeneratedCommandsMemoryRequirementsInfoNV,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getGeneratedCommandsMemoryRequirementsNV = vkGetGeneratedCommandsMemoryRequirementsNV;
extern fn vkCmdPreprocessGeneratedCommandsNV(command_buffer: CommandBuffer,  p_generated_commands_info: [*c]const GeneratedCommandsInfoNV) void;
pub const cmdPreprocessGeneratedCommandsNV = vkCmdPreprocessGeneratedCommandsNV;
extern fn vkCmdExecuteGeneratedCommandsNV(command_buffer: CommandBuffer,  is_preprocessed: Bool32,  p_generated_commands_info: [*c]const GeneratedCommandsInfoNV) void;
pub const cmdExecuteGeneratedCommandsNV = vkCmdExecuteGeneratedCommandsNV;
extern fn vkCmdBindPipelineShaderGroupNV(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  pipeline: Pipeline,  group_index: u32) void;
pub const cmdBindPipelineShaderGroupNV = vkCmdBindPipelineShaderGroupNV;
extern fn vkCreateIndirectCommandsLayoutNV(device: Device,  p_create_info: [*c]const IndirectCommandsLayoutCreateInfoNV,  p_allocator: [*c]const AllocationCallbacks,  p_indirect_commands_layout: [*c]IndirectCommandsLayoutNV) Result;
pub const createIndirectCommandsLayoutNV = vkCreateIndirectCommandsLayoutNV;
extern fn vkDestroyIndirectCommandsLayoutNV(device: Device,  indirect_commands_layout: IndirectCommandsLayoutNV,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyIndirectCommandsLayoutNV = vkDestroyIndirectCommandsLayoutNV;
extern fn vkCmdSetDepthBias2EXT(command_buffer: CommandBuffer,  p_depth_bias_info: [*c]const DepthBiasInfoEXT) void;
pub const cmdSetDepthBias2EXT = vkCmdSetDepthBias2EXT;
extern fn vkAcquireDrmDisplayEXT(physical_device: PhysicalDevice,  drm_fd: i32,  display: DisplayKHR) Result;
pub const acquireDrmDisplayEXT = vkAcquireDrmDisplayEXT;
extern fn vkGetDrmDisplayEXT(physical_device: PhysicalDevice,  drm_fd: i32,  connector_id: u32,  display: [*c]DisplayKHR) Result;
pub const getDrmDisplayEXT = vkGetDrmDisplayEXT;
extern fn vkCreatePrivateDataSlotEXT(device: Device,  p_create_info: [*c]const PrivateDataSlotCreateInfo,  p_allocator: [*c]const AllocationCallbacks,  p_private_data_slot: [*c]PrivateDataSlot) Result;
pub const createPrivateDataSlotEXT = vkCreatePrivateDataSlotEXT;
extern fn vkDestroyPrivateDataSlotEXT(device: Device,  private_data_slot: PrivateDataSlot,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyPrivateDataSlotEXT = vkDestroyPrivateDataSlotEXT;
extern fn vkSetPrivateDataEXT(device: Device,  object_type: ObjectType,  object_handle: u64,  private_data_slot: PrivateDataSlot,  data: u64) Result;
pub const setPrivateDataEXT = vkSetPrivateDataEXT;
extern fn vkGetPrivateDataEXT(device: Device,  object_type: ObjectType,  object_handle: u64,  private_data_slot: PrivateDataSlot,  p_data: [*c]u64) void;
pub const getPrivateDataEXT = vkGetPrivateDataEXT;
extern fn vkCmdDispatchTileQCOM(command_buffer: CommandBuffer,  p_dispatch_tile_info: [*c]const DispatchTileInfoQCOM) void;
pub const cmdDispatchTileQCOM = vkCmdDispatchTileQCOM;
extern fn vkCmdBeginPerTileExecutionQCOM(command_buffer: CommandBuffer,  p_per_tile_begin_info: [*c]const PerTileBeginInfoQCOM) void;
pub const cmdBeginPerTileExecutionQCOM = vkCmdBeginPerTileExecutionQCOM;
extern fn vkCmdEndPerTileExecutionQCOM(command_buffer: CommandBuffer,  p_per_tile_end_info: [*c]const PerTileEndInfoQCOM) void;
pub const cmdEndPerTileExecutionQCOM = vkCmdEndPerTileExecutionQCOM;
extern fn vkGetDescriptorSetLayoutSizeEXT(device: Device,  layout: DescriptorSetLayout,  p_layout_size_in_bytes: [*c]DeviceSize) void;
pub const getDescriptorSetLayoutSizeEXT = vkGetDescriptorSetLayoutSizeEXT;
extern fn vkGetDescriptorSetLayoutBindingOffsetEXT(device: Device,  layout: DescriptorSetLayout,  binding: u32,  p_offset: [*c]DeviceSize) void;
pub const getDescriptorSetLayoutBindingOffsetEXT = vkGetDescriptorSetLayoutBindingOffsetEXT;
extern fn vkGetDescriptorEXT(device: Device,  p_descriptor_info: [*c]const DescriptorGetInfoEXT,  data_size: usize,  p_descriptor: ?*anyopaque) void;
pub const getDescriptorEXT = vkGetDescriptorEXT;
extern fn vkCmdBindDescriptorBuffersEXT(command_buffer: CommandBuffer,  buffer_count: u32,  p_binding_infos: [*c]const DescriptorBufferBindingInfoEXT) void;
pub const cmdBindDescriptorBuffersEXT = vkCmdBindDescriptorBuffersEXT;
extern fn vkCmdSetDescriptorBufferOffsetsEXT(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  layout: PipelineLayout,  first_set: u32,  set_count: u32,  p_buffer_indices: [*c]const u32,  p_offsets: [*c]const DeviceSize) void;
pub const cmdSetDescriptorBufferOffsetsEXT = vkCmdSetDescriptorBufferOffsetsEXT;
extern fn vkCmdBindDescriptorBufferEmbeddedSamplersEXT(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  layout: PipelineLayout,  set: u32) void;
pub const cmdBindDescriptorBufferEmbeddedSamplersEXT = vkCmdBindDescriptorBufferEmbeddedSamplersEXT;
extern fn vkGetBufferOpaqueCaptureDescriptorDataEXT(device: Device,  p_info: [*c]const BufferCaptureDescriptorDataInfoEXT,  p_data: ?*anyopaque) Result;
pub const getBufferOpaqueCaptureDescriptorDataEXT = vkGetBufferOpaqueCaptureDescriptorDataEXT;
extern fn vkGetImageOpaqueCaptureDescriptorDataEXT(device: Device,  p_info: [*c]const ImageCaptureDescriptorDataInfoEXT,  p_data: ?*anyopaque) Result;
pub const getImageOpaqueCaptureDescriptorDataEXT = vkGetImageOpaqueCaptureDescriptorDataEXT;
extern fn vkGetImageViewOpaqueCaptureDescriptorDataEXT(device: Device,  p_info: [*c]const ImageViewCaptureDescriptorDataInfoEXT,  p_data: ?*anyopaque) Result;
pub const getImageViewOpaqueCaptureDescriptorDataEXT = vkGetImageViewOpaqueCaptureDescriptorDataEXT;
extern fn vkGetSamplerOpaqueCaptureDescriptorDataEXT(device: Device,  p_info: [*c]const SamplerCaptureDescriptorDataInfoEXT,  p_data: ?*anyopaque) Result;
pub const getSamplerOpaqueCaptureDescriptorDataEXT = vkGetSamplerOpaqueCaptureDescriptorDataEXT;
extern fn vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT(device: Device,  p_info: [*c]const AccelerationStructureCaptureDescriptorDataInfoEXT,  p_data: ?*anyopaque) Result;
pub const getAccelerationStructureOpaqueCaptureDescriptorDataEXT = vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT;
extern fn vkCmdSetFragmentShadingRateEnumNV(command_buffer: CommandBuffer,  shading_rate: FragmentShadingRateNV,  combiner_ops: [*c]const FragmentShadingRateCombinerOpKHR) void;
pub const cmdSetFragmentShadingRateEnumNV = vkCmdSetFragmentShadingRateEnumNV;
extern fn vkGetDeviceFaultInfoEXT(device: Device,  p_fault_counts: [*c]DeviceFaultCountsEXT,  p_fault_info: [*c]DeviceFaultInfoEXT) Result;
pub const getDeviceFaultInfoEXT = vkGetDeviceFaultInfoEXT;
extern fn vkCmdSetVertexInputEXT(command_buffer: CommandBuffer,  vertex_binding_description_count: u32,  p_vertex_binding_descriptions: [*c]const VertexInputBindingDescription2EXT,  vertex_attribute_description_count: u32,  p_vertex_attribute_descriptions: [*c]const VertexInputAttributeDescription2EXT) void;
pub const cmdSetVertexInputEXT = vkCmdSetVertexInputEXT;
extern fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device: Device,  renderpass: RenderPass,  p_max_workgroup_size: [*c]Extent2D) Result;
pub const getDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
extern fn vkCmdSubpassShadingHUAWEI(command_buffer: CommandBuffer) void;
pub const cmdSubpassShadingHUAWEI = vkCmdSubpassShadingHUAWEI;
extern fn vkCmdBindInvocationMaskHUAWEI(command_buffer: CommandBuffer,  image_view: ImageView,  image_layout: ImageLayout) void;
pub const cmdBindInvocationMaskHUAWEI = vkCmdBindInvocationMaskHUAWEI;
extern fn vkGetMemoryRemoteAddressNV(device: Device,  p_memory_get_remote_address_info: [*c]const MemoryGetRemoteAddressInfoNV,  p_address: [*c]RemoteAddressNV) Result;
pub const getMemoryRemoteAddressNV = vkGetMemoryRemoteAddressNV;
extern fn vkGetPipelinePropertiesEXT(device: Device,  p_pipeline_info: [*c]const PipelineInfoEXT,  p_pipeline_properties: [*c]BaseOutStructure) Result;
pub const getPipelinePropertiesEXT = vkGetPipelinePropertiesEXT;
extern fn vkCmdSetPatchControlPointsEXT(command_buffer: CommandBuffer,  patch_control_points: u32) void;
pub const cmdSetPatchControlPointsEXT = vkCmdSetPatchControlPointsEXT;
extern fn vkCmdSetRasterizerDiscardEnableEXT(command_buffer: CommandBuffer,  rasterizer_discard_enable: Bool32) void;
pub const cmdSetRasterizerDiscardEnableEXT = vkCmdSetRasterizerDiscardEnableEXT;
extern fn vkCmdSetDepthBiasEnableEXT(command_buffer: CommandBuffer,  depth_bias_enable: Bool32) void;
pub const cmdSetDepthBiasEnableEXT = vkCmdSetDepthBiasEnableEXT;
extern fn vkCmdSetLogicOpEXT(command_buffer: CommandBuffer,  logic_op: LogicOp) void;
pub const cmdSetLogicOpEXT = vkCmdSetLogicOpEXT;
extern fn vkCmdSetPrimitiveRestartEnableEXT(command_buffer: CommandBuffer,  primitive_restart_enable: Bool32) void;
pub const cmdSetPrimitiveRestartEnableEXT = vkCmdSetPrimitiveRestartEnableEXT;
extern fn vkCmdSetColorWriteEnableEXT(command_buffer: CommandBuffer,  attachment_count: u32,  p_color_write_enables: [*c]const Bool32) void;
pub const cmdSetColorWriteEnableEXT = vkCmdSetColorWriteEnableEXT;
extern fn vkCmdDrawMultiEXT(command_buffer: CommandBuffer,  draw_count: u32,  p_vertex_info: [*c]const MultiDrawInfoEXT,  instance_count: u32,  first_instance: u32,  stride: u32) void;
pub const cmdDrawMultiEXT = vkCmdDrawMultiEXT;
extern fn vkCmdDrawMultiIndexedEXT(command_buffer: CommandBuffer,  draw_count: u32,  p_index_info: [*c]const MultiDrawIndexedInfoEXT,  instance_count: u32,  first_instance: u32,  stride: u32,  p_vertex_offset: [*c]const i32) void;
pub const cmdDrawMultiIndexedEXT = vkCmdDrawMultiIndexedEXT;
extern fn vkCreateMicromapEXT(device: Device,  p_create_info: [*c]const MicromapCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_micromap: [*c]MicromapEXT) Result;
pub const createMicromapEXT = vkCreateMicromapEXT;
extern fn vkDestroyMicromapEXT(device: Device,  micromap: MicromapEXT,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyMicromapEXT = vkDestroyMicromapEXT;
extern fn vkCmdBuildMicromapsEXT(command_buffer: CommandBuffer,  info_count: u32,  p_infos: [*c]const MicromapBuildInfoEXT) void;
pub const cmdBuildMicromapsEXT = vkCmdBuildMicromapsEXT;
extern fn vkBuildMicromapsEXT(device: Device,  deferred_operation: DeferredOperationKHR,  info_count: u32,  p_infos: [*c]const MicromapBuildInfoEXT) Result;
pub const buildMicromapsEXT = vkBuildMicromapsEXT;
extern fn vkCopyMicromapEXT(device: Device,  deferred_operation: DeferredOperationKHR,  p_info: [*c]const CopyMicromapInfoEXT) Result;
pub const copyMicromapEXT = vkCopyMicromapEXT;
extern fn vkCopyMicromapToMemoryEXT(device: Device,  deferred_operation: DeferredOperationKHR,  p_info: [*c]const CopyMicromapToMemoryInfoEXT) Result;
pub const copyMicromapToMemoryEXT = vkCopyMicromapToMemoryEXT;
extern fn vkCopyMemoryToMicromapEXT(device: Device,  deferred_operation: DeferredOperationKHR,  p_info: [*c]const CopyMemoryToMicromapInfoEXT) Result;
pub const copyMemoryToMicromapEXT = vkCopyMemoryToMicromapEXT;
extern fn vkWriteMicromapsPropertiesEXT(device: Device,  micromap_count: u32,  p_micromaps: [*c]const MicromapEXT,  query_type: QueryType,  data_size: usize,  p_data: ?*anyopaque,  stride: usize) Result;
pub const writeMicromapsPropertiesEXT = vkWriteMicromapsPropertiesEXT;
extern fn vkCmdCopyMicromapEXT(command_buffer: CommandBuffer,  p_info: [*c]const CopyMicromapInfoEXT) void;
pub const cmdCopyMicromapEXT = vkCmdCopyMicromapEXT;
extern fn vkCmdCopyMicromapToMemoryEXT(command_buffer: CommandBuffer,  p_info: [*c]const CopyMicromapToMemoryInfoEXT) void;
pub const cmdCopyMicromapToMemoryEXT = vkCmdCopyMicromapToMemoryEXT;
extern fn vkCmdCopyMemoryToMicromapEXT(command_buffer: CommandBuffer,  p_info: [*c]const CopyMemoryToMicromapInfoEXT) void;
pub const cmdCopyMemoryToMicromapEXT = vkCmdCopyMemoryToMicromapEXT;
extern fn vkCmdWriteMicromapsPropertiesEXT(command_buffer: CommandBuffer,  micromap_count: u32,  p_micromaps: [*c]const MicromapEXT,  query_type: QueryType,  query_pool: QueryPool,  first_query: u32) void;
pub const cmdWriteMicromapsPropertiesEXT = vkCmdWriteMicromapsPropertiesEXT;
extern fn vkGetDeviceMicromapCompatibilityEXT(device: Device,  p_version_info: [*c]const MicromapVersionInfoEXT,  p_compatibility: [*c]AccelerationStructureCompatibilityKHR) void;
pub const getDeviceMicromapCompatibilityEXT = vkGetDeviceMicromapCompatibilityEXT;
extern fn vkGetMicromapBuildSizesEXT(device: Device,  build_type: AccelerationStructureBuildTypeKHR,  p_build_info: [*c]const MicromapBuildInfoEXT,  p_size_info: [*c]MicromapBuildSizesInfoEXT) void;
pub const getMicromapBuildSizesEXT = vkGetMicromapBuildSizesEXT;
extern fn vkCmdDrawClusterHUAWEI(command_buffer: CommandBuffer,  group_count_x: u32,  group_count_y: u32,  group_count_z: u32) void;
pub const cmdDrawClusterHUAWEI = vkCmdDrawClusterHUAWEI;
extern fn vkCmdDrawClusterIndirectHUAWEI(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize) void;
pub const cmdDrawClusterIndirectHUAWEI = vkCmdDrawClusterIndirectHUAWEI;
extern fn vkSetDeviceMemoryPriorityEXT(device: Device,  memory: DeviceMemory,  priority: f32) void;
pub const setDeviceMemoryPriorityEXT = vkSetDeviceMemoryPriorityEXT;
extern fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(device: Device,  p_binding_reference: [*c]const DescriptorSetBindingReferenceVALVE,  p_host_mapping: [*c]DescriptorSetLayoutHostMappingInfoVALVE) void;
pub const getDescriptorSetLayoutHostMappingInfoVALVE = vkGetDescriptorSetLayoutHostMappingInfoVALVE;
extern fn vkGetDescriptorSetHostMappingVALVE(device: Device,  descriptor_set: DescriptorSet,  pp_data: [*c]?*anyopaque) void;
pub const getDescriptorSetHostMappingVALVE = vkGetDescriptorSetHostMappingVALVE;
extern fn vkCmdCopyMemoryIndirectNV(command_buffer: CommandBuffer,  copy_buffer_address: DeviceAddress,  copy_count: u32,  stride: u32) void;
pub const cmdCopyMemoryIndirectNV = vkCmdCopyMemoryIndirectNV;
extern fn vkCmdCopyMemoryToImageIndirectNV(command_buffer: CommandBuffer,  copy_buffer_address: DeviceAddress,  copy_count: u32,  stride: u32,  dst_image: Image,  dst_image_layout: ImageLayout,  p_image_subresources: [*c]const ImageSubresourceLayers) void;
pub const cmdCopyMemoryToImageIndirectNV = vkCmdCopyMemoryToImageIndirectNV;
extern fn vkCmdDecompressMemoryNV(command_buffer: CommandBuffer,  decompress_region_count: u32,  p_decompress_memory_regions: [*c]const DecompressMemoryRegionNV) void;
pub const cmdDecompressMemoryNV = vkCmdDecompressMemoryNV;
extern fn vkCmdDecompressMemoryIndirectCountNV(command_buffer: CommandBuffer,  indirect_commands_address: DeviceAddress,  indirect_commands_count_address: DeviceAddress,  stride: u32) void;
pub const cmdDecompressMemoryIndirectCountNV = vkCmdDecompressMemoryIndirectCountNV;
extern fn vkGetPipelineIndirectMemoryRequirementsNV(device: Device,  p_create_info: [*c]const ComputePipelineCreateInfo,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getPipelineIndirectMemoryRequirementsNV = vkGetPipelineIndirectMemoryRequirementsNV;
extern fn vkCmdUpdatePipelineIndirectBufferNV(command_buffer: CommandBuffer,  pipeline_bind_point: PipelineBindPoint,  pipeline: Pipeline) void;
pub const cmdUpdatePipelineIndirectBufferNV = vkCmdUpdatePipelineIndirectBufferNV;
extern fn vkGetPipelineIndirectDeviceAddressNV(device: Device,  p_info: [*c]const PipelineIndirectDeviceAddressInfoNV) DeviceAddress;
pub const getPipelineIndirectDeviceAddressNV = vkGetPipelineIndirectDeviceAddressNV;
extern fn vkCmdSetDepthClampEnableEXT(command_buffer: CommandBuffer,  depth_clamp_enable: Bool32) void;
pub const cmdSetDepthClampEnableEXT = vkCmdSetDepthClampEnableEXT;
extern fn vkCmdSetPolygonModeEXT(command_buffer: CommandBuffer,  polygon_mode: PolygonMode) void;
pub const cmdSetPolygonModeEXT = vkCmdSetPolygonModeEXT;
extern fn vkCmdSetRasterizationSamplesEXT(command_buffer: CommandBuffer,  rasterization_samples: SampleCountFlagBits) void;
pub const cmdSetRasterizationSamplesEXT = vkCmdSetRasterizationSamplesEXT;
extern fn vkCmdSetSampleMaskEXT(command_buffer: CommandBuffer,  samples: SampleCountFlagBits,  p_sample_mask: [*c]const SampleMask) void;
pub const cmdSetSampleMaskEXT = vkCmdSetSampleMaskEXT;
extern fn vkCmdSetAlphaToCoverageEnableEXT(command_buffer: CommandBuffer,  alpha_to_coverage_enable: Bool32) void;
pub const cmdSetAlphaToCoverageEnableEXT = vkCmdSetAlphaToCoverageEnableEXT;
extern fn vkCmdSetAlphaToOneEnableEXT(command_buffer: CommandBuffer,  alpha_to_one_enable: Bool32) void;
pub const cmdSetAlphaToOneEnableEXT = vkCmdSetAlphaToOneEnableEXT;
extern fn vkCmdSetLogicOpEnableEXT(command_buffer: CommandBuffer,  logic_op_enable: Bool32) void;
pub const cmdSetLogicOpEnableEXT = vkCmdSetLogicOpEnableEXT;
extern fn vkCmdSetColorBlendEnableEXT(command_buffer: CommandBuffer,  first_attachment: u32,  attachment_count: u32,  p_color_blend_enables: [*c]const Bool32) void;
pub const cmdSetColorBlendEnableEXT = vkCmdSetColorBlendEnableEXT;
extern fn vkCmdSetColorBlendEquationEXT(command_buffer: CommandBuffer,  first_attachment: u32,  attachment_count: u32,  p_color_blend_equations: [*c]const ColorBlendEquationEXT) void;
pub const cmdSetColorBlendEquationEXT = vkCmdSetColorBlendEquationEXT;
extern fn vkCmdSetColorWriteMaskEXT(command_buffer: CommandBuffer,  first_attachment: u32,  attachment_count: u32,  p_color_write_masks: [*c]const ColorComponentFlags) void;
pub const cmdSetColorWriteMaskEXT = vkCmdSetColorWriteMaskEXT;
extern fn vkCmdSetTessellationDomainOriginEXT(command_buffer: CommandBuffer,  domain_origin: TessellationDomainOrigin) void;
pub const cmdSetTessellationDomainOriginEXT = vkCmdSetTessellationDomainOriginEXT;
extern fn vkCmdSetRasterizationStreamEXT(command_buffer: CommandBuffer,  rasterization_stream: u32) void;
pub const cmdSetRasterizationStreamEXT = vkCmdSetRasterizationStreamEXT;
extern fn vkCmdSetConservativeRasterizationModeEXT(command_buffer: CommandBuffer,  conservative_rasterization_mode: ConservativeRasterizationModeEXT) void;
pub const cmdSetConservativeRasterizationModeEXT = vkCmdSetConservativeRasterizationModeEXT;
extern fn vkCmdSetExtraPrimitiveOverestimationSizeEXT(command_buffer: CommandBuffer,  extra_primitive_overestimation_size: f32) void;
pub const cmdSetExtraPrimitiveOverestimationSizeEXT = vkCmdSetExtraPrimitiveOverestimationSizeEXT;
extern fn vkCmdSetDepthClipEnableEXT(command_buffer: CommandBuffer,  depth_clip_enable: Bool32) void;
pub const cmdSetDepthClipEnableEXT = vkCmdSetDepthClipEnableEXT;
extern fn vkCmdSetSampleLocationsEnableEXT(command_buffer: CommandBuffer,  sample_locations_enable: Bool32) void;
pub const cmdSetSampleLocationsEnableEXT = vkCmdSetSampleLocationsEnableEXT;
extern fn vkCmdSetColorBlendAdvancedEXT(command_buffer: CommandBuffer,  first_attachment: u32,  attachment_count: u32,  p_color_blend_advanced: [*c]const ColorBlendAdvancedEXT) void;
pub const cmdSetColorBlendAdvancedEXT = vkCmdSetColorBlendAdvancedEXT;
extern fn vkCmdSetProvokingVertexModeEXT(command_buffer: CommandBuffer,  provoking_vertex_mode: ProvokingVertexModeEXT) void;
pub const cmdSetProvokingVertexModeEXT = vkCmdSetProvokingVertexModeEXT;
extern fn vkCmdSetLineRasterizationModeEXT(command_buffer: CommandBuffer,  line_rasterization_mode: LineRasterizationModeEXT) void;
pub const cmdSetLineRasterizationModeEXT = vkCmdSetLineRasterizationModeEXT;
extern fn vkCmdSetLineStippleEnableEXT(command_buffer: CommandBuffer,  stippled_line_enable: Bool32) void;
pub const cmdSetLineStippleEnableEXT = vkCmdSetLineStippleEnableEXT;
extern fn vkCmdSetDepthClipNegativeOneToOneEXT(command_buffer: CommandBuffer,  negative_one_to_one: Bool32) void;
pub const cmdSetDepthClipNegativeOneToOneEXT = vkCmdSetDepthClipNegativeOneToOneEXT;
extern fn vkCmdSetViewportWScalingEnableNV(command_buffer: CommandBuffer,  viewport_wscaling_enable: Bool32) void;
pub const cmdSetViewportWScalingEnableNV = vkCmdSetViewportWScalingEnableNV;
extern fn vkCmdSetViewportSwizzleNV(command_buffer: CommandBuffer,  first_viewport: u32,  viewport_count: u32,  p_viewport_swizzles: [*c]const ViewportSwizzleNV) void;
pub const cmdSetViewportSwizzleNV = vkCmdSetViewportSwizzleNV;
extern fn vkCmdSetCoverageToColorEnableNV(command_buffer: CommandBuffer,  coverage_to_color_enable: Bool32) void;
pub const cmdSetCoverageToColorEnableNV = vkCmdSetCoverageToColorEnableNV;
extern fn vkCmdSetCoverageToColorLocationNV(command_buffer: CommandBuffer,  coverage_to_color_location: u32) void;
pub const cmdSetCoverageToColorLocationNV = vkCmdSetCoverageToColorLocationNV;
extern fn vkCmdSetCoverageModulationModeNV(command_buffer: CommandBuffer,  coverage_modulation_mode: CoverageModulationModeNV) void;
pub const cmdSetCoverageModulationModeNV = vkCmdSetCoverageModulationModeNV;
extern fn vkCmdSetCoverageModulationTableEnableNV(command_buffer: CommandBuffer,  coverage_modulation_table_enable: Bool32) void;
pub const cmdSetCoverageModulationTableEnableNV = vkCmdSetCoverageModulationTableEnableNV;
extern fn vkCmdSetCoverageModulationTableNV(command_buffer: CommandBuffer,  coverage_modulation_table_count: u32,  p_coverage_modulation_table: [*c]const f32) void;
pub const cmdSetCoverageModulationTableNV = vkCmdSetCoverageModulationTableNV;
extern fn vkCmdSetShadingRateImageEnableNV(command_buffer: CommandBuffer,  shading_rate_image_enable: Bool32) void;
pub const cmdSetShadingRateImageEnableNV = vkCmdSetShadingRateImageEnableNV;
extern fn vkCmdSetRepresentativeFragmentTestEnableNV(command_buffer: CommandBuffer,  representative_fragment_test_enable: Bool32) void;
pub const cmdSetRepresentativeFragmentTestEnableNV = vkCmdSetRepresentativeFragmentTestEnableNV;
extern fn vkCmdSetCoverageReductionModeNV(command_buffer: CommandBuffer,  coverage_reduction_mode: CoverageReductionModeNV) void;
pub const cmdSetCoverageReductionModeNV = vkCmdSetCoverageReductionModeNV;
extern fn vkCreateTensorARM(device: Device,  p_create_info: [*c]const TensorCreateInfoARM,  p_allocator: [*c]const AllocationCallbacks,  p_tensor: [*c]TensorARM) Result;
pub const createTensorARM = vkCreateTensorARM;
extern fn vkDestroyTensorARM(device: Device,  tensor: TensorARM,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyTensorARM = vkDestroyTensorARM;
extern fn vkCreateTensorViewARM(device: Device,  p_create_info: [*c]const TensorViewCreateInfoARM,  p_allocator: [*c]const AllocationCallbacks,  p_view: [*c]TensorViewARM) Result;
pub const createTensorViewARM = vkCreateTensorViewARM;
extern fn vkDestroyTensorViewARM(device: Device,  tensor_view: TensorViewARM,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyTensorViewARM = vkDestroyTensorViewARM;
extern fn vkGetTensorMemoryRequirementsARM(device: Device,  p_info: [*c]const TensorMemoryRequirementsInfoARM,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getTensorMemoryRequirementsARM = vkGetTensorMemoryRequirementsARM;
extern fn vkBindTensorMemoryARM(device: Device,  bind_info_count: u32,  p_bind_infos: [*c]const BindTensorMemoryInfoARM) Result;
pub const bindTensorMemoryARM = vkBindTensorMemoryARM;
extern fn vkGetDeviceTensorMemoryRequirementsARM(device: Device,  p_info: [*c]const DeviceTensorMemoryRequirementsARM,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getDeviceTensorMemoryRequirementsARM = vkGetDeviceTensorMemoryRequirementsARM;
extern fn vkCmdCopyTensorARM(command_buffer: CommandBuffer,  p_copy_tensor_info: [*c]const CopyTensorInfoARM) void;
pub const cmdCopyTensorARM = vkCmdCopyTensorARM;
extern fn vkGetPhysicalDeviceExternalTensorPropertiesARM(physical_device: PhysicalDevice,  p_external_tensor_info: [*c]const PhysicalDeviceExternalTensorInfoARM,  p_external_tensor_properties: [*c]ExternalTensorPropertiesARM) void;
pub const getPhysicalDeviceExternalTensorPropertiesARM = vkGetPhysicalDeviceExternalTensorPropertiesARM;
extern fn vkGetTensorOpaqueCaptureDescriptorDataARM(device: Device,  p_info: [*c]const TensorCaptureDescriptorDataInfoARM,  p_data: ?*anyopaque) Result;
pub const getTensorOpaqueCaptureDescriptorDataARM = vkGetTensorOpaqueCaptureDescriptorDataARM;
extern fn vkGetTensorViewOpaqueCaptureDescriptorDataARM(device: Device,  p_info: [*c]const TensorViewCaptureDescriptorDataInfoARM,  p_data: ?*anyopaque) Result;
pub const getTensorViewOpaqueCaptureDescriptorDataARM = vkGetTensorViewOpaqueCaptureDescriptorDataARM;
extern fn vkGetShaderModuleIdentifierEXT(device: Device,  shader_module: ShaderModule,  p_identifier: [*c]ShaderModuleIdentifierEXT) void;
pub const getShaderModuleIdentifierEXT = vkGetShaderModuleIdentifierEXT;
extern fn vkGetShaderModuleCreateInfoIdentifierEXT(device: Device,  p_create_info: [*c]const ShaderModuleCreateInfo,  p_identifier: [*c]ShaderModuleIdentifierEXT) void;
pub const getShaderModuleCreateInfoIdentifierEXT = vkGetShaderModuleCreateInfoIdentifierEXT;
extern fn vkGetPhysicalDeviceOpticalFlowImageFormatsNV(physical_device: PhysicalDevice,  p_optical_flow_image_format_info: [*c]const OpticalFlowImageFormatInfoNV,  p_format_count: [*c]u32,  p_image_format_properties: [*c]OpticalFlowImageFormatPropertiesNV) Result;
pub const getPhysicalDeviceOpticalFlowImageFormatsNV = vkGetPhysicalDeviceOpticalFlowImageFormatsNV;
extern fn vkCreateOpticalFlowSessionNV(device: Device,  p_create_info: [*c]const OpticalFlowSessionCreateInfoNV,  p_allocator: [*c]const AllocationCallbacks,  p_session: [*c]OpticalFlowSessionNV) Result;
pub const createOpticalFlowSessionNV = vkCreateOpticalFlowSessionNV;
extern fn vkDestroyOpticalFlowSessionNV(device: Device,  session: OpticalFlowSessionNV,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyOpticalFlowSessionNV = vkDestroyOpticalFlowSessionNV;
extern fn vkBindOpticalFlowSessionImageNV(device: Device,  session: OpticalFlowSessionNV,  binding_point: OpticalFlowSessionBindingPointNV,  view: ImageView,  layout: ImageLayout) Result;
pub const bindOpticalFlowSessionImageNV = vkBindOpticalFlowSessionImageNV;
extern fn vkCmdOpticalFlowExecuteNV(command_buffer: CommandBuffer,  session: OpticalFlowSessionNV,  p_execute_info: [*c]const OpticalFlowExecuteInfoNV) void;
pub const cmdOpticalFlowExecuteNV = vkCmdOpticalFlowExecuteNV;
extern fn vkAntiLagUpdateAMD(device: Device,  p_data: [*c]const AntiLagDataAMD) void;
pub const antiLagUpdateAMD = vkAntiLagUpdateAMD;
extern fn vkCreateShadersEXT(device: Device,  create_info_count: u32,  p_create_infos: [*c]const ShaderCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_shaders: [*c]ShaderEXT) Result;
pub const createShadersEXT = vkCreateShadersEXT;
extern fn vkDestroyShaderEXT(device: Device,  shader: ShaderEXT,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyShaderEXT = vkDestroyShaderEXT;
extern fn vkGetShaderBinaryDataEXT(device: Device,  shader: ShaderEXT,  p_data_size: [*c]usize,  p_data: ?*anyopaque) Result;
pub const getShaderBinaryDataEXT = vkGetShaderBinaryDataEXT;
extern fn vkCmdBindShadersEXT(command_buffer: CommandBuffer,  stage_count: u32,  p_stages: [*c]const ShaderStageFlagBits,  p_shaders: [*c]const ShaderEXT) void;
pub const cmdBindShadersEXT = vkCmdBindShadersEXT;
extern fn vkCmdSetDepthClampRangeEXT(command_buffer: CommandBuffer,  depth_clamp_mode: DepthClampModeEXT,  p_depth_clamp_range: [*c]const DepthClampRangeEXT) void;
pub const cmdSetDepthClampRangeEXT = vkCmdSetDepthClampRangeEXT;
extern fn vkGetFramebufferTilePropertiesQCOM(device: Device,  framebuffer: Framebuffer,  p_properties_count: [*c]u32,  p_properties: [*c]TilePropertiesQCOM) Result;
pub const getFramebufferTilePropertiesQCOM = vkGetFramebufferTilePropertiesQCOM;
extern fn vkGetDynamicRenderingTilePropertiesQCOM(device: Device,  p_rendering_info: [*c]const RenderingInfo,  p_properties: [*c]TilePropertiesQCOM) Result;
pub const getDynamicRenderingTilePropertiesQCOM = vkGetDynamicRenderingTilePropertiesQCOM;
extern fn vkGetPhysicalDeviceCooperativeVectorPropertiesNV(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]CooperativeVectorPropertiesNV) Result;
pub const getPhysicalDeviceCooperativeVectorPropertiesNV = vkGetPhysicalDeviceCooperativeVectorPropertiesNV;
extern fn vkConvertCooperativeVectorMatrixNV(device: Device,  p_info: [*c]const ConvertCooperativeVectorMatrixInfoNV) Result;
pub const convertCooperativeVectorMatrixNV = vkConvertCooperativeVectorMatrixNV;
extern fn vkCmdConvertCooperativeVectorMatrixNV(command_buffer: CommandBuffer,  info_count: u32,  p_infos: [*c]const ConvertCooperativeVectorMatrixInfoNV) void;
pub const cmdConvertCooperativeVectorMatrixNV = vkCmdConvertCooperativeVectorMatrixNV;
extern fn vkSetLatencySleepModeNV(device: Device,  swapchain: SwapchainKHR,  p_sleep_mode_info: [*c]const LatencySleepModeInfoNV) Result;
pub const setLatencySleepModeNV = vkSetLatencySleepModeNV;
extern fn vkLatencySleepNV(device: Device,  swapchain: SwapchainKHR,  p_sleep_info: [*c]const LatencySleepInfoNV) Result;
pub const latencySleepNV = vkLatencySleepNV;
extern fn vkSetLatencyMarkerNV(device: Device,  swapchain: SwapchainKHR,  p_latency_marker_info: [*c]const SetLatencyMarkerInfoNV) void;
pub const setLatencyMarkerNV = vkSetLatencyMarkerNV;
extern fn vkGetLatencyTimingsNV(device: Device,  swapchain: SwapchainKHR,  p_latency_marker_info: [*c]GetLatencyMarkerInfoNV) void;
pub const getLatencyTimingsNV = vkGetLatencyTimingsNV;
extern fn vkQueueNotifyOutOfBandNV(queue: Queue,  p_queue_type_info: [*c]const OutOfBandQueueTypeInfoNV) void;
pub const queueNotifyOutOfBandNV = vkQueueNotifyOutOfBandNV;
extern fn vkCreateDataGraphPipelinesARM(device: Device,  deferred_operation: DeferredOperationKHR,  pipeline_cache: PipelineCache,  create_info_count: u32,  p_create_infos: [*c]const DataGraphPipelineCreateInfoARM,  p_allocator: [*c]const AllocationCallbacks,  p_pipelines: [*c]Pipeline) Result;
pub const createDataGraphPipelinesARM = vkCreateDataGraphPipelinesARM;
extern fn vkCreateDataGraphPipelineSessionARM(device: Device,  p_create_info: [*c]const DataGraphPipelineSessionCreateInfoARM,  p_allocator: [*c]const AllocationCallbacks,  p_session: [*c]DataGraphPipelineSessionARM) Result;
pub const createDataGraphPipelineSessionARM = vkCreateDataGraphPipelineSessionARM;
extern fn vkGetDataGraphPipelineSessionBindPointRequirementsARM(device: Device,  p_info: [*c]const DataGraphPipelineSessionBindPointRequirementsInfoARM,  p_bind_point_requirement_count: [*c]u32,  p_bind_point_requirements: [*c]DataGraphPipelineSessionBindPointRequirementARM) Result;
pub const getDataGraphPipelineSessionBindPointRequirementsARM = vkGetDataGraphPipelineSessionBindPointRequirementsARM;
extern fn vkGetDataGraphPipelineSessionMemoryRequirementsARM(device: Device,  p_info: [*c]const DataGraphPipelineSessionMemoryRequirementsInfoARM,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getDataGraphPipelineSessionMemoryRequirementsARM = vkGetDataGraphPipelineSessionMemoryRequirementsARM;
extern fn vkBindDataGraphPipelineSessionMemoryARM(device: Device,  bind_info_count: u32,  p_bind_infos: [*c]const BindDataGraphPipelineSessionMemoryInfoARM) Result;
pub const bindDataGraphPipelineSessionMemoryARM = vkBindDataGraphPipelineSessionMemoryARM;
extern fn vkDestroyDataGraphPipelineSessionARM(device: Device,  session: DataGraphPipelineSessionARM,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyDataGraphPipelineSessionARM = vkDestroyDataGraphPipelineSessionARM;
extern fn vkCmdDispatchDataGraphARM(command_buffer: CommandBuffer,  session: DataGraphPipelineSessionARM,  p_info: [*c]const DataGraphPipelineDispatchInfoARM) void;
pub const cmdDispatchDataGraphARM = vkCmdDispatchDataGraphARM;
extern fn vkGetDataGraphPipelineAvailablePropertiesARM(device: Device,  p_pipeline_info: [*c]const DataGraphPipelineInfoARM,  p_properties_count: [*c]u32,  p_properties: [*c]DataGraphPipelinePropertyARM) Result;
pub const getDataGraphPipelineAvailablePropertiesARM = vkGetDataGraphPipelineAvailablePropertiesARM;
extern fn vkGetDataGraphPipelinePropertiesARM(device: Device,  p_pipeline_info: [*c]const DataGraphPipelineInfoARM,  properties_count: u32,  p_properties: [*c]DataGraphPipelinePropertyQueryResultARM) Result;
pub const getDataGraphPipelinePropertiesARM = vkGetDataGraphPipelinePropertiesARM;
extern fn vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM(physical_device: PhysicalDevice,  queue_family_index: u32,  p_queue_family_data_graph_property_count: [*c]u32,  p_queue_family_data_graph_properties: [*c]QueueFamilyDataGraphPropertiesARM) Result;
pub const getPhysicalDeviceQueueFamilyDataGraphPropertiesARM = vkGetPhysicalDeviceQueueFamilyDataGraphPropertiesARM;
extern fn vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM(physical_device: PhysicalDevice,  p_queue_family_data_graph_processing_engine_info: [*c]const PhysicalDeviceQueueFamilyDataGraphProcessingEngineInfoARM,  p_queue_family_data_graph_processing_engine_properties: [*c]QueueFamilyDataGraphProcessingEnginePropertiesARM) void;
pub const getPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM = vkGetPhysicalDeviceQueueFamilyDataGraphProcessingEnginePropertiesARM;
extern fn vkCmdSetAttachmentFeedbackLoopEnableEXT(command_buffer: CommandBuffer,  aspect_mask: ImageAspectFlags) void;
pub const cmdSetAttachmentFeedbackLoopEnableEXT = vkCmdSetAttachmentFeedbackLoopEnableEXT;
extern fn vkCmdBindTileMemoryQCOM(command_buffer: CommandBuffer,  p_tile_memory_bind_info: [*c]const TileMemoryBindInfoQCOM) void;
pub const cmdBindTileMemoryQCOM = vkCmdBindTileMemoryQCOM;
extern fn vkCreateExternalComputeQueueNV(device: Device,  p_create_info: [*c]const ExternalComputeQueueCreateInfoNV,  p_allocator: [*c]const AllocationCallbacks,  p_external_queue: [*c]ExternalComputeQueueNV) Result;
pub const createExternalComputeQueueNV = vkCreateExternalComputeQueueNV;
extern fn vkDestroyExternalComputeQueueNV(device: Device,  external_queue: ExternalComputeQueueNV,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyExternalComputeQueueNV = vkDestroyExternalComputeQueueNV;
extern fn vkGetExternalComputeQueueDataNV(external_queue: ExternalComputeQueueNV,  params: [*c]ExternalComputeQueueDataParamsNV,  p_data: ?*anyopaque) void;
pub const getExternalComputeQueueDataNV = vkGetExternalComputeQueueDataNV;
extern fn vkGetClusterAccelerationStructureBuildSizesNV(device: Device,  p_info: [*c]const ClusterAccelerationStructureInputInfoNV,  p_size_info: [*c]AccelerationStructureBuildSizesInfoKHR) void;
pub const getClusterAccelerationStructureBuildSizesNV = vkGetClusterAccelerationStructureBuildSizesNV;
extern fn vkCmdBuildClusterAccelerationStructureIndirectNV(command_buffer: CommandBuffer,  p_command_infos: [*c]const ClusterAccelerationStructureCommandsInfoNV) void;
pub const cmdBuildClusterAccelerationStructureIndirectNV = vkCmdBuildClusterAccelerationStructureIndirectNV;
extern fn vkGetPartitionedAccelerationStructuresBuildSizesNV(device: Device,  p_info: [*c]const PartitionedAccelerationStructureInstancesInputNV,  p_size_info: [*c]AccelerationStructureBuildSizesInfoKHR) void;
pub const getPartitionedAccelerationStructuresBuildSizesNV = vkGetPartitionedAccelerationStructuresBuildSizesNV;
extern fn vkCmdBuildPartitionedAccelerationStructuresNV(command_buffer: CommandBuffer,  p_build_info: [*c]const BuildPartitionedAccelerationStructureInfoNV) void;
pub const cmdBuildPartitionedAccelerationStructuresNV = vkCmdBuildPartitionedAccelerationStructuresNV;
extern fn vkGetGeneratedCommandsMemoryRequirementsEXT(device: Device,  p_info: [*c]const GeneratedCommandsMemoryRequirementsInfoEXT,  p_memory_requirements: [*c]MemoryRequirements2) void;
pub const getGeneratedCommandsMemoryRequirementsEXT = vkGetGeneratedCommandsMemoryRequirementsEXT;
extern fn vkCmdPreprocessGeneratedCommandsEXT(command_buffer: CommandBuffer,  p_generated_commands_info: [*c]const GeneratedCommandsInfoEXT,  state_command_buffer: CommandBuffer) void;
pub const cmdPreprocessGeneratedCommandsEXT = vkCmdPreprocessGeneratedCommandsEXT;
extern fn vkCmdExecuteGeneratedCommandsEXT(command_buffer: CommandBuffer,  is_preprocessed: Bool32,  p_generated_commands_info: [*c]const GeneratedCommandsInfoEXT) void;
pub const cmdExecuteGeneratedCommandsEXT = vkCmdExecuteGeneratedCommandsEXT;
extern fn vkCreateIndirectCommandsLayoutEXT(device: Device,  p_create_info: [*c]const IndirectCommandsLayoutCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_indirect_commands_layout: [*c]IndirectCommandsLayoutEXT) Result;
pub const createIndirectCommandsLayoutEXT = vkCreateIndirectCommandsLayoutEXT;
extern fn vkDestroyIndirectCommandsLayoutEXT(device: Device,  indirect_commands_layout: IndirectCommandsLayoutEXT,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyIndirectCommandsLayoutEXT = vkDestroyIndirectCommandsLayoutEXT;
extern fn vkCreateIndirectExecutionSetEXT(device: Device,  p_create_info: [*c]const IndirectExecutionSetCreateInfoEXT,  p_allocator: [*c]const AllocationCallbacks,  p_indirect_execution_set: [*c]IndirectExecutionSetEXT) Result;
pub const createIndirectExecutionSetEXT = vkCreateIndirectExecutionSetEXT;
extern fn vkDestroyIndirectExecutionSetEXT(device: Device,  indirect_execution_set: IndirectExecutionSetEXT,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyIndirectExecutionSetEXT = vkDestroyIndirectExecutionSetEXT;
extern fn vkUpdateIndirectExecutionSetPipelineEXT(device: Device,  indirect_execution_set: IndirectExecutionSetEXT,  execution_set_write_count: u32,  p_execution_set_writes: [*c]const WriteIndirectExecutionSetPipelineEXT) void;
pub const updateIndirectExecutionSetPipelineEXT = vkUpdateIndirectExecutionSetPipelineEXT;
extern fn vkUpdateIndirectExecutionSetShaderEXT(device: Device,  indirect_execution_set: IndirectExecutionSetEXT,  execution_set_write_count: u32,  p_execution_set_writes: [*c]const WriteIndirectExecutionSetShaderEXT) void;
pub const updateIndirectExecutionSetShaderEXT = vkUpdateIndirectExecutionSetShaderEXT;
extern fn vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV(physical_device: PhysicalDevice,  p_property_count: [*c]u32,  p_properties: [*c]CooperativeMatrixFlexibleDimensionsPropertiesNV) Result;
pub const getPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV = vkGetPhysicalDeviceCooperativeMatrixFlexibleDimensionsPropertiesNV;
extern fn vkCmdEndRendering2EXT(command_buffer: CommandBuffer,  p_rendering_end_info: [*c]const RenderingEndInfoEXT) void;
pub const cmdEndRendering2EXT = vkCmdEndRendering2EXT;
extern fn vkCreateAccelerationStructureKHR(device: Device,  p_create_info: [*c]const AccelerationStructureCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_acceleration_structure: [*c]AccelerationStructureKHR) Result;
pub const createAccelerationStructureKHR = vkCreateAccelerationStructureKHR;
extern fn vkDestroyAccelerationStructureKHR(device: Device,  acceleration_structure: AccelerationStructureKHR,  p_allocator: [*c]const AllocationCallbacks) void;
pub const destroyAccelerationStructureKHR = vkDestroyAccelerationStructureKHR;
extern fn vkCmdBuildAccelerationStructuresKHR(command_buffer: CommandBuffer,  info_count: u32,  p_infos: [*c]const AccelerationStructureBuildGeometryInfoKHR,  pp_build_range_infos: [*c]const [*c]const AccelerationStructureBuildRangeInfoKHR) void;
pub const cmdBuildAccelerationStructuresKHR = vkCmdBuildAccelerationStructuresKHR;
extern fn vkCmdBuildAccelerationStructuresIndirectKHR(command_buffer: CommandBuffer,  info_count: u32,  p_infos: [*c]const AccelerationStructureBuildGeometryInfoKHR,  p_indirect_device_addresses: [*c]const DeviceAddress,  p_indirect_strides: [*c]const u32,  pp_max_primitive_counts: [*c]const [*c]const u32) void;
pub const cmdBuildAccelerationStructuresIndirectKHR = vkCmdBuildAccelerationStructuresIndirectKHR;
extern fn vkBuildAccelerationStructuresKHR(device: Device,  deferred_operation: DeferredOperationKHR,  info_count: u32,  p_infos: [*c]const AccelerationStructureBuildGeometryInfoKHR,  pp_build_range_infos: [*c]const [*c]const AccelerationStructureBuildRangeInfoKHR) Result;
pub const buildAccelerationStructuresKHR = vkBuildAccelerationStructuresKHR;
extern fn vkCopyAccelerationStructureKHR(device: Device,  deferred_operation: DeferredOperationKHR,  p_info: [*c]const CopyAccelerationStructureInfoKHR) Result;
pub const copyAccelerationStructureKHR = vkCopyAccelerationStructureKHR;
extern fn vkCopyAccelerationStructureToMemoryKHR(device: Device,  deferred_operation: DeferredOperationKHR,  p_info: [*c]const CopyAccelerationStructureToMemoryInfoKHR) Result;
pub const copyAccelerationStructureToMemoryKHR = vkCopyAccelerationStructureToMemoryKHR;
extern fn vkCopyMemoryToAccelerationStructureKHR(device: Device,  deferred_operation: DeferredOperationKHR,  p_info: [*c]const CopyMemoryToAccelerationStructureInfoKHR) Result;
pub const copyMemoryToAccelerationStructureKHR = vkCopyMemoryToAccelerationStructureKHR;
extern fn vkWriteAccelerationStructuresPropertiesKHR(device: Device,  acceleration_structure_count: u32,  p_acceleration_structures: [*c]const AccelerationStructureKHR,  query_type: QueryType,  data_size: usize,  p_data: ?*anyopaque,  stride: usize) Result;
pub const writeAccelerationStructuresPropertiesKHR = vkWriteAccelerationStructuresPropertiesKHR;
extern fn vkCmdCopyAccelerationStructureKHR(command_buffer: CommandBuffer,  p_info: [*c]const CopyAccelerationStructureInfoKHR) void;
pub const cmdCopyAccelerationStructureKHR = vkCmdCopyAccelerationStructureKHR;
extern fn vkCmdCopyAccelerationStructureToMemoryKHR(command_buffer: CommandBuffer,  p_info: [*c]const CopyAccelerationStructureToMemoryInfoKHR) void;
pub const cmdCopyAccelerationStructureToMemoryKHR = vkCmdCopyAccelerationStructureToMemoryKHR;
extern fn vkCmdCopyMemoryToAccelerationStructureKHR(command_buffer: CommandBuffer,  p_info: [*c]const CopyMemoryToAccelerationStructureInfoKHR) void;
pub const cmdCopyMemoryToAccelerationStructureKHR = vkCmdCopyMemoryToAccelerationStructureKHR;
extern fn vkGetAccelerationStructureDeviceAddressKHR(device: Device,  p_info: [*c]const AccelerationStructureDeviceAddressInfoKHR) DeviceAddress;
pub const getAccelerationStructureDeviceAddressKHR = vkGetAccelerationStructureDeviceAddressKHR;
extern fn vkCmdWriteAccelerationStructuresPropertiesKHR(command_buffer: CommandBuffer,  acceleration_structure_count: u32,  p_acceleration_structures: [*c]const AccelerationStructureKHR,  query_type: QueryType,  query_pool: QueryPool,  first_query: u32) void;
pub const cmdWriteAccelerationStructuresPropertiesKHR = vkCmdWriteAccelerationStructuresPropertiesKHR;
extern fn vkGetDeviceAccelerationStructureCompatibilityKHR(device: Device,  p_version_info: [*c]const AccelerationStructureVersionInfoKHR,  p_compatibility: [*c]AccelerationStructureCompatibilityKHR) void;
pub const getDeviceAccelerationStructureCompatibilityKHR = vkGetDeviceAccelerationStructureCompatibilityKHR;
extern fn vkGetAccelerationStructureBuildSizesKHR(device: Device,  build_type: AccelerationStructureBuildTypeKHR,  p_build_info: [*c]const AccelerationStructureBuildGeometryInfoKHR,  p_max_primitive_counts: [*c]const u32,  p_size_info: [*c]AccelerationStructureBuildSizesInfoKHR) void;
pub const getAccelerationStructureBuildSizesKHR = vkGetAccelerationStructureBuildSizesKHR;
extern fn vkCmdTraceRaysKHR(command_buffer: CommandBuffer,  p_raygen_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  p_miss_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  p_hit_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  p_callable_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  width: u32,  height: u32,  depth: u32) void;
pub const cmdTraceRaysKHR = vkCmdTraceRaysKHR;
extern fn vkCreateRayTracingPipelinesKHR(device: Device,  deferred_operation: DeferredOperationKHR,  pipeline_cache: PipelineCache,  create_info_count: u32,  p_create_infos: [*c]const RayTracingPipelineCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_pipelines: [*c]Pipeline) Result;
pub const createRayTracingPipelinesKHR = vkCreateRayTracingPipelinesKHR;
extern fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device: Device,  pipeline: Pipeline,  first_group: u32,  group_count: u32,  data_size: usize,  p_data: ?*anyopaque) Result;
pub const getRayTracingCaptureReplayShaderGroupHandlesKHR = vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
extern fn vkCmdTraceRaysIndirectKHR(command_buffer: CommandBuffer,  p_raygen_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  p_miss_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  p_hit_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  p_callable_shader_binding_table: [*c]const StridedDeviceAddressRegionKHR,  indirect_device_address: DeviceAddress) void;
pub const cmdTraceRaysIndirectKHR = vkCmdTraceRaysIndirectKHR;
extern fn vkGetRayTracingShaderGroupStackSizeKHR(device: Device,  pipeline: Pipeline,  group: u32,  group_shader: ShaderGroupShaderKHR) DeviceSize;
pub const getRayTracingShaderGroupStackSizeKHR = vkGetRayTracingShaderGroupStackSizeKHR;
extern fn vkCmdSetRayTracingPipelineStackSizeKHR(command_buffer: CommandBuffer,  pipeline_stack_size: u32) void;
pub const cmdSetRayTracingPipelineStackSizeKHR = vkCmdSetRayTracingPipelineStackSizeKHR;
extern fn vkCmdDrawMeshTasksEXT(command_buffer: CommandBuffer,  group_count_x: u32,  group_count_y: u32,  group_count_z: u32) void;
pub const cmdDrawMeshTasksEXT = vkCmdDrawMeshTasksEXT;
extern fn vkCmdDrawMeshTasksIndirectEXT(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  draw_count: u32,  stride: u32) void;
pub const cmdDrawMeshTasksIndirectEXT = vkCmdDrawMeshTasksIndirectEXT;
extern fn vkCmdDrawMeshTasksIndirectCountEXT(command_buffer: CommandBuffer,  buffer: Buffer,  offset: DeviceSize,  count_buffer: Buffer,  count_buffer_offset: DeviceSize,  max_draw_count: u32,  stride: u32) void;
pub const cmdDrawMeshTasksIndirectCountEXT = vkCmdDrawMeshTasksIndirectCountEXT;
extern fn vkCreateWin32SurfaceKHR(instance: Instance,  p_create_info: [*c]const Win32SurfaceCreateInfoKHR,  p_allocator: [*c]const AllocationCallbacks,  p_surface: [*c]SurfaceKHR) Result;
pub const createWin32SurfaceKHR = vkCreateWin32SurfaceKHR;
extern fn vkGetPhysicalDeviceWin32PresentationSupportKHR(physical_device: PhysicalDevice,  queue_family_index: u32) Bool32;
pub const getPhysicalDeviceWin32PresentationSupportKHR = vkGetPhysicalDeviceWin32PresentationSupportKHR;
extern fn vkGetMemoryWin32HandleKHR(device: Device,  p_get_win32_handle_info: [*c]const MemoryGetWin32HandleInfoKHR,  p_handle: [*c]HANDLE) Result;
pub const getMemoryWin32HandleKHR = vkGetMemoryWin32HandleKHR;
extern fn vkGetMemoryWin32HandlePropertiesKHR(device: Device,  handle_type: ExternalMemoryHandleTypeFlagBits,  handle: HANDLE,  p_memory_win32_handle_properties: [*c]MemoryWin32HandlePropertiesKHR) Result;
pub const getMemoryWin32HandlePropertiesKHR = vkGetMemoryWin32HandlePropertiesKHR;
extern fn vkImportSemaphoreWin32HandleKHR(device: Device,  p_import_semaphore_win32_handle_info: [*c]const ImportSemaphoreWin32HandleInfoKHR) Result;
pub const importSemaphoreWin32HandleKHR = vkImportSemaphoreWin32HandleKHR;
extern fn vkGetSemaphoreWin32HandleKHR(device: Device,  p_get_win32_handle_info: [*c]const SemaphoreGetWin32HandleInfoKHR,  p_handle: [*c]HANDLE) Result;
pub const getSemaphoreWin32HandleKHR = vkGetSemaphoreWin32HandleKHR;
extern fn vkImportFenceWin32HandleKHR(device: Device,  p_import_fence_win32_handle_info: [*c]const ImportFenceWin32HandleInfoKHR) Result;
pub const importFenceWin32HandleKHR = vkImportFenceWin32HandleKHR;
extern fn vkGetFenceWin32HandleKHR(device: Device,  p_get_win32_handle_info: [*c]const FenceGetWin32HandleInfoKHR,  p_handle: [*c]HANDLE) Result;
pub const getFenceWin32HandleKHR = vkGetFenceWin32HandleKHR;
extern fn vkGetMemoryWin32HandleNV(device: Device,  memory: DeviceMemory,  handle_type: ExternalMemoryHandleTypeFlagsNV,  p_handle: [*c]HANDLE) Result;
pub const getMemoryWin32HandleNV = vkGetMemoryWin32HandleNV;
extern fn vkGetPhysicalDeviceSurfacePresentModes2EXT(physical_device: PhysicalDevice,  p_surface_info: [*c]const PhysicalDeviceSurfaceInfo2KHR,  p_present_mode_count: [*c]u32,  p_present_modes: [*c]PresentModeKHR) Result;
pub const getPhysicalDeviceSurfacePresentModes2EXT = vkGetPhysicalDeviceSurfacePresentModes2EXT;
extern fn vkAcquireFullScreenExclusiveModeEXT(device: Device,  swapchain: SwapchainKHR) Result;
pub const acquireFullScreenExclusiveModeEXT = vkAcquireFullScreenExclusiveModeEXT;
extern fn vkReleaseFullScreenExclusiveModeEXT(device: Device,  swapchain: SwapchainKHR) Result;
pub const releaseFullScreenExclusiveModeEXT = vkReleaseFullScreenExclusiveModeEXT;
extern fn vkGetDeviceGroupSurfacePresentModes2EXT(device: Device,  p_surface_info: [*c]const PhysicalDeviceSurfaceInfo2KHR,  p_modes: [*c]DeviceGroupPresentModeFlagsKHR) Result;
pub const getDeviceGroupSurfacePresentModes2EXT = vkGetDeviceGroupSurfacePresentModes2EXT;
extern fn vkAcquireWinrtDisplayNV(physical_device: PhysicalDevice,  display: DisplayKHR) Result;
pub const acquireWinrtDisplayNV = vkAcquireWinrtDisplayNV;
extern fn vkGetWinrtDisplayNV(physical_device: PhysicalDevice,  device_relative_id: u32,  p_display: [*c]DisplayKHR) Result;
pub const getWinrtDisplayNV = vkGetWinrtDisplayNV;
