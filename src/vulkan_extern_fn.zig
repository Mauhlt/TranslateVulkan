    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
    x: i32 = @import("std").mem.zeroes(i32),
    y: i32 = @import("std").mem.zeroes(i32),
    z: i32 = @import("std").mem.zeroes(i32),
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]const struct_VkBaseInStructure = @import("std").mem.zeroes([*c]const struct_VkBaseInStructure),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: [*c]struct_VkBaseOutStructure = @import("std").mem.zeroes([*c]struct_VkBaseOutStructure),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    x: u32 = @import("std").mem.zeroes(u32),
    y: u32 = @import("std").mem.zeroes(u32),
    z: u32 = @import("std").mem.zeroes(u32),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    firstInstance: u32 = @import("std").mem.zeroes(u32),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    baseMipLevel: u32 = @import("std").mem.zeroes(u32),
    levelCount: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkPipelineCacheHeaderVersion = @import("std").mem.zeroes(VkPipelineCacheHeaderVersion),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pfnAllocation: PFN_vkAllocationFunction = @import("std").mem.zeroes(PFN_vkAllocationFunction),
    pfnReallocation: PFN_vkReallocationFunction = @import("std").mem.zeroes(PFN_vkReallocationFunction),
    pfnFree: PFN_vkFreeFunction = @import("std").mem.zeroes(PFN_vkFreeFunction),
    pfnInternalAllocation: PFN_vkInternalAllocationNotification = @import("std").mem.zeroes(PFN_vkInternalAllocationNotification),
    pfnInternalFree: PFN_vkInternalFreeNotification = @import("std").mem.zeroes(PFN_vkInternalFreeNotification),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pApplicationName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    pEngineName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
    linearTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    optimalTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    bufferFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    maxExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    maxMipLevels: u32 = @import("std").mem.zeroes(u32),
    maxArrayLayers: u32 = @import("std").mem.zeroes(u32),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxResourceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkInstanceCreateFlags = @import("std").mem.zeroes(VkInstanceCreateFlags),
    pApplicationInfo: [*c]const VkApplicationInfo = @import("std").mem.zeroes([*c]const VkApplicationInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkMemoryHeapFlags = @import("std").mem.zeroes(VkMemoryHeapFlags),
    propertyFlags: VkMemoryPropertyFlags = @import("std").mem.zeroes(VkMemoryPropertyFlags),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
    robustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullDrawIndexUint32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imageCubeArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleRateShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dualSrcBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiDrawIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fillModeNonSolid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBounds: VkBool32 = @import("std").mem.zeroes(VkBool32),
    wideLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    largePoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiViewport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerAnisotropy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionETC2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_LDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionBC: VkBool32 = @import("std").mem.zeroes(VkBool32),
    occlusionQueryPrecise: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineStatisticsQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexPipelineStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentStoresAndAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTessellationAndGeometryPointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageGatherExtended: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageExtendedFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageMultisample: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageReadWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageWriteWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderClipDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderCullDistance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceResidency: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderResourceMinLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyImage3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency2Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency4Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency8Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidency16Samples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseResidencyAliased: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variableMultisampleRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxImageDimension1D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension2D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimension3D: u32 = @import("std").mem.zeroes(u32),
    maxImageDimensionCube: u32 = @import("std").mem.zeroes(u32),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxTexelBufferElements: u32 = @import("std").mem.zeroes(u32),
    maxUniformBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxStorageBufferRange: u32 = @import("std").mem.zeroes(u32),
    maxPushConstantsSize: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerAllocationCount: u32 = @import("std").mem.zeroes(u32),
    bufferImageGranularity: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxBoundDescriptorSets: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributes: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindings: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputAttributeOffset: u32 = @import("std").mem.zeroes(u32),
    maxVertexInputBindingStride: u32 = @import("std").mem.zeroes(u32),
    maxVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationGenerationLevel: u32 = @import("std").mem.zeroes(u32),
    maxTessellationPatchSize: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerVertexOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlPerPatchOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationControlTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxTessellationEvaluationOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryShaderInvocations: u32 = @import("std").mem.zeroes(u32),
    maxGeometryInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxGeometryOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxGeometryTotalOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentInputComponents: u32 = @import("std").mem.zeroes(u32),
    maxFragmentOutputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentDualSrcAttachments: u32 = @import("std").mem.zeroes(u32),
    maxFragmentCombinedOutputResources: u32 = @import("std").mem.zeroes(u32),
    maxComputeSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxComputeWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    subPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    subTexelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    mipmapPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndexedIndexValue: u32 = @import("std").mem.zeroes(u32),
    maxDrawIndirectCount: u32 = @import("std").mem.zeroes(u32),
    maxSamplerLodBias: f32 = @import("std").mem.zeroes(f32),
    maxSamplerAnisotropy: f32 = @import("std").mem.zeroes(f32),
    maxViewports: u32 = @import("std").mem.zeroes(u32),
    maxViewportDimensions: [2]u32 = @import("std").mem.zeroes([2]u32),
    viewportBoundsRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    viewportSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    minMemoryMapAlignment: usize = @import("std").mem.zeroes(usize),
    minTexelBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minUniformBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minStorageBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minTexelOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelOffset: u32 = @import("std").mem.zeroes(u32),
    minTexelGatherOffset: i32 = @import("std").mem.zeroes(i32),
    maxTexelGatherOffset: u32 = @import("std").mem.zeroes(u32),
    minInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    maxInterpolationOffset: f32 = @import("std").mem.zeroes(f32),
    subPixelInterpolationOffsetBits: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferWidth: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferHeight: u32 = @import("std").mem.zeroes(u32),
    maxFramebufferLayers: u32 = @import("std").mem.zeroes(u32),
    framebufferColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    sampledImageColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageIntegerSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageDepthSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sampledImageStencilSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    storageImageSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleMaskWords: u32 = @import("std").mem.zeroes(u32),
    timestampComputeAndGraphics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timestampPeriod: f32 = @import("std").mem.zeroes(f32),
    maxClipDistances: u32 = @import("std").mem.zeroes(u32),
    maxCullDistances: u32 = @import("std").mem.zeroes(u32),
    maxCombinedClipAndCullDistances: u32 = @import("std").mem.zeroes(u32),
    discreteQueuePriorities: u32 = @import("std").mem.zeroes(u32),
    pointSizeRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    lineWidthRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    pointSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    lineWidthGranularity: f32 = @import("std").mem.zeroes(f32),
    strictLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    standardSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    optimalBufferCopyOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    optimalBufferCopyRowPitchAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    nonCoherentAtomSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeCount: u32 = @import("std").mem.zeroes(u32),
    memoryTypes: [32]VkMemoryType = @import("std").mem.zeroes([32]VkMemoryType),
    memoryHeapCount: u32 = @import("std").mem.zeroes(u32),
    memoryHeaps: [16]VkMemoryHeap = @import("std").mem.zeroes([16]VkMemoryHeap),
    residencyStandard2DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard2DMultisampleBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyStandard3DBlockShape: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyAlignedMipSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    residencyNonResidentStrict: VkBool32 = @import("std").mem.zeroes(VkBool32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    deviceType: VkPhysicalDeviceType = @import("std").mem.zeroes(VkPhysicalDeviceType),
    deviceName: [256]u8 = @import("std").mem.zeroes([256]u8),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    limits: VkPhysicalDeviceLimits = @import("std").mem.zeroes(VkPhysicalDeviceLimits),
    sparseProperties: VkPhysicalDeviceSparseProperties = @import("std").mem.zeroes(VkPhysicalDeviceSparseProperties),
    queueFlags: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    timestampValidBits: u32 = @import("std").mem.zeroes(u32),
    minImageTransferGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueCount: u32 = @import("std").mem.zeroes(u32),
    pQueuePriorities: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceCreateFlags = @import("std").mem.zeroes(VkDeviceCreateFlags),
    queueCreateInfoCount: u32 = @import("std").mem.zeroes(u32),
    pQueueCreateInfos: [*c]const VkDeviceQueueCreateInfo = @import("std").mem.zeroes([*c]const VkDeviceQueueCreateInfo),
    enabledLayerCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledLayerNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    enabledExtensionCount: u32 = @import("std").mem.zeroes(u32),
    ppEnabledExtensionNames: [*c]const [*c]const u8 = @import("std").mem.zeroes([*c]const [*c]const u8),
    pEnabledFeatures: [*c]const VkPhysicalDeviceFeatures = @import("std").mem.zeroes([*c]const VkPhysicalDeviceFeatures),
    extensionName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
    layerName: [256]u8 = @import("std").mem.zeroes([256]u8),
    specVersion: u32 = @import("std").mem.zeroes(u32),
    implementationVersion: u32 = @import("std").mem.zeroes(u32),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pWaitDstStageMask: [*c]const VkPipelineStageFlags = @import("std").mem.zeroes([*c]const VkPipelineStageFlags),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBuffers: [*c]const VkCommandBuffer = @import("std").mem.zeroes([*c]const VkCommandBuffer),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    allocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeIndex: u32 = @import("std").mem.zeroes(u32),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    alignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
    resourceOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseMemoryBind = @import("std").mem.zeroes([*c]const VkSparseMemoryBind),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    arrayLayer: u32 = @import("std").mem.zeroes(u32),
    subresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
    offset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkSparseMemoryBindFlags = @import("std").mem.zeroes(VkSparseMemoryBindFlags),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    bindCount: u32 = @import("std").mem.zeroes(u32),
    pBinds: [*c]const VkSparseImageMemoryBind = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBind),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    bufferBindCount: u32 = @import("std").mem.zeroes(u32),
    pBufferBinds: [*c]const VkSparseBufferMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseBufferMemoryBindInfo),
    imageOpaqueBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageOpaqueBinds: [*c]const VkSparseImageOpaqueMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageOpaqueMemoryBindInfo),
    imageBindCount: u32 = @import("std").mem.zeroes(u32),
    pImageBinds: [*c]const VkSparseImageMemoryBindInfo = @import("std").mem.zeroes([*c]const VkSparseImageMemoryBindInfo),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    imageGranularity: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    flags: VkSparseImageFormatFlags = @import("std").mem.zeroes(VkSparseImageFormatFlags),
    formatProperties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
    imageMipTailFirstLod: u32 = @import("std").mem.zeroes(u32),
    imageMipTailSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    imageMipTailStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFenceCreateFlags = @import("std").mem.zeroes(VkFenceCreateFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreCreateFlags = @import("std").mem.zeroes(VkSemaphoreCreateFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkEventCreateFlags = @import("std").mem.zeroes(VkEventCreateFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkQueryPoolCreateFlags = @import("std").mem.zeroes(VkQueryPoolCreateFlags),
    queryType: VkQueryType = @import("std").mem.zeroes(VkQueryType),
    queryCount: u32 = @import("std").mem.zeroes(u32),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferViewCreateFlags = @import("std").mem.zeroes(VkBufferViewCreateFlags),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    mipLevels: u32 = @import("std").mem.zeroes(u32),
    arrayLayers: u32 = @import("std").mem.zeroes(u32),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    rowPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    arrayPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    depthPitch: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    r: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    g: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    b: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    a: VkComponentSwizzle = @import("std").mem.zeroes(VkComponentSwizzle),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageViewCreateFlags = @import("std").mem.zeroes(VkImageViewCreateFlags),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    viewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderModuleCreateFlags = @import("std").mem.zeroes(VkShaderModuleCreateFlags),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCacheCreateFlags = @import("std").mem.zeroes(VkPipelineCacheCreateFlags),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantID: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: usize = @import("std").mem.zeroes(usize),
    mapEntryCount: u32 = @import("std").mem.zeroes(u32),
    pMapEntries: [*c]const VkSpecializationMapEntry = @import("std").mem.zeroes([*c]const VkSpecializationMapEntry),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineShaderStageCreateFlags = @import("std").mem.zeroes(VkPipelineShaderStageCreateFlags),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    module: VkShaderModule = @import("std").mem.zeroes(VkShaderModule),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stage: VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes(VkPipelineShaderStageCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineVertexInputStateCreateFlags = @import("std").mem.zeroes(VkPipelineVertexInputStateCreateFlags),
    vertexBindingDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription = @import("std").mem.zeroes([*c]const VkVertexInputBindingDescription),
    vertexAttributeDescriptionCount: u32 = @import("std").mem.zeroes(u32),
    pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription = @import("std").mem.zeroes([*c]const VkVertexInputAttributeDescription),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineInputAssemblyStateCreateFlags = @import("std").mem.zeroes(VkPipelineInputAssemblyStateCreateFlags),
    topology: VkPrimitiveTopology = @import("std").mem.zeroes(VkPrimitiveTopology),
    primitiveRestartEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineTessellationStateCreateFlags = @import("std").mem.zeroes(VkPipelineTessellationStateCreateFlags),
    patchControlPoints: u32 = @import("std").mem.zeroes(u32),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    width: f32 = @import("std").mem.zeroes(f32),
    height: f32 = @import("std").mem.zeroes(f32),
    minDepth: f32 = @import("std").mem.zeroes(f32),
    maxDepth: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportStateCreateFlags = @import("std").mem.zeroes(VkPipelineViewportStateCreateFlags),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewports: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
    scissorCount: u32 = @import("std").mem.zeroes(u32),
    pScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateCreateFlags = @import("std").mem.zeroes(VkPipelineRasterizationStateCreateFlags),
    depthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizerDiscardEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonMode: VkPolygonMode = @import("std").mem.zeroes(VkPolygonMode),
    cullMode: VkCullModeFlags = @import("std").mem.zeroes(VkCullModeFlags),
    frontFace: VkFrontFace = @import("std").mem.zeroes(VkFrontFace),
    depthBiasEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
    lineWidth: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineMultisampleStateCreateFlags = @import("std").mem.zeroes(VkPipelineMultisampleStateCreateFlags),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleShadingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minSampleShading: f32 = @import("std").mem.zeroes(f32),
    pSampleMask: [*c]const VkSampleMask = @import("std").mem.zeroes([*c]const VkSampleMask),
    alphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    alphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    failOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    passOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    depthFailOp: VkStencilOp = @import("std").mem.zeroes(VkStencilOp),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    compareMask: u32 = @import("std").mem.zeroes(u32),
    writeMask: u32 = @import("std").mem.zeroes(u32),
    reference: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDepthStencilStateCreateFlags = @import("std").mem.zeroes(VkPipelineDepthStencilStateCreateFlags),
    depthTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthCompareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    depthBoundsTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stencilTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    front: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    back: VkStencilOpState = @import("std").mem.zeroes(VkStencilOpState),
    minDepthBounds: f32 = @import("std").mem.zeroes(f32),
    maxDepthBounds: f32 = @import("std").mem.zeroes(f32),
    blendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    colorWriteMask: VkColorComponentFlags = @import("std").mem.zeroes(VkColorComponentFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineColorBlendStateCreateFlags = @import("std").mem.zeroes(VkPipelineColorBlendStateCreateFlags),
    logicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    logicOp: VkLogicOp = @import("std").mem.zeroes(VkLogicOp),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkPipelineColorBlendAttachmentState = @import("std").mem.zeroes([*c]const VkPipelineColorBlendAttachmentState),
    blendConstants: [4]f32 = @import("std").mem.zeroes([4]f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDynamicStateCreateFlags = @import("std").mem.zeroes(VkPipelineDynamicStateCreateFlags),
    dynamicStateCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicStates: [*c]const VkDynamicState = @import("std").mem.zeroes([*c]const VkDynamicState),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pInputAssemblyState: [*c]const VkPipelineInputAssemblyStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineInputAssemblyStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
    pViewportState: [*c]const VkPipelineViewportStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineViewportStateCreateInfo),
    pRasterizationState: [*c]const VkPipelineRasterizationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineRasterizationStateCreateInfo),
    pMultisampleState: [*c]const VkPipelineMultisampleStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineMultisampleStateCreateInfo),
    pDepthStencilState: [*c]const VkPipelineDepthStencilStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDepthStencilStateCreateInfo),
    pColorBlendState: [*c]const VkPipelineColorBlendStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineColorBlendStateCreateInfo),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineLayoutCreateFlags = @import("std").mem.zeroes(VkPipelineLayoutCreateFlags),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSamplerCreateFlags = @import("std").mem.zeroes(VkSamplerCreateFlags),
    magFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    minFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    mipmapMode: VkSamplerMipmapMode = @import("std").mem.zeroes(VkSamplerMipmapMode),
    addressModeU: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeV: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    addressModeW: VkSamplerAddressMode = @import("std").mem.zeroes(VkSamplerAddressMode),
    mipLodBias: f32 = @import("std").mem.zeroes(f32),
    anisotropyEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxAnisotropy: f32 = @import("std").mem.zeroes(f32),
    compareEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    compareOp: VkCompareOp = @import("std").mem.zeroes(VkCompareOp),
    minLod: f32 = @import("std").mem.zeroes(f32),
    maxLod: f32 = @import("std").mem.zeroes(f32),
    borderColor: VkBorderColor = @import("std").mem.zeroes(VkBorderColor),
    unnormalizedCoordinates: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    srcBinding: u32 = @import("std").mem.zeroes(u32),
    srcArrayElement: u32 = @import("std").mem.zeroes(u32),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorPoolCreateFlags = @import("std").mem.zeroes(VkDescriptorPoolCreateFlags),
    maxSets: u32 = @import("std").mem.zeroes(u32),
    poolSizeCount: u32 = @import("std").mem.zeroes(u32),
    pPoolSizes: [*c]const VkDescriptorPoolSize = @import("std").mem.zeroes([*c]const VkDescriptorPoolSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorPool: VkDescriptorPool = @import("std").mem.zeroes(VkDescriptorPool),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    binding: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pImmutableSamplers: [*c]const VkSampler = @import("std").mem.zeroes([*c]const VkSampler),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorSetLayoutCreateFlags = @import("std").mem.zeroes(VkDescriptorSetLayoutCreateFlags),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindings: [*c]const VkDescriptorSetLayoutBinding = @import("std").mem.zeroes([*c]const VkDescriptorSetLayoutBinding),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dstSet: VkDescriptorSet = @import("std").mem.zeroes(VkDescriptorSet),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    pImageInfo: [*c]const VkDescriptorImageInfo = @import("std").mem.zeroes([*c]const VkDescriptorImageInfo),
    pBufferInfo: [*c]const VkDescriptorBufferInfo = @import("std").mem.zeroes([*c]const VkDescriptorBufferInfo),
    pTexelBufferView: [*c]const VkBufferView = @import("std").mem.zeroes([*c]const VkBufferView),
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFramebufferCreateFlags = @import("std").mem.zeroes(VkFramebufferCreateFlags),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layers: u32 = @import("std").mem.zeroes(u32),
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pResolveAttachments: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    pDepthStencilAttachment: [*c]const VkAttachmentReference = @import("std").mem.zeroes([*c]const VkAttachmentReference),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription = @import("std").mem.zeroes([*c]const VkAttachmentDescription),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription = @import("std").mem.zeroes([*c]const VkSubpassDescription),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency = @import("std").mem.zeroes([*c]const VkSubpassDependency),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandPoolCreateFlags = @import("std").mem.zeroes(VkCommandPoolCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandPool: VkCommandPool = @import("std").mem.zeroes(VkCommandPool),
    level: VkCommandBufferLevel = @import("std").mem.zeroes(VkCommandBufferLevel),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    occlusionQueryEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    queryFlags: VkQueryControlFlags = @import("std").mem.zeroes(VkQueryControlFlags),
    pipelineStatistics: VkQueryPipelineStatisticFlags = @import("std").mem.zeroes(VkQueryPipelineStatisticFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkCommandBufferUsageFlags = @import("std").mem.zeroes(VkCommandBufferUsageFlags),
    pInheritanceInfo: [*c]const VkCommandBufferInheritanceInfo = @import("std").mem.zeroes([*c]const VkCommandBufferInheritanceInfo),
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    mipLevel: u32 = @import("std").mem.zeroes(u32),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    depth: f32 = @import("std").mem.zeroes(f32),
    stencil: u32 = @import("std").mem.zeroes(u32),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    colorAttachment: u32 = @import("std").mem.zeroes(u32),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
    rect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    framebuffer: VkFramebuffer = @import("std").mem.zeroes(VkFramebuffer),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    clearValueCount: u32 = @import("std").mem.zeroes(u32),
    pClearValues: [*c]const VkClearValue = @import("std").mem.zeroes([*c]const VkClearValue),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    supportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    quadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    prefersDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresDedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryAllocateFlags = @import("std").mem.zeroes(VkMemoryAllocateFlags),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    deviceRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    commandBufferCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    signalSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    resourceDeviceIndex: u32 = @import("std").mem.zeroes(u32),
    memoryDeviceIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    splitInstanceBindRegionCount: u32 = @import("std").mem.zeroes(u32),
    pSplitInstanceBindRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    physicalDevices: [32]VkPhysicalDevice = @import("std").mem.zeroes([32]VkPhysicalDevice),
    subsetAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    physicalDeviceCount: u32 = @import("std").mem.zeroes(u32),
    pPhysicalDevices: [*c]const VkPhysicalDevice = @import("std").mem.zeroes([*c]const VkPhysicalDevice),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRequirements: VkSparseImageMemoryRequirements = @import("std").mem.zeroes(VkSparseImageMemoryRequirements),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    features: VkPhysicalDeviceFeatures = @import("std").mem.zeroes(VkPhysicalDeviceFeatures),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkPhysicalDeviceProperties = @import("std").mem.zeroes(VkPhysicalDeviceProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatProperties: VkFormatProperties = @import("std").mem.zeroes(VkFormatProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queueFamilyProperties: VkQueueFamilyProperties = @import("std").mem.zeroes(VkQueueFamilyProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryProperties: VkPhysicalDeviceMemoryProperties = @import("std").mem.zeroes(VkPhysicalDeviceMemoryProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkSparseImageFormatProperties = @import("std").mem.zeroes(VkSparseImageFormatProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    type: VkImageType = @import("std").mem.zeroes(VkImageType),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    tiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
    subpass: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentIndex: u32 = @import("std").mem.zeroes(u32),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aspectReferenceCount: u32 = @import("std").mem.zeroes(u32),
    pAspectReferences: [*c]const VkInputAttachmentAspectReference = @import("std").mem.zeroes([*c]const VkInputAttachmentAspectReference),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    domainOrigin: VkTessellationDomainOrigin = @import("std").mem.zeroes(VkTessellationDomainOrigin),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pViewOffsets: [*c]const i32 = @import("std").mem.zeroes([*c]const i32),
    correlationMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelationMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceQueueCreateFlags = @import("std").mem.zeroes(VkDeviceQueueCreateFlags),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    queueIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    protectedSubmit: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    ycbcrModel: VkSamplerYcbcrModelConversion = @import("std").mem.zeroes(VkSamplerYcbcrModelConversion),
    ycbcrRange: VkSamplerYcbcrRange = @import("std").mem.zeroes(VkSamplerYcbcrRange),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    xChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    yChromaOffset: VkChromaLocation = @import("std").mem.zeroes(VkChromaLocation),
    chromaFilter: VkFilter = @import("std").mem.zeroes(VkFilter),
    forceExplicitReconstruction: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conversion: VkSamplerYcbcrConversion = @import("std").mem.zeroes(VkSamplerYcbcrConversion),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    dstBinding: u32 = @import("std").mem.zeroes(u32),
    dstArrayElement: u32 = @import("std").mem.zeroes(u32),
    descriptorCount: u32 = @import("std").mem.zeroes(u32),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    offset: usize = @import("std").mem.zeroes(usize),
    stride: usize = @import("std").mem.zeroes(usize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDescriptorUpdateTemplateCreateFlags = @import("std").mem.zeroes(VkDescriptorUpdateTemplateCreateFlags),
    descriptorUpdateEntryCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorUpdateEntries: [*c]const VkDescriptorUpdateTemplateEntry = @import("std").mem.zeroes([*c]const VkDescriptorUpdateTemplateEntry),
    templateType: VkDescriptorUpdateTemplateType = @import("std").mem.zeroes(VkDescriptorUpdateTemplateType),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    externalMemoryFeatures: VkExternalMemoryFeatureFlags = @import("std").mem.zeroes(VkExternalMemoryFeatureFlags),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkBufferCreateFlags = @import("std").mem.zeroes(VkBufferCreateFlags),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    externalFenceFeatures: VkExternalFenceFeatureFlags = @import("std").mem.zeroes(VkExternalFenceFeatureFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalFenceHandleTypeFlags = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags = @import("std").mem.zeroes(VkExternalSemaphoreFeatureFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageInputOutput16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiview: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewGeometryShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewTessellationShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointersStorageBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    variablePointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    protectedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerYcbcrConversion: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDrawParameters: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    driverUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    deviceLUID: [8]u8 = @import("std").mem.zeroes([8]u8),
    deviceNodeMask: u32 = @import("std").mem.zeroes(u32),
    deviceLUIDValid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    subgroupSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    subgroupSupportedOperations: VkSubgroupFeatureFlags = @import("std").mem.zeroes(VkSubgroupFeatureFlags),
    subgroupQuadOperationsInAllStages: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pointClippingBehavior: VkPointClippingBehavior = @import("std").mem.zeroes(VkPointClippingBehavior),
    maxMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    maxMultiviewInstanceIndex: u32 = @import("std").mem.zeroes(u32),
    protectedNoFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerSetDescriptors: u32 = @import("std").mem.zeroes(u32),
    maxMemoryAllocationSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    samplerMirrorClampToEdge: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drawIndirectCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    samplerFilterMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputViewportIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderOutputLayer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupBroadcastDynamicId: VkBool32 = @import("std").mem.zeroes(VkBool32),
    major: u8 = @import("std").mem.zeroes(u8),
    minor: u8 = @import("std").mem.zeroes(u8),
    subminor: u8 = @import("std").mem.zeroes(u8),
    patch: u8 = @import("std").mem.zeroes(u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
    framebufferIntegerColorSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAttachmentDescriptionFlags = @import("std").mem.zeroes(VkAttachmentDescriptionFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    samples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    stencilLoadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    stencilStoreOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    initialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    finalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachment: u32 = @import("std").mem.zeroes(u32),
    layout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    aspectMask: VkImageAspectFlags = @import("std").mem.zeroes(VkImageAspectFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubpassDescriptionFlags = @import("std").mem.zeroes(VkSubpassDescriptionFlags),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    inputAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pInputAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pResolveAttachments: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    pDepthStencilAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    preserveAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pPreserveAttachments: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubpass: u32 = @import("std").mem.zeroes(u32),
    dstSubpass: u32 = @import("std").mem.zeroes(u32),
    srcStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    dstStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    srcAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dstAccessMask: VkAccessFlags = @import("std").mem.zeroes(VkAccessFlags),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    viewOffset: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderPassCreateFlags = @import("std").mem.zeroes(VkRenderPassCreateFlags),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkAttachmentDescription2 = @import("std").mem.zeroes([*c]const VkAttachmentDescription2),
    subpassCount: u32 = @import("std").mem.zeroes(u32),
    pSubpasses: [*c]const VkSubpassDescription2 = @import("std").mem.zeroes([*c]const VkSubpassDescription2),
    dependencyCount: u32 = @import("std").mem.zeroes(u32),
    pDependencies: [*c]const VkSubpassDependency2 = @import("std").mem.zeroes([*c]const VkSubpassDependency2),
    correlatedViewMaskCount: u32 = @import("std").mem.zeroes(u32),
    pCorrelatedViewMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    contents: VkSubpassContents = @import("std").mem.zeroes(VkSubpassContents),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformAndStorageBuffer8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storagePushConstant8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    driverID: VkDriverId = @import("std").mem.zeroes(VkDriverId),
    driverName: [256]u8 = @import("std").mem.zeroes([256]u8),
    driverInfo: [256]u8 = @import("std").mem.zeroes([256]u8),
    conformanceVersion: VkConformanceVersion = @import("std").mem.zeroes(VkConformanceVersion),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInt8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    denormBehaviorIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    roundingModeIndependence: VkShaderFloatControlsIndependence = @import("std").mem.zeroes(VkShaderFloatControlsIndependence),
    shaderSignedZeroInfNanPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSignedZeroInfNanPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormPreserveFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDenormFlushToZeroFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTEFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat16: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat32: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderRoundingModeRTZFloat64: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bindingCount: u32 = @import("std").mem.zeroes(u32),
    pBindingFlags: [*c]const VkDescriptorBindingFlags = @import("std").mem.zeroes([*c]const VkDescriptorBindingFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderInputAttachmentArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingSampledImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageImageUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingUpdateUnusedWhilePending: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingPartiallyBound: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingVariableDescriptorCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    runtimeDescriptorArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxUpdateAfterBindDescriptorsInAllPools: u32 = @import("std").mem.zeroes(u32),
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustBufferAccessUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    quadDivergentImplicitLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPerStageDescriptorUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    maxPerStageUpdateAfterBindResources: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSamplers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindSampledImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageImages: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInputAttachments: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorCounts: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVariableDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    stencilResolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    pDepthStencilResolveAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedDepthResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    supportedStencilResolveModes: VkResolveModeFlags = @import("std").mem.zeroes(VkResolveModeFlags),
    independentResolveNone: VkBool32 = @import("std").mem.zeroes(VkBool32),
    independentResolve: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    scalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stencilUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    reductionMode: VkSamplerReductionMode = @import("std").mem.zeroes(VkSamplerReductionMode),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterMinmaxSingleComponentFormats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterMinmaxImageComponentMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vulkanMemoryModel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelDeviceScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imagelessFramebuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    usage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewFormatCount: u32 = @import("std").mem.zeroes(u32),
    pViewFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentImageInfoCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentImageInfos: [*c]const VkFramebufferAttachmentImageInfo = @import("std").mem.zeroes([*c]const VkFramebufferAttachmentImageInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pAttachments: [*c]const VkImageView = @import("std").mem.zeroes([*c]const VkImageView),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    uniformBufferStandardLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupExtendedTypes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    separateDepthStencilLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stencilInitialLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    stencilFinalLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostQueryReset: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    timelineSemaphore: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTimelineSemaphoreValueDifference: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphoreType: VkSemaphoreType = @import("std").mem.zeroes(VkSemaphoreType),
    initialValue: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    signalSemaphoreValueCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSemaphoreWaitFlags = @import("std").mem.zeroes(VkSemaphoreWaitFlags),
    semaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    pValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureAddress: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxInlineUniformTotalSize: u32 = @import("std").mem.zeroes(u32),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkPipelineCreationFeedbackFlags = @import("std").mem.zeroes(VkPipelineCreationFeedbackFlags),
    duration: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPipelineCreationFeedback: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
    pipelineStageCreationFeedbackCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineStageCreationFeedbacks: [*c]VkPipelineCreationFeedback = @import("std").mem.zeroes([*c]VkPipelineCreationFeedback),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTerminateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    version: [256]u8 = @import("std").mem.zeroes([256]u8),
    purposes: VkToolPurposeFlags = @import("std").mem.zeroes(VkToolPurposeFlags),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    layer: [256]u8 = @import("std").mem.zeroes([256]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderDemoteToHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    privateData: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    privateDataSlotRequestCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPrivateDataSlotCreateFlags = @import("std").mem.zeroes(VkPrivateDataSlotCreateFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineCreationCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dependencyFlags: VkDependencyFlags = @import("std").mem.zeroes(VkDependencyFlags),
    memoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pMemoryBarriers: [*c]const VkMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkMemoryBarrier2),
    bufferMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkBufferMemoryBarrier2),
    imageMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pImageMemoryBarriers: [*c]const VkImageMemoryBarrier2 = @import("std").mem.zeroes([*c]const VkImageMemoryBarrier2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
    stageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    deviceIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    commandBuffer: VkCommandBuffer = @import("std").mem.zeroes(VkCommandBuffer),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSubmitFlags = @import("std").mem.zeroes(VkSubmitFlags),
    waitSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
    commandBufferInfoCount: u32 = @import("std").mem.zeroes(u32),
    pCommandBufferInfos: [*c]const VkCommandBufferSubmitInfo = @import("std").mem.zeroes([*c]const VkCommandBufferSubmitInfo),
    signalSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    synchronization2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderZeroInitializeWorkgroupMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustImageAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferCopy2 = @import("std").mem.zeroes([*c]const VkBufferCopy2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkBufferImageCopy2 = @import("std").mem.zeroes([*c]const VkBufferImageCopy2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffsets: [2]VkOffset3D = @import("std").mem.zeroes([2]VkOffset3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageBlit2 = @import("std").mem.zeroes([*c]const VkImageBlit2),
    filter: VkFilter = @import("std").mem.zeroes(VkFilter),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    srcOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    dstSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    dstOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    extent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageResolve2 = @import("std").mem.zeroes([*c]const VkImageResolve2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subgroupSizeControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeFullSubgroups: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    maxComputeWorkgroupSubgroups: u32 = @import("std").mem.zeroes(u32),
    requiredSubgroupSizeStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    requiredSubgroupSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inlineUniformBlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxInlineUniformBlockSize: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInlineUniformBlockBindings: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureCompressionASTC_HDR: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    resolveMode: VkResolveModeFlagBits = @import("std").mem.zeroes(VkResolveModeFlagBits),
    resolveImageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    resolveImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    loadOp: VkAttachmentLoadOp = @import("std").mem.zeroes(VkAttachmentLoadOp),
    storeOp: VkAttachmentStoreOp = @import("std").mem.zeroes(VkAttachmentStoreOp),
    clearValue: VkClearValue = @import("std").mem.zeroes(VkClearValue),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachments: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pDepthAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    pStencilAttachment: [*c]const VkRenderingAttachmentInfo = @import("std").mem.zeroes([*c]const VkRenderingAttachmentInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkRenderingFlags = @import("std").mem.zeroes(VkRenderingFlags),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerDotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    integerDotProduct8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    optimalTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    bufferFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance4: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkBufferCreateInfo = @import("std").mem.zeroes([*c]const VkBufferCreateInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    planeAspect: VkImageAspectFlagBits = @import("std").mem.zeroes(VkImageAspectFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    globalPriorityQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotateClustered: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloatControls2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderExpectAssume: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    smoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledRectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledBresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledSmoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateZeroDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    indexTypeUint8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRenderingLocalRead: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance5: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maintenance6: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineProtectedAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hostImageCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pushDescriptor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    lineSubPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
    supportsNonZeroFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxPushDescriptors: u32 = @import("std").mem.zeroes(u32),
    dynamicRenderingLocalReadDepthStencilAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicRenderingLocalReadMultisampledAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthStencilSwizzleOneSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonModePointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictSinglePixelWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blockTexelViewCompatibleMultipleLayers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxCombinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    fragmentShadingRateClampCombinerInputs: VkBool32 = @import("std").mem.zeroes(VkBool32),
    defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessImages: VkPipelineRobustnessImageBehavior = @import("std").mem.zeroes(VkPipelineRobustnessImageBehavior),
    copySrcLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopySrcLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    copyDstLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopyDstLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    optimalTilingLayoutUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    identicalMemoryTypeRequirements: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    globalPriority: VkQueueGlobalPriority = @import("std").mem.zeroes(VkQueueGlobalPriority),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    globalPriorityQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    priorityCount: u32 = @import("std").mem.zeroes(u32),
    priorities: [16]VkQueueGlobalPriority = @import("std").mem.zeroes([16]VkQueueGlobalPriority),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupRotate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSubgroupRotateClustered: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloatControls2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderExpectAssume: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    smoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledRectangularLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledBresenhamLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stippledSmoothLines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    lineSubPixelPrecisionBits: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lineRasterizationMode: VkLineRasterizationMode = @import("std").mem.zeroes(VkLineRasterizationMode),
    stippledLineEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lineStippleFactor: u32 = @import("std").mem.zeroes(u32),
    lineStipplePattern: u16 = @import("std").mem.zeroes(u16),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
    supportsNonZeroFirstInstance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    binding: u32 = @import("std").mem.zeroes(u32),
    divisor: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexBindingDivisorCount: u32 = @import("std").mem.zeroes(u32),
    pVertexBindingDivisors: [*c]const VkVertexInputBindingDivisorDescription = @import("std").mem.zeroes([*c]const VkVertexInputBindingDivisorDescription),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexAttributeInstanceRateDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    vertexAttributeInstanceRateZeroDivisor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexTypeUint8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryMapFlags = @import("std").mem.zeroes(VkMemoryMapFlags),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkMemoryUnmapFlags = @import("std").mem.zeroes(VkMemoryUnmapFlags),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance5: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthStencilSwizzleOneSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    polygonModePointSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictSinglePixelWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonStrictWideLinesUseParallelogram: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewMask: u32 = @import("std").mem.zeroes(u32),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentFormats: [*c]const VkFormat = @import("std").mem.zeroes([*c]const VkFormat),
    depthAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    stencilAttachmentFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSubresource: VkImageSubresource = @import("std").mem.zeroes(VkImageSubresource),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkImageCreateInfo = @import("std").mem.zeroes([*c]const VkImageCreateInfo),
    pSubresource: [*c]const VkImageSubresource2 = @import("std").mem.zeroes([*c]const VkImageSubresource2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subresourceLayout: VkSubresourceLayout = @import("std").mem.zeroes(VkSubresourceLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags2 = @import("std").mem.zeroes(VkPipelineCreateFlags2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkBufferUsageFlags2 = @import("std").mem.zeroes(VkBufferUsageFlags2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPushDescriptors: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingLocalRead: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentLocations: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentInputIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pDepthInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pStencilInputAttachmentIndex: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance6: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    blockTexelViewCompatibleMultipleLayers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxCombinedImageSamplerDescriptorCount: u32 = @import("std").mem.zeroes(u32),
    fragmentShadingRateClampCombinerInputs: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pResult: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    descriptorSetCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorSets: [*c]const VkDescriptorSet = @import("std").mem.zeroes([*c]const VkDescriptorSet),
    dynamicOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pDynamicOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    offset: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    descriptorWriteCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorWrites: [*c]const VkWriteDescriptorSet = @import("std").mem.zeroes([*c]const VkWriteDescriptorSet),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorUpdateTemplate: VkDescriptorUpdateTemplate = @import("std").mem.zeroes(VkDescriptorUpdateTemplate),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineProtectedAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    defaultRobustnessImages: VkPipelineRobustnessImageBehavior = @import("std").mem.zeroes(VkPipelineRobustnessImageBehavior),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    storageBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    uniformBuffers: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    vertexInputs: VkPipelineRobustnessBufferBehavior = @import("std").mem.zeroes(VkPipelineRobustnessBufferBehavior),
    images: VkPipelineRobustnessImageBehavior = @import("std").mem.zeroes(VkPipelineRobustnessImageBehavior),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hostImageCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    copySrcLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopySrcLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    copyDstLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pCopyDstLayouts: [*c]VkImageLayout = @import("std").mem.zeroes([*c]VkImageLayout),
    optimalTilingLayoutUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    identicalMemoryTypeRequirements: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryRowLength: u32 = @import("std").mem.zeroes(u32),
    memoryImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlags = @import("std").mem.zeroes(VkHostImageCopyFlags),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkMemoryToImageCopy = @import("std").mem.zeroes([*c]const VkMemoryToImageCopy),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlags = @import("std").mem.zeroes(VkHostImageCopyFlags),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageToMemoryCopy = @import("std").mem.zeroes([*c]const VkImageToMemoryCopy),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHostImageCopyFlags = @import("std").mem.zeroes(VkHostImageCopyFlags),
    srcImage: VkImage = @import("std").mem.zeroes(VkImage),
    srcImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    dstImage: VkImage = @import("std").mem.zeroes(VkImage),
    dstImageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkImageCopy2 = @import("std").mem.zeroes([*c]const VkImageCopy2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    oldLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    newLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    subresourceRange: VkImageSubresourceRange = @import("std").mem.zeroes(VkImageSubresourceRange),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimalDeviceAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    identicalMemoryLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    colorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkSwapchainCreateFlagsKHR = @import("std").mem.zeroes(VkSwapchainCreateFlagsKHR),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    imageColorSpace: VkColorSpaceKHR = @import("std").mem.zeroes(VkColorSpaceKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    imageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    imageSharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    preTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    compositeAlpha: VkCompositeAlphaFlagBitsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagBitsKHR),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
    clipped: VkBool32 = @import("std").mem.zeroes(VkBool32),
    oldSwapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphores: [*c]const VkSemaphore = @import("std").mem.zeroes([*c]const VkSemaphore),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pSwapchains: [*c]const VkSwapchainKHR = @import("std").mem.zeroes([*c]const VkSwapchainKHR),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pResults: [*c]VkResult = @import("std").mem.zeroes([*c]VkResult),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    deviceMask: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMask: [32]u32 = @import("std").mem.zeroes([32]u32),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceMasks: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    mode: VkDeviceGroupPresentModeFlagBitsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagBitsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    modes: VkDeviceGroupPresentModeFlagsKHR = @import("std").mem.zeroes(VkDeviceGroupPresentModeFlagsKHR),
    visibleRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    refreshRate: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplayModeCreateFlagsKHR = @import("std").mem.zeroes(VkDisplayModeCreateFlagsKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    parameters: VkDisplayModeParametersKHR = @import("std").mem.zeroes(VkDisplayModeParametersKHR),
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagsKHR),
    minSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxSrcPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxSrcExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    maxDstPosition: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    minDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDstExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    currentDisplay: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    currentStackIndex: u32 = @import("std").mem.zeroes(u32),
    display: VkDisplayKHR = @import("std").mem.zeroes(VkDisplayKHR),
    displayName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    physicalDimensions: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    physicalResolution: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    planeReorderPossible: VkBool32 = @import("std").mem.zeroes(VkBool32),
    persistentContent: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDisplaySurfaceCreateFlagsKHR = @import("std").mem.zeroes(VkDisplaySurfaceCreateFlagsKHR),
    displayMode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
    planeStackIndex: u32 = @import("std").mem.zeroes(u32),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    globalAlpha: f32 = @import("std").mem.zeroes(f32),
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR = @import("std").mem.zeroes(VkDisplayPlaneAlphaFlagBitsKHR),
    imageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    dstRect: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    persistent: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queryResultStatusSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoCodecOperations: VkVideoCodecOperationFlagsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoCodecOperation: VkVideoCodecOperationFlagBitsKHR = @import("std").mem.zeroes(VkVideoCodecOperationFlagBitsKHR),
    chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR = @import("std").mem.zeroes(VkVideoChromaSubsamplingFlagsKHR),
    lumaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
    chromaBitDepth: VkVideoComponentBitDepthFlagsKHR = @import("std").mem.zeroes(VkVideoComponentBitDepthFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    profileCount: u32 = @import("std").mem.zeroes(u32),
    pProfiles: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoCapabilityFlagsKHR),
    minBitstreamBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    minBitstreamBufferSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pictureAccessGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    stdHeaderVersion: VkExtensionProperties = @import("std").mem.zeroes(VkExtensionProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageUsage: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    componentMapping: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    imageCreateFlags: VkImageCreateFlags = @import("std").mem.zeroes(VkImageCreateFlags),
    imageType: VkImageType = @import("std").mem.zeroes(VkImageType),
    imageTiling: VkImageTiling = @import("std").mem.zeroes(VkImageTiling),
    imageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    codedOffset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    codedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    baseArrayLayer: u32 = @import("std").mem.zeroes(u32),
    imageViewBinding: VkImageView = @import("std").mem.zeroes(VkImageView),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    slotIndex: i32 = @import("std").mem.zeroes(i32),
    pPictureResource: [*c]const VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoPictureResourceInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memoryRequirements: VkMemoryRequirements = @import("std").mem.zeroes(VkMemoryRequirements),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memoryBindIndex: u32 = @import("std").mem.zeroes(u32),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    memorySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    flags: VkVideoSessionCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionCreateFlagsKHR),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    pictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxCodedExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    referencePictureFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxDpbSlots: u32 = @import("std").mem.zeroes(u32),
    maxActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    pStdHeaderVersion: [*c]const VkExtensionProperties = @import("std").mem.zeroes([*c]const VkExtensionProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoSessionParametersCreateFlagsKHR = @import("std").mem.zeroes(VkVideoSessionParametersCreateFlagsKHR),
    videoSessionParametersTemplate: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    updateSequenceCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoBeginCodingFlagsKHR = @import("std").mem.zeroes(VkVideoBeginCodingFlagsKHR),
    videoSession: VkVideoSessionKHR = @import("std").mem.zeroes(VkVideoSessionKHR),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEndCodingFlagsKHR = @import("std").mem.zeroes(VkVideoEndCodingFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoCodingControlFlagsKHR = @import("std").mem.zeroes(VkVideoCodingControlFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoDecodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeCapabilityFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoDecodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeUsageFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoDecodeFlagsKHR = @import("std").mem.zeroes(VkVideoDecodeFlagsKHR),
    srcBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    srcBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH264CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    maxSliceCount: u32 = @import("std").mem.zeroes(u32),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264StdFlagsKHR),
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredStdEntropyCodingModeFlag: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264SessionParametersAddInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceHeader: ?*const StdVideoEncodeH264SliceHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH264SliceHeader),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceEntries: [*c]const VkVideoEncodeH264NaluSliceInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH264NaluSliceInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264PictureInfo),
    generatePrefixNalu: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH264ReferenceInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH264RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH264RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    temporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH264QpKHR = @import("std").mem.zeroes(VkVideoEncodeH264QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH264FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH264FrameSizeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeH265CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CapabilityFlagsKHR),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
    maxSliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    maxTiles: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CtbSizeFlagsKHR),
    transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265TransformBlockSizeFlagsKHR),
    maxPPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBPictureL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    expectDyadicTemporalSubLayerPattern: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: i32 = @import("std").mem.zeroes(i32),
    maxQp: i32 = @import("std").mem.zeroes(i32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265StdFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevelIdc: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
    qpI: i32 = @import("std").mem.zeroes(i32),
    qpP: i32 = @import("std").mem.zeroes(i32),
    qpB: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredIdrPeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredSubLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    preferredMaxL0ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxL1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoEncodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265SessionParametersAddInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    writeStdVPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdSPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    writeStdPPS: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdVPSId: u32 = @import("std").mem.zeroes(u32),
    stdSPSId: u32 = @import("std").mem.zeroes(u32),
    stdPPSId: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasStdVPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdSPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasStdPPSOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    constantQp: i32 = @import("std").mem.zeroes(i32),
    pStdSliceSegmentHeader: ?*const StdVideoEncodeH265SliceSegmentHeader = @import("std").mem.zeroes(?*const StdVideoEncodeH265SliceSegmentHeader),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    naluSliceSegmentEntryCount: u32 = @import("std").mem.zeroes(u32),
    pNaluSliceSegmentEntries: [*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeH265NaluSliceSegmentInfoKHR),
    pStdPictureInfo: ?*const StdVideoEncodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265PictureInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeH265ReferenceInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeH265RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    idrPeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBFrameCount: u32 = @import("std").mem.zeroes(u32),
    subLayerCount: u32 = @import("std").mem.zeroes(u32),
    frameISize: u32 = @import("std").mem.zeroes(u32),
    framePSize: u32 = @import("std").mem.zeroes(u32),
    frameBSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxQp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQp: VkVideoEncodeH265QpKHR = @import("std").mem.zeroes(VkVideoEncodeH265QpKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeH265FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeH265FrameSizeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingI: u32 = @import("std").mem.zeroes(u32),
    gopRemainingP: u32 = @import("std").mem.zeroes(u32),
    gopRemainingB: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH264ProfileIdc = @import("std").mem.zeroes(StdVideoH264ProfileIdc),
    pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR = @import("std").mem.zeroes(VkVideoDecodeH264PictureLayoutFlagBitsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH264LevelIdc = @import("std").mem.zeroes(StdVideoH264LevelIdc),
    fieldOffsetGranularity: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH264SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH264SessionParametersAddInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH264PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264PictureInfo),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
    pSliceOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH264ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH264ReferenceInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    flags: VkSemaphoreImportFlags = @import("std").mem.zeroes(VkSemaphoreImportFlags),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    offset: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    extent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    layer: u32 = @import("std").mem.zeroes(u32),
    rectangleCount: u32 = @import("std").mem.zeroes(u32),
    pRectangles: [*c]const VkRectLayerKHR = @import("std").mem.zeroes([*c]const VkRectLayerKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkPresentRegionKHR = @import("std").mem.zeroes([*c]const VkPresentRegionKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sharedPresentSupportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    flags: VkFenceImportFlags = @import("std").mem.zeroes(VkFenceImportFlags),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    fd: c_int = @import("std").mem.zeroes(c_int),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    performanceCounterQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
    performanceCounterMultipleQueryPools: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    allowCommandBufferQueryCopies: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    unit: VkPerformanceCounterUnitKHR = @import("std").mem.zeroes(VkPerformanceCounterUnitKHR),
    scope: VkPerformanceCounterScopeKHR = @import("std").mem.zeroes(VkPerformanceCounterScopeKHR),
    storage: VkPerformanceCounterStorageKHR = @import("std").mem.zeroes(VkPerformanceCounterStorageKHR),
    uuid: [16]u8 = @import("std").mem.zeroes([16]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkPerformanceCounterDescriptionFlagsKHR = @import("std").mem.zeroes(VkPerformanceCounterDescriptionFlagsKHR),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    category: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    counterIndexCount: u32 = @import("std").mem.zeroes(u32),
    pCounterIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkAcquireProfilingLockFlagsKHR = @import("std").mem.zeroes(VkAcquireProfilingLockFlagsKHR),
    timeout: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    counterPassIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surface: VkSurfaceKHR = @import("std").mem.zeroes(VkSurfaceKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceCapabilities: VkSurfaceCapabilitiesKHR = @import("std").mem.zeroes(VkSurfaceCapabilitiesKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    surfaceFormat: VkSurfaceFormatKHR = @import("std").mem.zeroes(VkSurfaceFormatKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayProperties: VkDisplayPropertiesKHR = @import("std").mem.zeroes(VkDisplayPropertiesKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayPlaneProperties: VkDisplayPlanePropertiesKHR = @import("std").mem.zeroes(VkDisplayPlanePropertiesKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    displayModeProperties: VkDisplayModePropertiesKHR = @import("std").mem.zeroes(VkDisplayModePropertiesKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDisplayModeKHR = @import("std").mem.zeroes(VkDisplayModeKHR),
    planeIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    capabilities: VkDisplayPlaneCapabilitiesKHR = @import("std").mem.zeroes(VkDisplayPlaneCapabilitiesKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBFloat16Type: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBFloat16DotProduct: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBFloat16CooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderDeviceClock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfileIdc: StdVideoH265ProfileIdc = @import("std").mem.zeroes(StdVideoH265ProfileIdc),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevelIdc: StdVideoH265LevelIdc = @import("std").mem.zeroes(StdVideoH265LevelIdc),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdVPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdVPSs: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    stdSPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdSPSs: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    stdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pStdPPSs: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxStdVPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdSPSCount: u32 = @import("std").mem.zeroes(u32),
    maxStdPPSCount: u32 = @import("std").mem.zeroes(u32),
    pParametersAddInfo: [*c]const VkVideoDecodeH265SessionParametersAddInfoKHR = @import("std").mem.zeroes([*c]const VkVideoDecodeH265SessionParametersAddInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeH265PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265PictureInfo),
    sliceSegmentCount: u32 = @import("std").mem.zeroes(u32),
    pSliceSegmentOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeH265ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeH265ReferenceInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pFragmentShadingRateAttachment: [*c]const VkAttachmentReference2 = @import("std").mem.zeroes([*c]const VkAttachmentReference2),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    attachmentFragmentShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    primitiveFragmentShadingRateWithMultipleViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
    layeredShadingRateAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateNonTrivialCombinerOps: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateCoverageSamples: u32 = @import("std").mem.zeroes(u32),
    maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    fragmentShadingRateWithShaderDepthStencilWrites: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithShaderSampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithConservativeRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithFragmentShaderInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateWithCustomSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShadingRateStrictMultiplyCombiner: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    fragmentSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    shadingRateAttachmentTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderQuadControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    supportsProtected: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentWait: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineExecutableInfo: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    subgroupSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    executableIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    format: VkPipelineExecutableStatisticFormatKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticFormatKHR),
    value: VkPipelineExecutableStatisticValueKHR = @import("std").mem.zeroes(VkPipelineExecutableStatisticValueKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    name: [256]u8 = @import("std").mem.zeroes([256]u8),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    isText: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    libraryCount: u32 = @import("std").mem.zeroes(u32),
    pLibraries: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentIds: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentId: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFlagsKHR),
    dstBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    dstBufferOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    dstBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcPictureResource: VkVideoPictureResourceInfoKHR = @import("std").mem.zeroes(VkVideoPictureResourceInfoKHR),
    pSetupReferenceSlot: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    referenceSlotCount: u32 = @import("std").mem.zeroes(u32),
    pReferenceSlots: [*c]const VkVideoReferenceSlotInfoKHR = @import("std").mem.zeroes([*c]const VkVideoReferenceSlotInfoKHR),
    precedingExternallyEncodedBytes: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeCapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeCapabilityFlagsKHR),
    rateControlModes: VkVideoEncodeRateControlModeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagsKHR),
    maxRateControlLayers: u32 = @import("std").mem.zeroes(u32),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    maxQualityLevels: u32 = @import("std").mem.zeroes(u32),
    encodeInputPictureGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeFeedbackFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoUsageHints: VkVideoEncodeUsageFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeUsageFlagsKHR),
    videoContentHints: VkVideoEncodeContentFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeContentFlagsKHR),
    tuningMode: VkVideoEncodeTuningModeKHR = @import("std").mem.zeroes(VkVideoEncodeTuningModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    averageBitrate: u64 = @import("std").mem.zeroes(u64),
    maxBitrate: u64 = @import("std").mem.zeroes(u64),
    frameRateNumerator: u32 = @import("std").mem.zeroes(u32),
    frameRateDenominator: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeRateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlFlagsKHR),
    rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    layerCount: u32 = @import("std").mem.zeroes(u32),
    pLayers: [*c]const VkVideoEncodeRateControlLayerInfoKHR = @import("std").mem.zeroes([*c]const VkVideoEncodeRateControlLayerInfoKHR),
    virtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
    initialVirtualBufferSizeInMs: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVideoProfile: [*c]const VkVideoProfileInfoKHR = @import("std").mem.zeroes([*c]const VkVideoProfileInfoKHR),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeRateControlModeFlagBitsKHR),
    preferredRateControlLayerCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    qualityLevel: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    videoSessionParameters: VkVideoSessionParametersKHR = @import("std").mem.zeroes(VkVideoSessionParametersKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasOverrides: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderBarycentric: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    triStripVertexOrderIndependentOfProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSubgroupUniformControlFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    workgroupMemoryExplicitLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout8BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    workgroupMemoryExplicitLayout16BitAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    raygenShaderRecordAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    raygenShaderRecordSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    missShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    missShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    hitShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    hitShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    callableShaderBindingTableSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    callableShaderBindingTableStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderMaximalReconvergence: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentId2Supported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentIds: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentId2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentWait2Supported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentWait2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentId: u64 = @import("std").mem.zeroes(u64),
    timeout: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPositionFetch: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinaries: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinaryInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryInternalCacheControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryPrefersInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryPrecompiledInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pipelineBinaryCompressedData: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disableInternalCache: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    keySize: u32 = @import("std").mem.zeroes(u32),
    key: [32]u8 = @import("std").mem.zeroes([32]u8),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    binaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaryKeys: [*c]const VkPipelineBinaryKeyKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKeyKHR),
    pPipelineBinaryData: [*c]const VkPipelineBinaryDataKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryDataKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pKeysAndDataInfo: [*c]const VkPipelineBinaryKeysAndDataKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKeysAndDataKHR),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    pPipelineCreateInfo: [*c]const VkPipelineCreateInfoKHR = @import("std").mem.zeroes([*c]const VkPipelineCreateInfoKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    binaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaries: [*c]const VkPipelineBinaryKHR = @import("std").mem.zeroes([*c]const VkPipelineBinaryKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineBinary: VkPipelineBinaryKHR = @import("std").mem.zeroes(VkPipelineBinaryKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBinaryCount: u32 = @import("std").mem.zeroes(u32),
    pPipelineBinaries: [*c]VkPipelineBinaryKHR = @import("std").mem.zeroes([*c]VkPipelineBinaryKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMode: VkPresentModeKHR = @import("std").mem.zeroes(VkPresentModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedPresentScaling: VkPresentScalingFlagsKHR = @import("std").mem.zeroes(VkPresentScalingFlagsKHR),
    supportedPresentGravityX: VkPresentGravityFlagsKHR = @import("std").mem.zeroes(VkPresentGravityFlagsKHR),
    supportedPresentGravityY: VkPresentGravityFlagsKHR = @import("std").mem.zeroes(VkPresentGravityFlagsKHR),
    minScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxScaledImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    swapchainMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pFences: [*c]const VkFence = @import("std").mem.zeroes([*c]const VkFence),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]const VkPresentModeKHR = @import("std").mem.zeroes([*c]const VkPresentModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    scalingBehavior: VkPresentScalingFlagsKHR = @import("std").mem.zeroes(VkPresentScalingFlagsKHR),
    presentGravityX: VkPresentGravityFlagsKHR = @import("std").mem.zeroes(VkPresentGravityFlagsKHR),
    presentGravityY: VkPresentGravityFlagsKHR = @import("std").mem.zeroes(VkPresentGravityFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchain: VkSwapchainKHR = @import("std").mem.zeroes(VkSwapchainKHR),
    imageIndexCount: u32 = @import("std").mem.zeroes(u32),
    pImageIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    BType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    CType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    ResultType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    saturatingAccumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scope: VkScopeKHR = @import("std").mem.zeroes(VkScopeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    computeDerivativeGroupQuads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    computeDerivativeGroupLinear: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    meshAndTaskShaderDerivatives: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    filmGrainSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSequenceHeader: ?*const StdVideoAV1SequenceHeader = @import("std").mem.zeroes(?*const StdVideoAV1SequenceHeader),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeAV1PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1PictureInfo),
    referenceNameSlotIndices: [7]i32 = @import("std").mem.zeroes([7]i32),
    frameHeaderOffset: u32 = @import("std").mem.zeroes(u32),
    tileCount: u32 = @import("std").mem.zeroes(u32),
    pTileOffsets: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pTileSizes: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoDecodeAV1ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoDecodeAV1ReferenceInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoEncodeAV1: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkVideoEncodeAV1CapabilityFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1CapabilityFlagsKHR),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
    codedPictureAlignment: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxTiles: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minTileSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxTileSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    superblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1SuperblockSizeFlagsKHR),
    maxSingleReferenceCount: u32 = @import("std").mem.zeroes(u32),
    singleReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    maxUnidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxUnidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    unidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    maxBidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    maxBidirectionalCompoundGroup2ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    bidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    maxTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    maxSpatialLayerCount: u32 = @import("std").mem.zeroes(u32),
    maxOperatingPoints: u32 = @import("std").mem.zeroes(u32),
    minQIndex: u32 = @import("std").mem.zeroes(u32),
    maxQIndex: u32 = @import("std").mem.zeroes(u32),
    prefersGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    requiresGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    stdSyntaxFlags: VkVideoEncodeAV1StdFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1StdFlagsKHR),
    intraQIndex: u32 = @import("std").mem.zeroes(u32),
    predictiveQIndex: u32 = @import("std").mem.zeroes(u32),
    bipredictiveQIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    preferredRateControlFlags: VkVideoEncodeAV1RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1RateControlFlagsKHR),
    preferredGopFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredKeyFramePeriod: u32 = @import("std").mem.zeroes(u32),
    preferredConsecutiveBipredictiveFrameCount: u32 = @import("std").mem.zeroes(u32),
    preferredTemporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    preferredConstantQIndex: VkVideoEncodeAV1QIndexKHR = @import("std").mem.zeroes(VkVideoEncodeAV1QIndexKHR),
    preferredMaxSingleReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredSingleReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    preferredMaxUnidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxUnidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredUnidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    preferredMaxBidirectionalCompoundReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxBidirectionalCompoundGroup1ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredMaxBidirectionalCompoundGroup2ReferenceCount: u32 = @import("std").mem.zeroes(u32),
    preferredBidirectionalCompoundReferenceNameMask: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMaxLevel: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxLevel: StdVideoAV1Level = @import("std").mem.zeroes(StdVideoAV1Level),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSequenceHeader: ?*const StdVideoAV1SequenceHeader = @import("std").mem.zeroes(?*const StdVideoAV1SequenceHeader),
    pStdDecoderModelInfo: [*c]const StdVideoEncodeAV1DecoderModelInfo = @import("std").mem.zeroes([*c]const StdVideoEncodeAV1DecoderModelInfo),
    stdOperatingPointCount: u32 = @import("std").mem.zeroes(u32),
    pStdOperatingPoints: ?*const StdVideoEncodeAV1OperatingPointInfo = @import("std").mem.zeroes(?*const StdVideoEncodeAV1OperatingPointInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    predictionMode: VkVideoEncodeAV1PredictionModeKHR = @import("std").mem.zeroes(VkVideoEncodeAV1PredictionModeKHR),
    rateControlGroup: VkVideoEncodeAV1RateControlGroupKHR = @import("std").mem.zeroes(VkVideoEncodeAV1RateControlGroupKHR),
    constantQIndex: u32 = @import("std").mem.zeroes(u32),
    pStdPictureInfo: ?*const StdVideoEncodeAV1PictureInfo = @import("std").mem.zeroes(?*const StdVideoEncodeAV1PictureInfo),
    referenceNameSlotIndices: [7]i32 = @import("std").mem.zeroes([7]i32),
    primaryReferenceCdfOnly: VkBool32 = @import("std").mem.zeroes(VkBool32),
    generateObuExtensionHeader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdReferenceInfo: ?*const StdVideoEncodeAV1ReferenceInfo = @import("std").mem.zeroes(?*const StdVideoEncodeAV1ReferenceInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfile: StdVideoAV1Profile = @import("std").mem.zeroes(StdVideoAV1Profile),
    intraFrameSize: u32 = @import("std").mem.zeroes(u32),
    predictiveFrameSize: u32 = @import("std").mem.zeroes(u32),
    bipredictiveFrameSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useGopRemainingFrames: VkBool32 = @import("std").mem.zeroes(VkBool32),
    gopRemainingIntra: u32 = @import("std").mem.zeroes(u32),
    gopRemainingPredictive: u32 = @import("std").mem.zeroes(u32),
    gopRemainingBipredictive: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkVideoEncodeAV1RateControlFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1RateControlFlagsKHR),
    gopFrameCount: u32 = @import("std").mem.zeroes(u32),
    keyFramePeriod: u32 = @import("std").mem.zeroes(u32),
    consecutiveBipredictiveFrameCount: u32 = @import("std").mem.zeroes(u32),
    temporalLayerCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    useMinQIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minQIndex: VkVideoEncodeAV1QIndexKHR = @import("std").mem.zeroes(VkVideoEncodeAV1QIndexKHR),
    useMaxQIndex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxQIndex: VkVideoEncodeAV1QIndexKHR = @import("std").mem.zeroes(VkVideoEncodeAV1QIndexKHR),
    useMaxFrameSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxFrameSize: VkVideoEncodeAV1FrameSizeKHR = @import("std").mem.zeroes(VkVideoEncodeAV1FrameSizeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoDecodeVP9: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stdProfile: StdVideoVP9Profile = @import("std").mem.zeroes(StdVideoVP9Profile),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxLevel: StdVideoVP9Level = @import("std").mem.zeroes(StdVideoVP9Level),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdPictureInfo: ?*const StdVideoDecodeVP9PictureInfo = @import("std").mem.zeroes(?*const StdVideoDecodeVP9PictureInfo),
    referenceNameSlotIndices: [3]i32 = @import("std").mem.zeroes([3]i32),
    uncompressedHeaderOffset: u32 = @import("std").mem.zeroes(u32),
    compressedHeaderOffset: u32 = @import("std").mem.zeroes(u32),
    tilesOffset: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoMaintenance1: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queryPool: VkQueryPool = @import("std").mem.zeroes(VkQueryPool),
    firstQuery: u32 = @import("std").mem.zeroes(u32),
    queryCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    unifiedImageLayouts: VkBool32 = @import("std").mem.zeroes(VkBool32),
    unifiedImageLayoutsVideo: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    feedbackLoopEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timeDomain: VkTimeDomainKHR = @import("std").mem.zeroes(VkTimeDomainKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    firstSet: u32 = @import("std").mem.zeroes(u32),
    setCount: u32 = @import("std").mem.zeroes(u32),
    pBufferIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    pOffsets: [*c]const VkDeviceSize = @import("std").mem.zeroes([*c]const VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    set: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    intraRefreshModes: VkVideoEncodeIntraRefreshModeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeIntraRefreshModeFlagsKHR),
    maxIntraRefreshCycleDuration: u32 = @import("std").mem.zeroes(u32),
    maxIntraRefreshActiveReferencePictures: u32 = @import("std").mem.zeroes(u32),
    partitionIndependentIntraRefreshRegions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nonRectangularIntraRefreshRegions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    intraRefreshMode: VkVideoEncodeIntraRefreshModeFlagBitsKHR = @import("std").mem.zeroes(VkVideoEncodeIntraRefreshModeFlagBitsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    intraRefreshCycleDuration: u32 = @import("std").mem.zeroes(u32),
    intraRefreshIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dirtyIntraRefreshRegions: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoEncodeIntraRefresh: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxQuantizationMapExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    quantizationMapTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    quantizationMap: VkImageView = @import("std").mem.zeroes(VkImageView),
    quantizationMapExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    quantizationMapTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoEncodeQuantizationMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minQpDelta: i32 = @import("std").mem.zeroes(i32),
    maxQpDelta: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minQpDelta: i32 = @import("std").mem.zeroes(i32),
    maxQpDelta: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    compatibleCtbSizes: VkVideoEncodeH265CtbSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeH265CtbSizeFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minQIndexDelta: i32 = @import("std").mem.zeroes(i32),
    maxQIndexDelta: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    compatibleSuperblockSizes: VkVideoEncodeAV1SuperblockSizeFlagsKHR = @import("std").mem.zeroes(VkVideoEncodeAV1SuperblockSizeFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderRelaxedExtendedInstruction: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance7: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustFragmentShadingRateAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    separateDepthStencilAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxDescriptorSetTotalUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetTotalStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetTotalBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalUniformBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalStorageBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindTotalBuffersDynamic: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    layeredAPI: VkPhysicalDeviceLayeredApiKHR = @import("std").mem.zeroes(VkPhysicalDeviceLayeredApiKHR),
    deviceName: [256]u8 = @import("std").mem.zeroes([256]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    layeredApiCount: u32 = @import("std").mem.zeroes(u32),
    pLayeredApis: [*c]VkPhysicalDeviceLayeredApiPropertiesKHR = @import("std").mem.zeroes([*c]VkPhysicalDeviceLayeredApiPropertiesKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    properties: VkPhysicalDeviceProperties2 = @import("std").mem.zeroes(VkPhysicalDeviceProperties2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcAccessMask3: VkAccessFlags3KHR = @import("std").mem.zeroes(VkAccessFlags3KHR),
    dstAccessMask3: VkAccessFlags3KHR = @import("std").mem.zeroes(VkAccessFlags3KHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maintenance9: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    image2DViewOf3DSparse: VkBool32 = @import("std").mem.zeroes(VkBool32),
    defaultVertexAttributeValue: VkDefaultVertexAttributeValueKHR = @import("std").mem.zeroes(VkDefaultVertexAttributeValueKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimalImageTransferToQueueFamilies: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    videoMaintenance2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSPS: ?*const StdVideoH264SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH264SequenceParameterSet),
    pStdPPS: ?*const StdVideoH264PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH264PictureParameterSet),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdVPS: ?*const StdVideoH265VideoParameterSet = @import("std").mem.zeroes(?*const StdVideoH265VideoParameterSet),
    pStdSPS: ?*const StdVideoH265SequenceParameterSet = @import("std").mem.zeroes(?*const StdVideoH265SequenceParameterSet),
    pStdPPS: ?*const StdVideoH265PictureParameterSet = @import("std").mem.zeroes(?*const StdVideoH265PictureParameterSet),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pStdSequenceHeader: ?*const StdVideoAV1SequenceHeader = @import("std").mem.zeroes(?*const StdVideoAV1SequenceHeader),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClampZeroOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustBufferAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    robustImageAccess2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nullDescriptor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    robustStorageBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    robustUniformBufferAccessSizeAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentModeFifoLatestReady: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugReportFlagsEXT = @import("std").mem.zeroes(VkDebugReportFlagsEXT),
    pfnCallback: PFN_vkDebugReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    rasterizationOrder: VkRasterizationOrderAMD = @import("std").mem.zeroes(VkRasterizationOrderAMD),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkDebugReportObjectTypeEXT = @import("std").mem.zeroes(VkDebugReportObjectTypeEXT),
    object: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pMarkerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dedicatedAllocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    transformFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
    geometryStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTransformFeedbackStreams: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBuffers: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxTransformFeedbackStreamDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataSize: u32 = @import("std").mem.zeroes(u32),
    maxTransformFeedbackBufferDataStride: u32 = @import("std").mem.zeroes(u32),
    transformFeedbackQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackStreamsLinesTriangles: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackRasterizationStreamSelect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationStateStreamCreateFlagsEXT),
    rasterizationStream: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    use64bitTexturing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkCuModuleNVX = @import("std").mem.zeroes(VkCuModuleNVX),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    function: VkCuFunctionNVX = @import("std").mem.zeroes(VkCuFunctionNVX),
    gridDimX: u32 = @import("std").mem.zeroes(u32),
    gridDimY: u32 = @import("std").mem.zeroes(u32),
    gridDimZ: u32 = @import("std").mem.zeroes(u32),
    blockDimX: u32 = @import("std").mem.zeroes(u32),
    blockDimY: u32 = @import("std").mem.zeroes(u32),
    blockDimZ: u32 = @import("std").mem.zeroes(u32),
    sharedMemBytes: u32 = @import("std").mem.zeroes(u32),
    paramCount: usize = @import("std").mem.zeroes(usize),
    pParams: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    extraCount: usize = @import("std").mem.zeroes(usize),
    pExtras: [*c]const ?*const anyopaque = @import("std").mem.zeroes([*c]const ?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    descriptorType: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportsTextureGatherLODBiasAMD: VkBool32 = @import("std").mem.zeroes(VkBool32),
    numUsedVgprs: u32 = @import("std").mem.zeroes(u32),
    numUsedSgprs: u32 = @import("std").mem.zeroes(u32),
    ldsSizePerLocalWorkGroup: u32 = @import("std").mem.zeroes(u32),
    ldsUsageSizeInBytes: usize = @import("std").mem.zeroes(usize),
    scratchMemUsageInBytes: usize = @import("std").mem.zeroes(usize),
    shaderStageMask: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    resourceUsage: VkShaderResourceUsageAMD = @import("std").mem.zeroes(VkShaderResourceUsageAMD),
    numPhysicalVgprs: u32 = @import("std").mem.zeroes(u32),
    numPhysicalSgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableVgprs: u32 = @import("std").mem.zeroes(u32),
    numAvailableSgprs: u32 = @import("std").mem.zeroes(u32),
    computeWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cornerSampledImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    imageFormatProperties: VkImageFormatProperties = @import("std").mem.zeroes(VkImageFormatProperties),
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV = @import("std").mem.zeroes(VkExternalMemoryFeatureFlagsNV),
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disabledValidationCheckCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationChecks: [*c]const VkValidationCheckEXT = @import("std").mem.zeroes([*c]const VkValidationCheckEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    decodeMode: VkFormat = @import("std").mem.zeroes(VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decodeModeSharedExponent: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    flags: VkConditionalRenderingFlagsEXT = @import("std").mem.zeroes(VkConditionalRenderingFlagsEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    conditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    inheritedConditionalRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    conditionalRenderingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    xcoeff: f32 = @import("std").mem.zeroes(f32),
    ycoeff: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportWScalings: [*c]const VkViewportWScalingNV = @import("std").mem.zeroes([*c]const VkViewportWScalingNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImageCount: u32 = @import("std").mem.zeroes(u32),
    maxImageCount: u32 = @import("std").mem.zeroes(u32),
    currentExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    minImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxImageArrayLayers: u32 = @import("std").mem.zeroes(u32),
    supportedTransforms: VkSurfaceTransformFlagsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagsKHR),
    currentTransform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR = @import("std").mem.zeroes(VkCompositeAlphaFlagsKHR),
    supportedUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    powerState: VkDisplayPowerStateEXT = @import("std").mem.zeroes(VkDisplayPowerStateEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceEvent: VkDeviceEventTypeEXT = @import("std").mem.zeroes(VkDeviceEventTypeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayEvent: VkDisplayEventTypeEXT = @import("std").mem.zeroes(VkDisplayEventTypeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    surfaceCounters: VkSurfaceCounterFlagsEXT = @import("std").mem.zeroes(VkSurfaceCounterFlagsEXT),
    refreshDuration: u64 = @import("std").mem.zeroes(u64),
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
    actualPresentTime: u64 = @import("std").mem.zeroes(u64),
    earliestPresentTime: u64 = @import("std").mem.zeroes(u64),
    presentMargin: u64 = @import("std").mem.zeroes(u64),
    presentID: u32 = @import("std").mem.zeroes(u32),
    desiredPresentTime: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    swapchainCount: u32 = @import("std").mem.zeroes(u32),
    pTimes: [*c]const VkPresentTimeGOOGLE = @import("std").mem.zeroes([*c]const VkPresentTimeGOOGLE),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perViewPositionAllComponents: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    perViewAttributesPositionXOnly: VkBool32 = @import("std").mem.zeroes(VkBool32),
    x: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    y: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    z: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    w: VkViewportCoordinateSwizzleNV = @import("std").mem.zeroes(VkViewportCoordinateSwizzleNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineViewportSwizzleStateCreateFlagsNV),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pViewportSwizzles: [*c]const VkViewportSwizzleNV = @import("std").mem.zeroes([*c]const VkViewportSwizzleNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDiscardRectangles: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineDiscardRectangleStateCreateFlagsEXT),
    discardRectangleMode: VkDiscardRectangleModeEXT = @import("std").mem.zeroes(VkDiscardRectangleModeEXT),
    discardRectangleCount: u32 = @import("std").mem.zeroes(u32),
    pDiscardRectangles: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    maxExtraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    extraPrimitiveOverestimationSizeGranularity: f32 = @import("std").mem.zeroes(f32),
    primitiveUnderestimation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativePointAndLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateTrianglesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    degenerateLinesRasterized: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fullyCoveredFragmentShaderInputVariable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    conservativeRasterizationPostDepthCoverage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationConservativeStateCreateFlagsEXT),
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT = @import("std").mem.zeroes(VkConservativeRasterizationModeEXT),
    extraPrimitiveOverestimationSize: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT = @import("std").mem.zeroes(VkPipelineRasterizationDepthClipStateCreateFlagsEXT),
    depthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    displayPrimaryRed: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryGreen: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    displayPrimaryBlue: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    whitePoint: VkXYColorEXT = @import("std").mem.zeroes(VkXYColorEXT),
    maxLuminance: f32 = @import("std").mem.zeroes(f32),
    minLuminance: f32 = @import("std").mem.zeroes(f32),
    maxContentLightLevel: f32 = @import("std").mem.zeroes(f32),
    maxFrameAverageLightLevel: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    relaxedLineRasterization: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pLabelName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    color: [4]f32 = @import("std").mem.zeroes([4]f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    pObjectName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCallbackDataFlagsEXT),
    pMessageIdName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    messageIdNumber: i32 = @import("std").mem.zeroes(i32),
    pMessage: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    queueLabelCount: u32 = @import("std").mem.zeroes(u32),
    pQueueLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    cmdBufLabelCount: u32 = @import("std").mem.zeroes(u32),
    pCmdBufLabels: [*c]const VkDebugUtilsLabelEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsLabelEXT),
    objectCount: u32 = @import("std").mem.zeroes(u32),
    pObjects: [*c]const VkDebugUtilsObjectNameInfoEXT = @import("std").mem.zeroes([*c]const VkDebugUtilsObjectNameInfoEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDebugUtilsMessengerCreateFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessengerCreateFlagsEXT),
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageSeverityFlagsEXT),
    messageType: VkDebugUtilsMessageTypeFlagsEXT = @import("std").mem.zeroes(VkDebugUtilsMessageTypeFlagsEXT),
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT = @import("std").mem.zeroes(PFN_vkDebugUtilsMessengerCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    colorAttachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorAttachmentSamples: [*c]const VkSampleCountFlagBits = @import("std").mem.zeroes([*c]const VkSampleCountFlagBits),
    depthStencilAttachmentSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    x: f32 = @import("std").mem.zeroes(f32),
    y: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsPerPixel: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkSampleLocationEXT = @import("std").mem.zeroes([*c]const VkSampleLocationEXT),
    attachmentIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
    subpassIndex: u32 = @import("std").mem.zeroes(u32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentInitialSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pAttachmentInitialSampleLocations: [*c]const VkAttachmentSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkAttachmentSampleLocationsEXT),
    postSubpassSampleLocationsCount: u32 = @import("std").mem.zeroes(u32),
    pPostSubpassSampleLocations: [*c]const VkSubpassSampleLocationsEXT = @import("std").mem.zeroes([*c]const VkSubpassSampleLocationsEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampleLocationsInfo: VkSampleLocationsInfoEXT = @import("std").mem.zeroes(VkSampleLocationsInfoEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sampleLocationSampleCounts: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sampleLocationCoordinateRange: [2]f32 = @import("std").mem.zeroes([2]f32),
    sampleLocationSubPixelBits: u32 = @import("std").mem.zeroes(u32),
    variableSampleLocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSampleLocationGridSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendCoherentOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    advancedBlendMaxColorAttachments: u32 = @import("std").mem.zeroes(u32),
    advancedBlendIndependentBlend: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedSrcColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendNonPremultipliedDstColor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendCorrelatedOverlap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    advancedBlendAllOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageToColorStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageToColorStateCreateFlagsNV),
    coverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageToColorLocation: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageModulationStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageModulationStateCreateFlagsNV),
    coverageModulationMode: VkCoverageModulationModeNV = @import("std").mem.zeroes(VkCoverageModulationModeNV),
    coverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    coverageModulationTableCount: u32 = @import("std").mem.zeroes(u32),
    pCoverageModulationTable: [*c]const f32 = @import("std").mem.zeroes([*c]const f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerSM: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderSMBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags = @import("std").mem.zeroes(VkFormatFeatureFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierPropertiesEXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierPropertiesEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifiers: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pPlaneLayouts: [*c]const VkSubresourceLayout = @import("std").mem.zeroes([*c]const VkSubresourceLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifier: u64 = @import("std").mem.zeroes(u64),
    drmFormatModifierPlaneCount: u32 = @import("std").mem.zeroes(u32),
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    drmFormatModifierCount: u32 = @import("std").mem.zeroes(u32),
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierProperties2EXT = @import("std").mem.zeroes([*c]VkDrmFormatModifierProperties2EXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkValidationCacheCreateFlagsEXT = @import("std").mem.zeroes(VkValidationCacheCreateFlagsEXT),
    initialDataSize: usize = @import("std").mem.zeroes(usize),
    pInitialData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    validationCache: VkValidationCacheEXT = @import("std").mem.zeroes(VkValidationCacheEXT),
    shadingRatePaletteEntryCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePaletteEntries: [*c]const VkShadingRatePaletteEntryNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteEntryNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportCount: u32 = @import("std").mem.zeroes(u32),
    pShadingRatePalettes: [*c]const VkShadingRatePaletteNV = @import("std").mem.zeroes([*c]const VkShadingRatePaletteNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shadingRateCoarseSampleOrder: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shadingRateTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    shadingRatePaletteSize: u32 = @import("std").mem.zeroes(u32),
    shadingRateMaxCoarseSamples: u32 = @import("std").mem.zeroes(u32),
    pixelX: u32 = @import("std").mem.zeroes(u32),
    pixelY: u32 = @import("std").mem.zeroes(u32),
    sample: u32 = @import("std").mem.zeroes(u32),
    shadingRate: VkShadingRatePaletteEntryNV = @import("std").mem.zeroes(VkShadingRatePaletteEntryNV),
    sampleCount: u32 = @import("std").mem.zeroes(u32),
    sampleLocationCount: u32 = @import("std").mem.zeroes(u32),
    pSampleLocations: [*c]const VkCoarseSampleLocationNV = @import("std").mem.zeroes([*c]const VkCoarseSampleLocationNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampleOrderType: VkCoarseSampleOrderTypeNV = @import("std").mem.zeroes(VkCoarseSampleOrderTypeNV),
    customSampleOrderCount: u32 = @import("std").mem.zeroes(u32),
    pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV = @import("std").mem.zeroes([*c]const VkCoarseSampleOrderCustomNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoNV),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    vertexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    indexData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    indexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    transformData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    transformOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    aabbData: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    numAABBs: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    triangles: VkGeometryTrianglesNV = @import("std").mem.zeroes(VkGeometryTrianglesNV),
    aabbs: VkGeometryAABBNV = @import("std").mem.zeroes(VkGeometryAABBNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkGeometryDataNV = @import("std").mem.zeroes(VkGeometryDataNV),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeNV = @import("std").mem.zeroes(VkAccelerationStructureTypeNV),
    flags: VkBuildAccelerationStructureFlagsNV = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsNV),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkGeometryNV = @import("std").mem.zeroes([*c]const VkGeometryNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compactedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    info: VkAccelerationStructureInfoNV = @import("std").mem.zeroes(VkAccelerationStructureInfoNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    deviceIndexCount: u32 = @import("std").mem.zeroes(u32),
    pDeviceIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureNV = @import("std").mem.zeroes([*c]const VkAccelerationStructureNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureMemoryRequirementsTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMemoryRequirementsTypeNV),
    accelerationStructure: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxTriangleCount: u64 = @import("std").mem.zeroes(u64),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    matrix: [3][4]f32 = @import("std").mem.zeroes([3][4]f32),
    minX: f32 = @import("std").mem.zeroes(f32),
    minY: f32 = @import("std").mem.zeroes(f32),
    minZ: f32 = @import("std").mem.zeroes(f32),
    maxX: f32 = @import("std").mem.zeroes(f32),
    maxY: f32 = @import("std").mem.zeroes(f32),
    maxZ: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    representativeFragmentTest: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    representativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageViewType: VkImageViewType = @import("std").mem.zeroes(VkImageViewType),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    filterCubic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    filterCubicMinmax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    pHostPointer: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minImportedHostPointerAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD = @import("std").mem.zeroes(VkPipelineCompilerControlFlagsAMD),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEngineCount: u32 = @import("std").mem.zeroes(u32),
    shaderArraysPerEngineCount: u32 = @import("std").mem.zeroes(u32),
    computeUnitsPerShaderArray: u32 = @import("std").mem.zeroes(u32),
    simdPerComputeUnit: u32 = @import("std").mem.zeroes(u32),
    wavefrontsPerSimd: u32 = @import("std").mem.zeroes(u32),
    wavefrontSize: u32 = @import("std").mem.zeroes(u32),
    sgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxSgprAllocation: u32 = @import("std").mem.zeroes(u32),
    sgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
    vgprsPerSimd: u32 = @import("std").mem.zeroes(u32),
    minVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    maxVgprAllocation: u32 = @import("std").mem.zeroes(u32),
    vgprAllocationGranularity: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD = @import("std").mem.zeroes(VkMemoryOverallocationBehaviorAMD),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVertexAttribDivisor: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxDrawMeshTasksCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskOutputCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshTotalMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
    taskCount: u32 = @import("std").mem.zeroes(u32),
    firstTask: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageFootprint: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    exclusiveScissorCount: u32 = @import("std").mem.zeroes(u32),
    pExclusiveScissors: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    exclusiveScissor: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags = @import("std").mem.zeroes(VkPipelineStageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlagBits = @import("std").mem.zeroes(VkPipelineStageFlagBits),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    checkpointExecutionStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    pCheckpointMarker: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderIntegerFunctions2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    type: VkPerformanceValueTypeINTEL = @import("std").mem.zeroes(VkPerformanceValueTypeINTEL),
    data: VkPerformanceValueDataINTEL = @import("std").mem.zeroes(VkPerformanceValueDataINTEL),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL = @import("std").mem.zeroes(VkQueryPoolSamplingModeINTEL),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    marker: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceOverrideTypeINTEL = @import("std").mem.zeroes(VkPerformanceOverrideTypeINTEL),
    enable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    parameter: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkPerformanceConfigurationTypeINTEL = @import("std").mem.zeroes(VkPerformanceConfigurationTypeINTEL),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pciDomain: u32 = @import("std").mem.zeroes(u32),
    pciBus: u32 = @import("std").mem.zeroes(u32),
    pciDevice: u32 = @import("std").mem.zeroes(u32),
    pciFunction: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    localDimmingSupport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    localDimmingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapDynamic: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentDensityMapNonSubsampledImages: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxFragmentDensityTexelSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    fragmentDensityInvocations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityMapAttachment: VkAttachmentReference = @import("std").mem.zeroes(VkAttachmentReference),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    imageLayout: VkImageLayout = @import("std").mem.zeroes(VkImageLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD = @import("std").mem.zeroes(VkShaderCorePropertiesFlagsAMD),
    activeComputeUnitCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceCoherentMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageInt64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    heapBudget: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
    heapUsage: [16]VkDeviceSize = @import("std").mem.zeroes([16]VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryPriority: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    priority: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dedicatedAllocationImageAliasing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    bufferDeviceAddress: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferDeviceAddressMultiDevice: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    enabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pEnabledValidationFeatures: [*c]const VkValidationFeatureEnableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureEnableEXT),
    disabledValidationFeatureCount: u32 = @import("std").mem.zeroes(u32),
    pDisabledValidationFeatures: [*c]const VkValidationFeatureDisableEXT = @import("std").mem.zeroes([*c]const VkValidationFeatureDisableEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MSize: u32 = @import("std").mem.zeroes(u32),
    NSize: u32 = @import("std").mem.zeroes(u32),
    KSize: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    BType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    CType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    DType: VkComponentTypeNV = @import("std").mem.zeroes(VkComponentTypeNV),
    scope: VkScopeNV = @import("std").mem.zeroes(VkScopeNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixRobustBufferAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCoverageReductionStateCreateFlagsNV = @import("std").mem.zeroes(VkPipelineCoverageReductionStateCreateFlagsNV),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    coverageReductionMode: VkCoverageReductionModeNV = @import("std").mem.zeroes(VkCoverageReductionModeNV),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    depthStencilSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    colorSamples: VkSampleCountFlags = @import("std").mem.zeroes(VkSampleCountFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShaderSampleInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderPixelInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    fragmentShaderShadingRateInterlock: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrImageArrays: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexLast: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    provokingVertexModePerPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    provokingVertexMode: VkProvokingVertexModeEXT = @import("std").mem.zeroes(VkProvokingVertexModeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkHeadlessSurfaceCreateFlagsEXT = @import("std").mem.zeroes(VkHeadlessSurfaceCreateFlagsEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryMapPlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryMapRangePlaced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    memoryUnmapReserve: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minPlacedMemoryMapAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pPlacedAddress: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBufferFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderBufferFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16Atomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicAdd: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat16AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderSharedFloat64AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sparseImageFloat32AtomicMinMax: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGraphicsShaderGroupCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenOffset: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsStreamStride: u32 = @import("std").mem.zeroes(u32),
    minSequencesCountBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minSequencesIndexBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    minIndirectCommandsBufferOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineVertexInputStateCreateInfo),
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineTessellationStateCreateInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkGraphicsShaderGroupCreateInfoNV = @import("std").mem.zeroes([*c]const VkGraphicsShaderGroupCreateInfoNV),
    pipelineCount: u32 = @import("std").mem.zeroes(u32),
    pPipelines: [*c]const VkPipeline = @import("std").mem.zeroes([*c]const VkPipeline),
    groupIndex: u32 = @import("std").mem.zeroes(u32),
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    data: u32 = @import("std").mem.zeroes(u32),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tokenType: VkIndirectCommandsTokenTypeNV = @import("std").mem.zeroes(VkIndirectCommandsTokenTypeNV),
    stream: u32 = @import("std").mem.zeroes(u32),
    offset: u32 = @import("std").mem.zeroes(u32),
    vertexBindingUnit: u32 = @import("std").mem.zeroes(u32),
    vertexDynamicStride: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pushconstantPipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    pushconstantShaderStageFlags: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    pushconstantOffset: u32 = @import("std").mem.zeroes(u32),
    pushconstantSize: u32 = @import("std").mem.zeroes(u32),
    indirectStateFlags: VkIndirectStateFlagsNV = @import("std").mem.zeroes(VkIndirectStateFlagsNV),
    indexTypeCount: u32 = @import("std").mem.zeroes(u32),
    pIndexTypes: [*c]const VkIndexType = @import("std").mem.zeroes([*c]const VkIndexType),
    pIndexTypeValues: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkIndirectCommandsLayoutUsageFlagsNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutUsageFlagsNV),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    tokenCount: u32 = @import("std").mem.zeroes(u32),
    pTokens: [*c]const VkIndirectCommandsLayoutTokenNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsLayoutTokenNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreamStrides: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    streamCount: u32 = @import("std").mem.zeroes(u32),
    pStreams: [*c]const VkIndirectCommandsStreamNV = @import("std").mem.zeroes([*c]const VkIndirectCommandsStreamNV),
    sequencesCount: u32 = @import("std").mem.zeroes(u32),
    preprocessBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    preprocessOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    preprocessSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesCountBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesCountOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sequencesIndexBuffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sequencesIndexOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    indirectCommandsLayout: VkIndirectCommandsLayoutNV = @import("std").mem.zeroes(VkIndirectCommandsLayoutNV),
    maxSequencesCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inheritedViewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    viewportScissor2D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    viewportDepthCount: u32 = @import("std").mem.zeroes(u32),
    pViewportDepths: [*c]const VkViewport = @import("std").mem.zeroes([*c]const VkViewport),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    texelBufferAlignment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    renderArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthBiasControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    leastRepresentableValueForceUnormRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    floatRepresentation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasConstantFactor: f32 = @import("std").mem.zeroes(f32),
    depthBiasClamp: f32 = @import("std").mem.zeroes(f32),
    depthBiasSlopeFactor: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthBiasRepresentation: VkDepthBiasRepresentationEXT = @import("std").mem.zeroes(VkDepthBiasRepresentationEXT),
    depthBiasExact: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceMemoryReport: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    type: VkDeviceMemoryReportEventTypeEXT = @import("std").mem.zeroes(VkDeviceMemoryReportEventTypeEXT),
    memoryObjectId: u64 = @import("std").mem.zeroes(u64),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    objectType: VkObjectType = @import("std").mem.zeroes(VkObjectType),
    objectHandle: u64 = @import("std").mem.zeroes(u64),
    heapIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceMemoryReportFlagsEXT = @import("std").mem.zeroes(VkDeviceMemoryReportFlagsEXT),
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT = @import("std").mem.zeroes(PFN_vkDeviceMemoryReportCallbackEXT),
    pUserData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    customBorderColor: VkClearColorValue = @import("std").mem.zeroes(VkClearColorValue),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCustomBorderColorSamplers: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    customBorderColors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    customBorderColorWithoutFormat: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrier: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentBarrierEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    diagnosticsConfig: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDeviceDiagnosticsConfigFlagsNV = @import("std").mem.zeroes(VkDeviceDiagnosticsConfigFlagsNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingFragmentStage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingColorAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingDepthAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingStencilAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingInputAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingSampledAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingPerTileDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingPerTileDispatch: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingDispatchTile: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingApron: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingAnisotropicApron: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingAtomicOps: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileShadingImageProcessing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxApronSize: u32 = @import("std").mem.zeroes(u32),
    preferNonCoherent: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxTileShadingRate: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkTileShadingRenderPassFlagsQCOM = @import("std").mem.zeroes(VkTileShadingRenderPassFlagsQCOM),
    tileApronSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pQueriedLowLatencyData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDescriptorSingleArray: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bufferlessPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    allowSamplerImageViewPostSubmitCreation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxResourceDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxSamplerDescriptorBufferBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplerBindings: u32 = @import("std").mem.zeroes(u32),
    maxEmbeddedImmutableSamplers: u32 = @import("std").mem.zeroes(u32),
    bufferCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    imageViewCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    samplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    combinedImageSamplerDescriptorSize: usize = @import("std").mem.zeroes(usize),
    sampledImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageImageDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageTexelBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    uniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustUniformBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    storageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    robustStorageBufferDescriptorSize: usize = @import("std").mem.zeroes(usize),
    inputAttachmentDescriptorSize: usize = @import("std").mem.zeroes(usize),
    accelerationStructureDescriptorSize: usize = @import("std").mem.zeroes(usize),
    maxSamplerDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxResourceDescriptorBufferRange: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    samplerDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    resourceDescriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    descriptorBufferAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    combinedImageSamplerDensityMapDescriptorSize: usize = @import("std").mem.zeroes(usize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferImageLayoutIgnored: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBufferPushDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    range: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    address: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    usage: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkDescriptorType = @import("std").mem.zeroes(VkDescriptorType),
    data: VkDescriptorDataEXT = @import("std").mem.zeroes(VkDescriptorDataEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    image: VkImage = @import("std").mem.zeroes(VkImage),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    imageView: VkImageView = @import("std").mem.zeroes(VkImageView),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sampler: VkSampler = @import("std").mem.zeroes(VkSampler),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    opaqueCaptureDescriptorData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    accelerationStructureNV: VkAccelerationStructureNV = @import("std").mem.zeroes(VkAccelerationStructureNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibrary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    graphicsPipelineLibraryFastLinking: VkBool32 = @import("std").mem.zeroes(VkBool32),
    graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkGraphicsPipelineLibraryFlagsEXT = @import("std").mem.zeroes(VkGraphicsPipelineLibraryFlagsEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderEarlyAndLateFragmentTests: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentShadingRateEnums: VkBool32 = @import("std").mem.zeroes(VkBool32),
    supersampleFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
    noInvocationFragmentShadingRates: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shadingRateType: VkFragmentShadingRateTypeNV = @import("std").mem.zeroes(VkFragmentShadingRateTypeNV),
    shadingRate: VkFragmentShadingRateNV = @import("std").mem.zeroes(VkFragmentShadingRateNV),
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR = @import("std").mem.zeroes([2]VkFragmentShadingRateCombinerOpKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxInstances: u32 = @import("std").mem.zeroes(u32),
    flags: VkAccelerationStructureMotionInfoFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInfoFlagsNV),
    sx: f32 = @import("std").mem.zeroes(f32),
    a: f32 = @import("std").mem.zeroes(f32),
    b: f32 = @import("std").mem.zeroes(f32),
    pvx: f32 = @import("std").mem.zeroes(f32),
    sy: f32 = @import("std").mem.zeroes(f32),
    c: f32 = @import("std").mem.zeroes(f32),
    pvy: f32 = @import("std").mem.zeroes(f32),
    sz: f32 = @import("std").mem.zeroes(f32),
    pvz: f32 = @import("std").mem.zeroes(f32),
    qx: f32 = @import("std").mem.zeroes(f32),
    qy: f32 = @import("std").mem.zeroes(f32),
    qz: f32 = @import("std").mem.zeroes(f32),
    qw: f32 = @import("std").mem.zeroes(f32),
    tx: f32 = @import("std").mem.zeroes(f32),
    ty: f32 = @import("std").mem.zeroes(f32),
    tz: f32 = @import("std").mem.zeroes(f32),
    type: VkAccelerationStructureMotionInstanceTypeNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceTypeNV),
    flags: VkAccelerationStructureMotionInstanceFlagsNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceFlagsNV),
    data: VkAccelerationStructureMotionInstanceDataNV = @import("std").mem.zeroes(VkAccelerationStructureMotionInstanceDataNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingMotionBlur: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcr2plane444Formats: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapDeferred: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subsampledLoads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    subsampledCoarseReconstructionEarlyAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxSubsampledArrayLayers: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetSubsampledSamplers: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    transform: VkSurfaceTransformFlagBitsKHR = @import("std").mem.zeroes(VkSurfaceTransformFlagBitsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    compressionControlPlaneCount: u32 = @import("std").mem.zeroes(u32),
    pFixedRateFlags: [*c]VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes([*c]VkImageCompressionFixedRateFlagsEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionFlags: VkImageCompressionFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFlagsEXT),
    imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT = @import("std").mem.zeroes(VkImageCompressionFixedRateFlagsEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatA4R4G4B4: VkBool32 = @import("std").mem.zeroes(VkBool32),
    formatA4B4G4R4: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceFault: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceFaultVendorBinary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    addressInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorInfoCount: u32 = @import("std").mem.zeroes(u32),
    vendorBinarySize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    addressType: VkDeviceFaultAddressTypeEXT = @import("std").mem.zeroes(VkDeviceFaultAddressTypeEXT),
    reportedAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    addressPrecision: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    vendorFaultCode: u64 = @import("std").mem.zeroes(u64),
    vendorFaultData: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    pAddressInfos: [*c]VkDeviceFaultAddressInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultAddressInfoEXT),
    pVendorInfos: [*c]VkDeviceFaultVendorInfoEXT = @import("std").mem.zeroes([*c]VkDeviceFaultVendorInfoEXT),
    pVendorBinaryData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    headerSize: u32 = @import("std").mem.zeroes(u32),
    headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT = @import("std").mem.zeroes(VkDeviceFaultVendorBinaryHeaderVersionEXT),
    vendorID: u32 = @import("std").mem.zeroes(u32),
    deviceID: u32 = @import("std").mem.zeroes(u32),
    driverVersion: u32 = @import("std").mem.zeroes(u32),
    pipelineCacheUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    applicationNameOffset: u32 = @import("std").mem.zeroes(u32),
    applicationVersion: u32 = @import("std").mem.zeroes(u32),
    engineNameOffset: u32 = @import("std").mem.zeroes(u32),
    engineVersion: u32 = @import("std").mem.zeroes(u32),
    apiVersion: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rasterizationOrderColorAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderDepthAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationOrderStencilAttachmentAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatRgba10x6WithoutYCbCrSampler: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    mutableDescriptorType: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorTypeCount: u32 = @import("std").mem.zeroes(u32),
    pDescriptorTypes: [*c]const VkDescriptorType = @import("std").mem.zeroes([*c]const VkDescriptorType),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mutableDescriptorTypeListCount: u32 = @import("std").mem.zeroes(u32),
    pMutableDescriptorTypeLists: [*c]const VkMutableDescriptorTypeListEXT = @import("std").mem.zeroes([*c]const VkMutableDescriptorTypeListEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexInputDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    binding: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    inputRate: VkVertexInputRate = @import("std").mem.zeroes(VkVertexInputRate),
    divisor: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    location: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    offset: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hasPrimary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    hasRender: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primaryMajor: i64 = @import("std").mem.zeroes(i64),
    primaryMinor: i64 = @import("std").mem.zeroes(i64),
    renderMajor: i64 = @import("std").mem.zeroes(i64),
    renderMinor: i64 = @import("std").mem.zeroes(i64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    reportAddressBinding: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDeviceAddressBindingFlagsEXT = @import("std").mem.zeroes(VkDeviceAddressBindingFlagsEXT),
    baseAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    bindingType: VkDeviceAddressBindingTypeEXT = @import("std").mem.zeroes(VkDeviceAddressBindingTypeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClipControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    negativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitiveTopologyListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveTopologyPatchListRestart: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPass: VkRenderPass = @import("std").mem.zeroes(VkRenderPass),
    subpass: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassShading: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxSubpassShadingWorkgroupSizeAspectRatio: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    invocationMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalMemoryRDMA: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineIdentifier: [16]u8 = @import("std").mem.zeroes([16]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelinePropertiesIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    frameBoundary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkFrameBoundaryFlagsEXT = @import("std").mem.zeroes(VkFrameBoundaryFlagsEXT),
    frameID: u64 = @import("std").mem.zeroes(u64),
    imageCount: u32 = @import("std").mem.zeroes(u32),
    pImages: [*c]const VkImage = @import("std").mem.zeroes([*c]const VkImage),
    bufferCount: u32 = @import("std").mem.zeroes(u32),
    pBuffers: [*c]const VkBuffer = @import("std").mem.zeroes([*c]const VkBuffer),
    tagName: u64 = @import("std").mem.zeroes(u64),
    tagSize: usize = @import("std").mem.zeroes(usize),
    pTag: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multisampledRenderToSingleSampled: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    optimal: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    multisampledRenderToSingleSampledEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rasterizationSamples: VkSampleCountFlagBits = @import("std").mem.zeroes(VkSampleCountFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2LogicOp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState2PatchControlPoints: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    colorWriteEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    attachmentCount: u32 = @import("std").mem.zeroes(u32),
    pColorWriteEnables: [*c]const VkBool32 = @import("std").mem.zeroes([*c]const VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    primitivesGeneratedQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithRasterizerDiscard: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitivesGeneratedQueryWithNonZeroStreams: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    minLod: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    minLod: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiDraw: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxMultiDrawCount: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    vertexCount: u32 = @import("std").mem.zeroes(u32),
    firstIndex: u32 = @import("std").mem.zeroes(u32),
    indexCount: u32 = @import("std").mem.zeroes(u32),
    vertexOffset: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    image2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sampler2DViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageColorReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageDepthReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageStencilReadAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderTileImageCoherentReadAccelerated: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadSampleFromPixelRateInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTileImageReadFromHelperInvocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    count: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    format: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    flags: VkBuildMicromapFlagsEXT = @import("std").mem.zeroes(VkBuildMicromapFlagsEXT),
    mode: VkBuildMicromapModeEXT = @import("std").mem.zeroes(VkBuildMicromapModeEXT),
    dstMicromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    triangleArray: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    triangleArrayStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkMicromapCreateFlagsEXT = @import("std").mem.zeroes(VkMicromapCreateFlagsEXT),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkMicromapTypeEXT = @import("std").mem.zeroes(VkMicromapTypeEXT),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    micromap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    micromapHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxOpacity2StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    maxOpacity4StateSubdivisionLevel: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dst: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    mode: VkCopyMicromapModeEXT = @import("std").mem.zeroes(VkCopyMicromapModeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    micromapSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    discardable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexBuffer: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    indexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    baseTriangle: u32 = @import("std").mem.zeroes(u32),
    usageCountsCount: u32 = @import("std").mem.zeroes(u32),
    pUsageCounts: [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const VkMicromapUsageEXT),
    ppUsageCounts: [*c]const [*c]const VkMicromapUsageEXT = @import("std").mem.zeroes([*c]const [*c]const VkMicromapUsageEXT),
    micromap: VkMicromapEXT = @import("std").mem.zeroes(VkMicromapEXT),
    dataOffset: u32 = @import("std").mem.zeroes(u32),
    subdivisionLevel: u16 = @import("std").mem.zeroes(u16),
    format: u16 = @import("std").mem.zeroes(u16),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clustercullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewClusterCullingShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxOutputClusterCount: u32 = @import("std").mem.zeroes(u32),
    indirectBufferOffsetAlignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clusterShadingRate: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    borderColorSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    borderColorSwizzleFromImage: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    components: VkComponentMapping = @import("std").mem.zeroes(VkComponentMapping),
    srgb: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pageableDeviceLocalMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pixelRate: u32 = @import("std").mem.zeroes(u32),
    texelRate: u32 = @import("std").mem.zeroes(u32),
    fmaRate: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControls: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM = @import("std").mem.zeroes(VkPhysicalDeviceSchedulingControlsFlagsARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageSlicedViewOf3D: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sliceOffset: u32 = @import("std").mem.zeroes(u32),
    sliceCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorSetHostMapping: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSetLayout: VkDescriptorSetLayout = @import("std").mem.zeroes(VkDescriptorSetLayout),
    binding: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorOffset: usize = @import("std").mem.zeroes(usize),
    descriptorSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nonSeamlessCubeMap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStriped: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    renderPassStripeGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxRenderPassStripes: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeArea: VkRect2D = @import("std").mem.zeroes(VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeInfos: [*c]const VkRenderPassStripeInfoARM = @import("std").mem.zeroes([*c]const VkRenderPassStripeInfoARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stripeSemaphoreInfoCount: u32 = @import("std").mem.zeroes(u32),
    pStripeSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo = @import("std").mem.zeroes([*c]const VkSemaphoreSubmitInfo),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapOffset: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityOffsetGranularity: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fragmentDensityOffsetCount: u32 = @import("std").mem.zeroes(u32),
    pFragmentDensityOffsets: [*c]const VkOffset2D = @import("std").mem.zeroes([*c]const VkOffset2D),
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    bufferRowLength: u32 = @import("std").mem.zeroes(u32),
    bufferImageHeight: u32 = @import("std").mem.zeroes(u32),
    imageSubresource: VkImageSubresourceLayers = @import("std").mem.zeroes(VkImageSubresourceLayers),
    imageOffset: VkOffset3D = @import("std").mem.zeroes(VkOffset3D),
    imageExtent: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    indirectCopy: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedQueues: VkQueueFlags = @import("std").mem.zeroes(VkQueueFlags),
    srcAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    compressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressedSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    decompressionMethod: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryDecompression: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    decompressionMethods: VkMemoryDecompressionMethodFlagsNV = @import("std").mem.zeroes(VkMemoryDecompressionMethodFlagsNV),
    maxDecompressionIndirectCount: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCompute: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputePipelines: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedComputeCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    pipelineDeviceAddressCaptureReplay: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pipelineBindPoint: VkPipelineBindPoint = @import("std").mem.zeroes(VkPipelineBindPoint),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    pipelineAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    spheres: VkBool32 = @import("std").mem.zeroes(VkBool32),
    linearSweptSpheres: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    radiusFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    radiusData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    radiusStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    indexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    indexingMode: VkRayTracingLssIndexingModeNV = @import("std").mem.zeroes(VkRayTracingLssIndexingModeNV),
    endCapsMode: VkRayTracingLssPrimitiveEndCapsModeNV = @import("std").mem.zeroes(VkRayTracingLssPrimitiveEndCapsModeNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    radiusFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    radiusData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    radiusStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    indexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    linearColorAttachment: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageCompressionControlSwapchain: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    filterCenter: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    filterSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    numPhases: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureSampleWeighted: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBoxFilter: VkBool32 = @import("std").mem.zeroes(VkBool32),
    textureBlockMatch: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxWeightFilterPhases: u32 = @import("std").mem.zeroes(u32),
    maxWeightFilterDimension: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBlockMatchRegion: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    maxBoxFilterBlockSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nestedCommandBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferRendering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    nestedCommandBufferSimultaneousUse: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxCommandBufferNestingLevel: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    acquireUnmodifiedMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedDynamicState3TessellationDomainOrigin: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClampEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3PolygonMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationSamples: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToCoverageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3AlphaToOneEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LogicOpEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendEquation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorWriteMask: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RasterizationStream: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ConservativeRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3SampleLocationsEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ColorBlendAdvanced: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ProvokingVertexMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineRasterizationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3LineStippleEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3DepthClipNegativeOneToOne: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportWScalingEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ViewportSwizzle: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageToColorLocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTableEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageModulationTable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3CoverageReductionMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    extendedDynamicState3ShadingRateImageEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicPrimitiveTopologyUnrestricted: VkBool32 = @import("std").mem.zeroes(VkBool32),
    srcColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstColorBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    colorBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    dstAlphaBlendFactor: VkBlendFactor = @import("std").mem.zeroes(VkBlendFactor),
    alphaBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    advancedBlendOp: VkBlendOp = @import("std").mem.zeroes(VkBlendOp),
    srcPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dstPremultiplied: VkBool32 = @import("std").mem.zeroes(VkBool32),
    blendOverlap: VkBlendOverlapEXT = @import("std").mem.zeroes(VkBlendOverlapEXT),
    clampResults: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    subpassMergeFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    disallowMerging: VkBool32 = @import("std").mem.zeroes(VkBool32),
    postMergeSubpassCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pRenderPassFeedback: [*c]VkRenderPassCreationFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassCreationFeedbackInfoEXT),
    subpassMergeStatus: VkSubpassMergeStatusEXT = @import("std").mem.zeroes(VkSubpassMergeStatusEXT),
    description: [256]u8 = @import("std").mem.zeroes([256]u8),
    postMergeIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pSubpassFeedback: [*c]VkRenderPassSubpassFeedbackInfoEXT = @import("std").mem.zeroes([*c]VkRenderPassSubpassFeedbackInfoEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDirectDriverLoadingFlagsLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingFlagsLUNARG),
    pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG = @import("std").mem.zeroes(PFN_vkGetInstanceProcAddrLUNARG),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkDirectDriverLoadingModeLUNARG = @import("std").mem.zeroes(VkDirectDriverLoadingModeLUNARG),
    driverCount: u32 = @import("std").mem.zeroes(u32),
    pDrivers: [*c]const VkDirectDriverLoadingInfoLUNARG = @import("std").mem.zeroes([*c]const VkDirectDriverLoadingInfoLUNARG),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tiling: VkTensorTilingARM = @import("std").mem.zeroes(VkTensorTilingARM),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    dimensionCount: u32 = @import("std").mem.zeroes(u32),
    pDimensions: [*c]const i64 = @import("std").mem.zeroes([*c]const i64),
    pStrides: [*c]const i64 = @import("std").mem.zeroes([*c]const i64),
    usage: VkTensorUsageFlagsARM = @import("std").mem.zeroes(VkTensorUsageFlagsARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkTensorCreateFlagsARM = @import("std").mem.zeroes(VkTensorCreateFlagsARM),
    pDescription: [*c]const VkTensorDescriptionARM = @import("std").mem.zeroes([*c]const VkTensorDescriptionARM),
    sharingMode: VkSharingMode = @import("std").mem.zeroes(VkSharingMode),
    queueFamilyIndexCount: u32 = @import("std").mem.zeroes(u32),
    pQueueFamilyIndices: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkTensorViewCreateFlagsARM = @import("std").mem.zeroes(VkTensorViewCreateFlagsARM),
    tensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensorViewCount: u32 = @import("std").mem.zeroes(u32),
    pTensorViews: [*c]const VkTensorViewARM = @import("std").mem.zeroes([*c]const VkTensorViewARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    optimalTilingTensorFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    linearTilingTensorFeatures: VkFormatFeatureFlags2 = @import("std").mem.zeroes(VkFormatFeatureFlags2),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTensorDimensionCount: u32 = @import("std").mem.zeroes(u32),
    maxTensorElements: u64 = @import("std").mem.zeroes(u64),
    maxPerDimensionTensorElements: u64 = @import("std").mem.zeroes(u64),
    maxTensorStride: i64 = @import("std").mem.zeroes(i64),
    maxTensorSize: u64 = @import("std").mem.zeroes(u64),
    maxTensorShaderAccessArrayLength: u32 = @import("std").mem.zeroes(u32),
    maxTensorShaderAccessSize: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetStorageTensors: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorSetStorageTensors: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindStorageTensors: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindStorageTensors: u32 = @import("std").mem.zeroes(u32),
    shaderStorageTensorArrayNonUniformIndexingNative: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTensorSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    srcAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    dstStageMask: VkPipelineStageFlags2 = @import("std").mem.zeroes(VkPipelineStageFlags2),
    dstAccessMask: VkAccessFlags2 = @import("std").mem.zeroes(VkAccessFlags2),
    srcQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    dstQueueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    tensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensorMemoryBarrierCount: u32 = @import("std").mem.zeroes(u32),
    pTensorMemoryBarriers: [*c]const VkTensorMemoryBarrierARM = @import("std").mem.zeroes([*c]const VkTensorMemoryBarrierARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tensorNonPacked: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderTensorAccess: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTensorArrayDynamicIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderStorageTensorArrayNonUniformIndexing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingStorageTensorUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tensors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pCreateInfo: [*c]const VkTensorCreateInfoARM = @import("std").mem.zeroes([*c]const VkTensorCreateInfoARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dimensionCount: u32 = @import("std").mem.zeroes(u32),
    pSrcOffset: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    pDstOffset: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    pExtent: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcTensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    dstTensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkTensorCopyARM = @import("std").mem.zeroes([*c]const VkTensorCopyARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkTensorCreateFlagsARM = @import("std").mem.zeroes(VkTensorCreateFlagsARM),
    pDescription: [*c]const VkTensorDescriptionARM = @import("std").mem.zeroes([*c]const VkTensorDescriptionARM),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    externalMemoryProperties: VkExternalMemoryProperties = @import("std").mem.zeroes(VkExternalMemoryProperties),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorBufferTensorDescriptors: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tensorCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    tensorViewCaptureReplayDescriptorDataSize: usize = @import("std").mem.zeroes(usize),
    tensorDescriptorSize: usize = @import("std").mem.zeroes(usize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensorView: VkTensorViewARM = @import("std").mem.zeroes(VkTensorViewARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensor: VkTensorARM = @import("std").mem.zeroes(VkTensorARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensorView: VkTensorViewARM = @import("std").mem.zeroes(VkTensorViewARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    tensorCount: u32 = @import("std").mem.zeroes(u32),
    pTensors: [*c]const VkTensorARM = @import("std").mem.zeroes([*c]const VkTensorARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifier: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderModuleIdentifierAlgorithmUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    pIdentifier: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    identifier: [32]u8 = @import("std").mem.zeroes([32]u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    opticalFlow: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    costSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    bidirectionalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    globalFlowSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minWidth: u32 = @import("std").mem.zeroes(u32),
    minHeight: u32 = @import("std").mem.zeroes(u32),
    maxWidth: u32 = @import("std").mem.zeroes(u32),
    maxHeight: u32 = @import("std").mem.zeroes(u32),
    maxNumRegionsOfInterest: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    usage: VkOpticalFlowUsageFlagsNV = @import("std").mem.zeroes(VkOpticalFlowUsageFlagsNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    format: VkFormat = @import("std").mem.zeroes(VkFormat),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    imageFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    flowVectorFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    costFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    outputGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    hintGridSize: VkOpticalFlowGridSizeFlagsNV = @import("std").mem.zeroes(VkOpticalFlowGridSizeFlagsNV),
    performanceLevel: VkOpticalFlowPerformanceLevelNV = @import("std").mem.zeroes(VkOpticalFlowPerformanceLevelNV),
    flags: VkOpticalFlowSessionCreateFlagsNV = @import("std").mem.zeroes(VkOpticalFlowSessionCreateFlagsNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    id: u32 = @import("std").mem.zeroes(u32),
    size: u32 = @import("std").mem.zeroes(u32),
    pPrivateData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkOpticalFlowExecuteFlagsNV = @import("std").mem.zeroes(VkOpticalFlowExecuteFlagsNV),
    regionCount: u32 = @import("std").mem.zeroes(u32),
    pRegions: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyDithering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    antiLag: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    stage: VkAntiLagStageAMD = @import("std").mem.zeroes(VkAntiLagStageAMD),
    frameIndex: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    mode: VkAntiLagModeAMD = @import("std").mem.zeroes(VkAntiLagModeAMD),
    maxFPS: u32 = @import("std").mem.zeroes(u32),
    pPresentationInfo: [*c]const VkAntiLagPresentationInfoAMD = @import("std").mem.zeroes([*c]const VkAntiLagPresentationInfoAMD),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderObject: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderBinaryUUID: [16]u8 = @import("std").mem.zeroes([16]u8),
    shaderBinaryVersion: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkShaderCreateFlagsEXT = @import("std").mem.zeroes(VkShaderCreateFlagsEXT),
    stage: VkShaderStageFlagBits = @import("std").mem.zeroes(VkShaderStageFlagBits),
    nextStage: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    codeType: VkShaderCodeTypeEXT = @import("std").mem.zeroes(VkShaderCodeTypeEXT),
    codeSize: usize = @import("std").mem.zeroes(usize),
    pCode: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
    minDepthClamp: f32 = @import("std").mem.zeroes(f32),
    maxDepthClamp: f32 = @import("std").mem.zeroes(f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileProperties: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileSize: VkExtent3D = @import("std").mem.zeroes(VkExtent3D),
    apronSize: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    origin: VkOffset2D = @import("std").mem.zeroes(VkOffset2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    amigoProfiling: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    firstDrawTimestamp: u64 = @import("std").mem.zeroes(u64),
    swapBufferTimestamp: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewViewports: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV = @import("std").mem.zeroes(VkRayTracingInvocationReorderModeNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingInvocationReorder: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeVectorSupportedStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    cooperativeVectorTrainingFloat16Accumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeVectorTrainingFloat32Accumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxCooperativeVectorComponents: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeVector: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeVectorTraining: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    inputType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    inputInterpretation: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    matrixInterpretation: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    biasInterpretation: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    resultType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    transpose: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    srcSize: usize = @import("std").mem.zeroes(usize),
    srcData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    pDstSize: [*c]usize = @import("std").mem.zeroes([*c]usize),
    dstData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    srcComponentType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    dstComponentType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    numRows: u32 = @import("std").mem.zeroes(u32),
    numColumns: u32 = @import("std").mem.zeroes(u32),
    srcLayout: VkCooperativeVectorMatrixLayoutNV = @import("std").mem.zeroes(VkCooperativeVectorMatrixLayoutNV),
    srcStride: usize = @import("std").mem.zeroes(usize),
    dstLayout: VkCooperativeVectorMatrixLayoutNV = @import("std").mem.zeroes(VkCooperativeVectorMatrixLayoutNV),
    dstStride: usize = @import("std").mem.zeroes(usize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpace: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    extendedSparseAddressSpaceSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    extendedSparseImageUsageFlags: VkImageUsageFlags = @import("std").mem.zeroes(VkImageUsageFlags),
    extendedSparseBufferUsageFlags: VkBufferUsageFlags = @import("std").mem.zeroes(VkBufferUsageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    legacyVertexAttributes: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    nativeUnalignedPerformance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    pLayerName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSettingName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    type: VkLayerSettingTypeEXT = @import("std").mem.zeroes(VkLayerSettingTypeEXT),
    valueCount: u32 = @import("std").mem.zeroes(u32),
    pValues: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    settingCount: u32 = @import("std").mem.zeroes(u32),
    pSettings: [*c]const VkLayerSettingEXT = @import("std").mem.zeroes([*c]const VkLayerSettingEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreBuiltins: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCoreMask: u64 = @import("std").mem.zeroes(u64),
    shaderCoreCount: u32 = @import("std").mem.zeroes(u32),
    shaderWarpsPerCore: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineLibraryGroupHandles: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dynamicRenderingUnusedAttachments: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    lowLatencyMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    lowLatencyBoost: VkBool32 = @import("std").mem.zeroes(VkBool32),
    minimumIntervalUs: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    signalSemaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    value: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    marker: VkLatencyMarkerNV = @import("std").mem.zeroes(VkLatencyMarkerNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    inputSampleTimeUs: u64 = @import("std").mem.zeroes(u64),
    simStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    simEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    renderSubmitEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    presentEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    driverEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    osRenderQueueEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderStartTimeUs: u64 = @import("std").mem.zeroes(u64),
    gpuRenderEndTimeUs: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    timingCount: u32 = @import("std").mem.zeroes(u32),
    pTimings: [*c]VkLatencyTimingsFrameReportNV = @import("std").mem.zeroes([*c]VkLatencyTimingsFrameReportNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentID: u64 = @import("std").mem.zeroes(u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    latencyModeEnable: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueType: VkOutOfBandQueueTypeNV = @import("std").mem.zeroes(VkOutOfBandQueueTypeNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    presentModeCount: u32 = @import("std").mem.zeroes(u32),
    pPresentModes: [*c]VkPresentModeKHR = @import("std").mem.zeroes([*c]VkPresentModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    dataGraph: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataGraphUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataGraphSpecializationConstants: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataGraphDescriptorBuffer: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataGraphShaderModule: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    id: u32 = @import("std").mem.zeroes(u32),
    pConstantData: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    descriptorSet: u32 = @import("std").mem.zeroes(u32),
    binding: u32 = @import("std").mem.zeroes(u32),
    arrayElement: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVendorOptions: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags2KHR = @import("std").mem.zeroes(VkPipelineCreateFlags2KHR),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    resourceInfoCount: u32 = @import("std").mem.zeroes(u32),
    pResourceInfos: [*c]const VkDataGraphPipelineResourceInfoARM = @import("std").mem.zeroes([*c]const VkDataGraphPipelineResourceInfoARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    module: VkShaderModule = @import("std").mem.zeroes(VkShaderModule),
    pName: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    pSpecializationInfo: [*c]const VkSpecializationInfo = @import("std").mem.zeroes([*c]const VkSpecializationInfo),
    constantCount: u32 = @import("std").mem.zeroes(u32),
    pConstants: [*c]const VkDataGraphPipelineConstantARM = @import("std").mem.zeroes([*c]const VkDataGraphPipelineConstantARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkDataGraphPipelineSessionCreateFlagsARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionCreateFlagsARM),
    dataGraphPipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: VkDataGraphPipelineSessionARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    bindPoint: VkDataGraphPipelineSessionBindPointARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionBindPointARM),
    bindPointType: VkDataGraphPipelineSessionBindPointTypeARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionBindPointTypeARM),
    numObjects: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: VkDataGraphPipelineSessionARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionARM),
    bindPoint: VkDataGraphPipelineSessionBindPointARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionBindPointARM),
    objectIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    session: VkDataGraphPipelineSessionARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionARM),
    bindPoint: VkDataGraphPipelineSessionBindPointARM = @import("std").mem.zeroes(VkDataGraphPipelineSessionBindPointARM),
    objectIndex: u32 = @import("std").mem.zeroes(u32),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    memoryOffset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dataGraphPipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    property: VkDataGraphPipelinePropertyARM = @import("std").mem.zeroes(VkDataGraphPipelinePropertyARM),
    isText: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dataSize: usize = @import("std").mem.zeroes(usize),
    pData: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    identifierSize: u32 = @import("std").mem.zeroes(u32),
    pIdentifier: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkDataGraphPipelineDispatchFlagsARM = @import("std").mem.zeroes(VkDataGraphPipelineDispatchFlagsARM),
    type: VkPhysicalDeviceDataGraphProcessingEngineTypeARM = @import("std").mem.zeroes(VkPhysicalDeviceDataGraphProcessingEngineTypeARM),
    isForeign: VkBool32 = @import("std").mem.zeroes(VkBool32),
    operationType: VkPhysicalDeviceDataGraphOperationTypeARM = @import("std").mem.zeroes(VkPhysicalDeviceDataGraphOperationTypeARM),
    name: [128]u8 = @import("std").mem.zeroes([128]u8),
    version: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    engine: VkPhysicalDeviceDataGraphProcessingEngineARM = @import("std").mem.zeroes(VkPhysicalDeviceDataGraphProcessingEngineARM),
    operation: VkPhysicalDeviceDataGraphOperationSupportARM = @import("std").mem.zeroes(VkPhysicalDeviceDataGraphOperationSupportARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    processingEngineCount: u32 = @import("std").mem.zeroes(u32),
    pProcessingEngines: [*c]VkPhysicalDeviceDataGraphProcessingEngineARM = @import("std").mem.zeroes([*c]VkPhysicalDeviceDataGraphProcessingEngineARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    queueFamilyIndex: u32 = @import("std").mem.zeroes(u32),
    engineType: VkPhysicalDeviceDataGraphProcessingEngineTypeARM = @import("std").mem.zeroes(VkPhysicalDeviceDataGraphProcessingEngineTypeARM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    foreignSemaphoreHandleTypes: VkExternalSemaphoreHandleTypeFlags = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlags),
    foreignMemoryHandleTypes: VkExternalMemoryHandleTypeFlags = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dimension: u32 = @import("std").mem.zeroes(u32),
    zeroCount: u32 = @import("std").mem.zeroes(u32),
    groupSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    multiviewPerViewRenderAreas: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    perViewRenderAreaCount: u32 = @import("std").mem.zeroes(u32),
    pPerViewRenderAreas: [*c]const VkRect2D = @import("std").mem.zeroes([*c]const VkRect2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    perStageDescriptorSet: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicPipelineLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    textureBlockMatch2: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxBlockMatchWindow: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    windowExtent: VkExtent2D = @import("std").mem.zeroes(VkExtent2D),
    windowCompareMode: VkBlockMatchWindowCompareModeQCOM = @import("std").mem.zeroes(VkBlockMatchWindowCompareModeQCOM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    selectableCubicWeights: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    cubicWeights: VkCubicFilterWeightsQCOM = @import("std").mem.zeroes(VkCubicFilterWeightsQCOM),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    ycbcrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    enableYDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
    enableCbCrDegamma: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cubicRangeClamp: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    attachmentFeedbackLoopDynamicState: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    underlyingAPI: VkLayeredDriverUnderlyingApiMSFT = @import("std").mem.zeroes(VkLayeredDriverUnderlyingApiMSFT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    descriptorPoolOverallocation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    tileMemoryHeap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    queueSubmitBoundary: VkBool32 = @import("std").mem.zeroes(VkBool32),
    tileBufferTransfers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    alignment: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    stereoType: VkDisplaySurfaceStereoTypeNV = @import("std").mem.zeroes(VkDisplaySurfaceStereoTypeNV),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    hdmi3DSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderRawAccessChains: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    reservedExternalQueues: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    preferredQueue: VkQueue = @import("std").mem.zeroes(VkQueue),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    deviceIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    externalDataSize: u32 = @import("std").mem.zeroes(u32),
    maxExternalQueues: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    commandBufferInheritance: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat16VectorAtomics: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderReplicatedComposites: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderFloat8: VkBool32 = @import("std").mem.zeroes(VkBool32),
    shaderFloat8CooperativeMatrix: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingValidation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    clusterAccelerationStructure: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxVerticesPerCluster: u32 = @import("std").mem.zeroes(u32),
    maxTrianglesPerCluster: u32 = @import("std").mem.zeroes(u32),
    clusterScratchByteAlignment: u32 = @import("std").mem.zeroes(u32),
    clusterByteAlignment: u32 = @import("std").mem.zeroes(u32),
    clusterTemplateByteAlignment: u32 = @import("std").mem.zeroes(u32),
    clusterBottomLevelByteAlignment: u32 = @import("std").mem.zeroes(u32),
    clusterTemplateBoundsByteAlignment: u32 = @import("std").mem.zeroes(u32),
    maxClusterGeometryIndex: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTotalClusterCount: u32 = @import("std").mem.zeroes(u32),
    maxClusterCountPerAccelerationStructure: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    maxGeometryIndexValue: u32 = @import("std").mem.zeroes(u32),
    maxClusterUniqueGeometryCount: u32 = @import("std").mem.zeroes(u32),
    maxClusterTriangleCount: u32 = @import("std").mem.zeroes(u32),
    maxClusterVertexCount: u32 = @import("std").mem.zeroes(u32),
    maxTotalTriangleCount: u32 = @import("std").mem.zeroes(u32),
    maxTotalVertexCount: u32 = @import("std").mem.zeroes(u32),
    minPositionTruncateBitCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    type: VkClusterAccelerationStructureTypeNV = @import("std").mem.zeroes(VkClusterAccelerationStructureTypeNV),
    noMoveOverlap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    maxMovedBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxAccelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    flags: VkBuildAccelerationStructureFlagsKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsKHR),
    opType: VkClusterAccelerationStructureOpTypeNV = @import("std").mem.zeroes(VkClusterAccelerationStructureOpTypeNV),
    opMode: VkClusterAccelerationStructureOpModeNV = @import("std").mem.zeroes(VkClusterAccelerationStructureOpModeNV),
    opInput: VkClusterAccelerationStructureOpInputNV = @import("std").mem.zeroes(VkClusterAccelerationStructureOpInputNV),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    input: VkClusterAccelerationStructureInputInfoNV = @import("std").mem.zeroes(VkClusterAccelerationStructureInputInfoNV),
    dstImplicitData: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    scratchData: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAddressesArray: VkStridedDeviceAddressRegionKHR = @import("std").mem.zeroes(VkStridedDeviceAddressRegionKHR),
    dstSizesArray: VkStridedDeviceAddressRegionKHR = @import("std").mem.zeroes(VkStridedDeviceAddressRegionKHR),
    srcInfosArray: VkStridedDeviceAddressRegionKHR = @import("std").mem.zeroes(VkStridedDeviceAddressRegionKHR),
    srcInfosCount: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    addressResolutionFlags: VkClusterAccelerationStructureAddressResolutionFlagsNV = @import("std").mem.zeroes(VkClusterAccelerationStructureAddressResolutionFlagsNV),
    startAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    strideInBytes: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    srcAccelerationStructure: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    clusterReferencesCount: u32 = @import("std").mem.zeroes(u32),
    clusterReferencesStride: u32 = @import("std").mem.zeroes(u32),
    clusterReferences: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    clusterTemplateAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    updateScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    buildScratchSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    allowClusterAccelerationStructure: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    partitionedAccelerationStructure: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxPartitionCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    enablePartitionTranslation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    opType: VkPartitionedAccelerationStructureOpTypeNV = @import("std").mem.zeroes(VkPartitionedAccelerationStructureOpTypeNV),
    argCount: u32 = @import("std").mem.zeroes(u32),
    argData: VkStridedDeviceAddressNV = @import("std").mem.zeroes(VkStridedDeviceAddressNV),
    transform: VkTransformMatrixKHR = @import("std").mem.zeroes(VkTransformMatrixKHR),
    explicitAABB: [6]f32 = @import("std").mem.zeroes([6]f32),
    instanceID: u32 = @import("std").mem.zeroes(u32),
    instanceMask: u32 = @import("std").mem.zeroes(u32),
    instanceContributionToHitGroupIndex: u32 = @import("std").mem.zeroes(u32),
    instanceFlags: VkPartitionedAccelerationStructureInstanceFlagsNV = @import("std").mem.zeroes(VkPartitionedAccelerationStructureInstanceFlagsNV),
    instanceIndex: u32 = @import("std").mem.zeroes(u32),
    partitionIndex: u32 = @import("std").mem.zeroes(u32),
    accelerationStructure: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    instanceIndex: u32 = @import("std").mem.zeroes(u32),
    instanceContributionToHitGroupIndex: u32 = @import("std").mem.zeroes(u32),
    accelerationStructure: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    partitionIndex: u32 = @import("std").mem.zeroes(u32),
    partitionTranslation: [3]f32 = @import("std").mem.zeroes([3]f32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkDeviceAddress = @import("std").mem.zeroes([*c]const VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    flags: VkBuildAccelerationStructureFlagsKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsKHR),
    instanceCount: u32 = @import("std").mem.zeroes(u32),
    maxInstancePerPartitionCount: u32 = @import("std").mem.zeroes(u32),
    partitionCount: u32 = @import("std").mem.zeroes(u32),
    maxInstanceInGlobalPartitionCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    input: VkPartitionedAccelerationStructureInstancesInputNV = @import("std").mem.zeroes(VkPartitionedAccelerationStructureInstancesInputNV),
    srcAccelerationStructureData: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    dstAccelerationStructureData: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    scratchData: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    srcInfos: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    srcInfosCount: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    deviceGeneratedCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    dynamicGeneratedPipelineLayout: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxIndirectPipelineCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectShaderObjectCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenCount: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsTokenOffset: u32 = @import("std").mem.zeroes(u32),
    maxIndirectCommandsIndirectStride: u32 = @import("std").mem.zeroes(u32),
    supportedIndirectCommandsInputModes: VkIndirectCommandsInputModeFlagsEXT = @import("std").mem.zeroes(VkIndirectCommandsInputModeFlagsEXT),
    supportedIndirectCommandsShaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedIndirectCommandsShaderStagesPipelineBinding: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    supportedIndirectCommandsShaderStagesShaderBinding: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    deviceGeneratedCommandsTransformFeedback: VkBool32 = @import("std").mem.zeroes(VkBool32),
    deviceGeneratedCommandsMultiDrawIndirectCount: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    indirectExecutionSet: VkIndirectExecutionSetEXT = @import("std").mem.zeroes(VkIndirectExecutionSetEXT),
    indirectCommandsLayout: VkIndirectCommandsLayoutEXT = @import("std").mem.zeroes(VkIndirectCommandsLayoutEXT),
    maxSequenceCount: u32 = @import("std").mem.zeroes(u32),
    maxDrawCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    initialPipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    maxPipelineCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    setLayoutCount: u32 = @import("std").mem.zeroes(u32),
    pSetLayouts: [*c]const VkDescriptorSetLayout = @import("std").mem.zeroes([*c]const VkDescriptorSetLayout),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shaderCount: u32 = @import("std").mem.zeroes(u32),
    pInitialShaders: [*c]const VkShaderEXT = @import("std").mem.zeroes([*c]const VkShaderEXT),
    pSetLayoutInfos: [*c]const VkIndirectExecutionSetShaderLayoutInfoEXT = @import("std").mem.zeroes([*c]const VkIndirectExecutionSetShaderLayoutInfoEXT),
    maxShaderCount: u32 = @import("std").mem.zeroes(u32),
    pushConstantRangeCount: u32 = @import("std").mem.zeroes(u32),
    pPushConstantRanges: [*c]const VkPushConstantRange = @import("std").mem.zeroes([*c]const VkPushConstantRange),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkIndirectExecutionSetInfoTypeEXT = @import("std").mem.zeroes(VkIndirectExecutionSetInfoTypeEXT),
    info: VkIndirectExecutionSetInfoEXT = @import("std").mem.zeroes(VkIndirectExecutionSetInfoEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    shaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    indirectExecutionSet: VkIndirectExecutionSetEXT = @import("std").mem.zeroes(VkIndirectExecutionSetEXT),
    indirectCommandsLayout: VkIndirectCommandsLayoutEXT = @import("std").mem.zeroes(VkIndirectCommandsLayoutEXT),
    indirectAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    indirectAddressSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    preprocessAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    preprocessSize: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxSequenceCount: u32 = @import("std").mem.zeroes(u32),
    sequenceCountAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    maxDrawCount: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    index: u32 = @import("std").mem.zeroes(u32),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    updateRange: VkPushConstantRange = @import("std").mem.zeroes(VkPushConstantRange),
    vertexBindingUnit: u32 = @import("std").mem.zeroes(u32),
    mode: VkIndirectCommandsInputModeFlagBitsEXT = @import("std").mem.zeroes(VkIndirectCommandsInputModeFlagBitsEXT),
    type: VkIndirectExecutionSetInfoTypeEXT = @import("std").mem.zeroes(VkIndirectExecutionSetInfoTypeEXT),
    shaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkIndirectCommandsTokenTypeEXT = @import("std").mem.zeroes(VkIndirectCommandsTokenTypeEXT),
    data: VkIndirectCommandsTokenDataEXT = @import("std").mem.zeroes(VkIndirectCommandsTokenDataEXT),
    offset: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkIndirectCommandsLayoutUsageFlagsEXT = @import("std").mem.zeroes(VkIndirectCommandsLayoutUsageFlagsEXT),
    shaderStages: VkShaderStageFlags = @import("std").mem.zeroes(VkShaderStageFlags),
    indirectStride: u32 = @import("std").mem.zeroes(u32),
    pipelineLayout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    tokenCount: u32 = @import("std").mem.zeroes(u32),
    pTokens: [*c]const VkIndirectCommandsLayoutTokenEXT = @import("std").mem.zeroes([*c]const VkIndirectCommandsLayoutTokenEXT),
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    stride: u32 = @import("std").mem.zeroes(u32),
    commandCount: u32 = @import("std").mem.zeroes(u32),
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    stride: u32 = @import("std").mem.zeroes(u32),
    bufferAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    size: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipeline: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderCount: u32 = @import("std").mem.zeroes(u32),
    pShaders: [*c]const VkShaderEXT = @import("std").mem.zeroes([*c]const VkShaderEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    index: u32 = @import("std").mem.zeroes(u32),
    shader: VkShaderEXT = @import("std").mem.zeroes(VkShaderEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    imageAlignmentControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    supportedImageAlignmentMask: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maximumRequestedAlignment: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    depthClampControl: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    depthClampMode: VkDepthClampModeEXT = @import("std").mem.zeroes(VkDepthClampModeEXT),
    pDepthClampRange: [*c]const VkDepthClampRangeEXT = @import("std").mem.zeroes([*c]const VkDepthClampRangeEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    hdrVivid: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    dynamicMetadataSize: usize = @import("std").mem.zeroes(usize),
    pDynamicMetadata: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    MGranularity: u32 = @import("std").mem.zeroes(u32),
    NGranularity: u32 = @import("std").mem.zeroes(u32),
    KGranularity: u32 = @import("std").mem.zeroes(u32),
    AType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    BType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    CType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    ResultType: VkComponentTypeKHR = @import("std").mem.zeroes(VkComponentTypeKHR),
    saturatingAccumulation: VkBool32 = @import("std").mem.zeroes(VkBool32),
    scope: VkScopeKHR = @import("std").mem.zeroes(VkScopeKHR),
    workgroupInvocations: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixWorkgroupScope: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixFlexibleDimensions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixReductions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixConversions: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixPerElementOperations: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixTensorAddressing: VkBool32 = @import("std").mem.zeroes(VkBool32),
    cooperativeMatrixBlockLoads: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    cooperativeMatrixWorkgroupScopeMaxWorkgroupSize: u32 = @import("std").mem.zeroes(u32),
    cooperativeMatrixFlexibleDimensionsMaxDimension: u32 = @import("std").mem.zeroes(u32),
    cooperativeMatrixWorkgroupScopeReservedSharedMemory: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineOpacityMicromap: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    vertexAttributeRobustness: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    formatPack: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fragmentDensityMapLayered: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxFragmentDensityMapLayers: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxFragmentDensityMapLayers: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    numFramesPerBatch: u32 = @import("std").mem.zeroes(u32),
    presentConfigFeedback: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    presentMetering: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    zeroInitializeDeviceMemory: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    pipelineCacheIncrementalMode: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveCount: u32 = @import("std").mem.zeroes(u32),
    primitiveOffset: u32 = @import("std").mem.zeroes(u32),
    firstVertex: u32 = @import("std").mem.zeroes(u32),
    transformOffset: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    vertexFormat: VkFormat = @import("std").mem.zeroes(VkFormat),
    vertexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    vertexStride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    maxVertex: u32 = @import("std").mem.zeroes(u32),
    indexType: VkIndexType = @import("std").mem.zeroes(VkIndexType),
    indexData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    transformData: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    stride: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    arrayOfPointers: VkBool32 = @import("std").mem.zeroes(VkBool32),
    data: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    geometryType: VkGeometryTypeKHR = @import("std").mem.zeroes(VkGeometryTypeKHR),
    geometry: VkAccelerationStructureGeometryDataKHR = @import("std").mem.zeroes(VkAccelerationStructureGeometryDataKHR),
    flags: VkGeometryFlagsKHR = @import("std").mem.zeroes(VkGeometryFlagsKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    flags: VkBuildAccelerationStructureFlagsKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureFlagsKHR),
    mode: VkBuildAccelerationStructureModeKHR = @import("std").mem.zeroes(VkBuildAccelerationStructureModeKHR),
    srcAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dstAccelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    geometryCount: u32 = @import("std").mem.zeroes(u32),
    pGeometries: [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureGeometryKHR),
    ppGeometries: [*c]const [*c]const VkAccelerationStructureGeometryKHR = @import("std").mem.zeroes([*c]const [*c]const VkAccelerationStructureGeometryKHR),
    scratchData: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    createFlags: VkAccelerationStructureCreateFlagsKHR = @import("std").mem.zeroes(VkAccelerationStructureCreateFlagsKHR),
    buffer: VkBuffer = @import("std").mem.zeroes(VkBuffer),
    offset: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    size: VkDeviceSize = @import("std").mem.zeroes(VkDeviceSize),
    type: VkAccelerationStructureTypeKHR = @import("std").mem.zeroes(VkAccelerationStructureTypeKHR),
    deviceAddress: VkDeviceAddress = @import("std").mem.zeroes(VkDeviceAddress),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructureCount: u32 = @import("std").mem.zeroes(u32),
    pAccelerationStructures: [*c]const VkAccelerationStructureKHR = @import("std").mem.zeroes([*c]const VkAccelerationStructureKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    accelerationStructure: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureIndirectBuild: VkBool32 = @import("std").mem.zeroes(VkBool32),
    accelerationStructureHostCommands: VkBool32 = @import("std").mem.zeroes(VkBool32),
    descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxGeometryCount: u64 = @import("std").mem.zeroes(u64),
    maxInstanceCount: u64 = @import("std").mem.zeroes(u64),
    maxPrimitiveCount: u64 = @import("std").mem.zeroes(u64),
    maxPerStageDescriptorAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    maxDescriptorSetUpdateAfterBindAccelerationStructures: u32 = @import("std").mem.zeroes(u32),
    minAccelerationStructureScratchOffsetAlignment: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    accelerationStructure: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pVersionData: [*c]const u8 = @import("std").mem.zeroes([*c]const u8),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkDeviceOrHostAddressKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkDeviceOrHostAddressConstKHR = @import("std").mem.zeroes(VkDeviceOrHostAddressConstKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    src: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    dst: VkAccelerationStructureKHR = @import("std").mem.zeroes(VkAccelerationStructureKHR),
    mode: VkCopyAccelerationStructureModeKHR = @import("std").mem.zeroes(VkCopyAccelerationStructureModeKHR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    type: VkRayTracingShaderGroupTypeKHR = @import("std").mem.zeroes(VkRayTracingShaderGroupTypeKHR),
    generalShader: u32 = @import("std").mem.zeroes(u32),
    closestHitShader: u32 = @import("std").mem.zeroes(u32),
    anyHitShader: u32 = @import("std").mem.zeroes(u32),
    intersectionShader: u32 = @import("std").mem.zeroes(u32),
    pShaderGroupCaptureReplayHandle: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    maxPipelineRayPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxPipelineRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkPipelineCreateFlags = @import("std").mem.zeroes(VkPipelineCreateFlags),
    stageCount: u32 = @import("std").mem.zeroes(u32),
    pStages: [*c]const VkPipelineShaderStageCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineShaderStageCreateInfo),
    groupCount: u32 = @import("std").mem.zeroes(u32),
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingShaderGroupCreateInfoKHR),
    maxPipelineRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    pLibraryInfo: [*c]const VkPipelineLibraryCreateInfoKHR = @import("std").mem.zeroes([*c]const VkPipelineLibraryCreateInfoKHR),
    pLibraryInterface: [*c]const VkRayTracingPipelineInterfaceCreateInfoKHR = @import("std").mem.zeroes([*c]const VkRayTracingPipelineInterfaceCreateInfoKHR),
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo = @import("std").mem.zeroes([*c]const VkPipelineDynamicStateCreateInfo),
    layout: VkPipelineLayout = @import("std").mem.zeroes(VkPipelineLayout),
    basePipelineHandle: VkPipeline = @import("std").mem.zeroes(VkPipeline),
    basePipelineIndex: i32 = @import("std").mem.zeroes(i32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayTracingPipeline: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTracingPipelineTraceRaysIndirect: VkBool32 = @import("std").mem.zeroes(VkBool32),
    rayTraversalPrimitiveCulling: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    shaderGroupHandleSize: u32 = @import("std").mem.zeroes(u32),
    maxRayRecursionDepth: u32 = @import("std").mem.zeroes(u32),
    maxShaderGroupStride: u32 = @import("std").mem.zeroes(u32),
    shaderGroupBaseAlignment: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleCaptureReplaySize: u32 = @import("std").mem.zeroes(u32),
    maxRayDispatchInvocationCount: u32 = @import("std").mem.zeroes(u32),
    shaderGroupHandleAlignment: u32 = @import("std").mem.zeroes(u32),
    maxRayHitAttributeSize: u32 = @import("std").mem.zeroes(u32),
    width: u32 = @import("std").mem.zeroes(u32),
    height: u32 = @import("std").mem.zeroes(u32),
    depth: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    rayQuery: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    taskShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    multiviewMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    primitiveFragmentShadingRateMeshShader: VkBool32 = @import("std").mem.zeroes(VkBool32),
    meshShaderQueries: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    maxTaskWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxTaskWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxTaskPayloadSize: u32 = @import("std").mem.zeroes(u32),
    maxTaskSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxTaskPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupTotalCount: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupCount: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxMeshWorkGroupSize: [3]u32 = @import("std").mem.zeroes([3]u32),
    maxMeshSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndSharedMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshPayloadAndOutputMemorySize: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputComponents: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputVertices: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputPrimitives: u32 = @import("std").mem.zeroes(u32),
    maxMeshOutputLayers: u32 = @import("std").mem.zeroes(u32),
    maxMeshMultiviewViewCount: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerVertexGranularity: u32 = @import("std").mem.zeroes(u32),
    meshOutputPerPrimitiveGranularity: u32 = @import("std").mem.zeroes(u32),
    maxPreferredTaskWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    maxPreferredMeshWorkGroupInvocations: u32 = @import("std").mem.zeroes(u32),
    prefersLocalInvocationVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersLocalInvocationPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactVertexOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    prefersCompactPrimitiveOutput: VkBool32 = @import("std").mem.zeroes(VkBool32),
    groupCountX: u32 = @import("std").mem.zeroes(u32),
    groupCountY: u32 = @import("std").mem.zeroes(u32),
    groupCountZ: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    flags: VkWin32SurfaceCreateFlagsKHR = @import("std").mem.zeroes(VkWin32SurfaceCreateFlagsKHR),
    hinstance: HINSTANCE = @import("std").mem.zeroes(HINSTANCE),
    hwnd: HWND = @import("std").mem.zeroes(HWND),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    handle: HANDLE = @import("std").mem.zeroes(HANDLE),
    name: LPCWSTR = @import("std").mem.zeroes(LPCWSTR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pAttributes: [*c]const SECURITY_ATTRIBUTES = @import("std").mem.zeroes([*c]const SECURITY_ATTRIBUTES),
    dwAccess: DWORD = @import("std").mem.zeroes(DWORD),
    name: LPCWSTR = @import("std").mem.zeroes(LPCWSTR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    memoryTypeBits: u32 = @import("std").mem.zeroes(u32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    memory: VkDeviceMemory = @import("std").mem.zeroes(VkDeviceMemory),
    handleType: VkExternalMemoryHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    acquireCount: u32 = @import("std").mem.zeroes(u32),
    pAcquireSyncs: [*c]const VkDeviceMemory = @import("std").mem.zeroes([*c]const VkDeviceMemory),
    pAcquireKeys: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    pAcquireTimeouts: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    releaseCount: u32 = @import("std").mem.zeroes(u32),
    pReleaseSyncs: [*c]const VkDeviceMemory = @import("std").mem.zeroes([*c]const VkDeviceMemory),
    pReleaseKeys: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    flags: VkSemaphoreImportFlags = @import("std").mem.zeroes(VkSemaphoreImportFlags),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    handle: HANDLE = @import("std").mem.zeroes(HANDLE),
    name: LPCWSTR = @import("std").mem.zeroes(LPCWSTR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pAttributes: [*c]const SECURITY_ATTRIBUTES = @import("std").mem.zeroes([*c]const SECURITY_ATTRIBUTES),
    dwAccess: DWORD = @import("std").mem.zeroes(DWORD),
    name: LPCWSTR = @import("std").mem.zeroes(LPCWSTR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    waitSemaphoreValuesCount: u32 = @import("std").mem.zeroes(u32),
    pWaitSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    signalSemaphoreValuesCount: u32 = @import("std").mem.zeroes(u32),
    pSignalSemaphoreValues: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    semaphore: VkSemaphore = @import("std").mem.zeroes(VkSemaphore),
    handleType: VkExternalSemaphoreHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalSemaphoreHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    flags: VkFenceImportFlags = @import("std").mem.zeroes(VkFenceImportFlags),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    handle: HANDLE = @import("std").mem.zeroes(HANDLE),
    name: LPCWSTR = @import("std").mem.zeroes(LPCWSTR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pAttributes: [*c]const SECURITY_ATTRIBUTES = @import("std").mem.zeroes([*c]const SECURITY_ATTRIBUTES),
    dwAccess: DWORD = @import("std").mem.zeroes(DWORD),
    name: LPCWSTR = @import("std").mem.zeroes(LPCWSTR),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    fence: VkFence = @import("std").mem.zeroes(VkFence),
    handleType: VkExternalFenceHandleTypeFlagBits = @import("std").mem.zeroes(VkExternalFenceHandleTypeFlagBits),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    handleType: VkExternalMemoryHandleTypeFlagsNV = @import("std").mem.zeroes(VkExternalMemoryHandleTypeFlagsNV),
    handle: HANDLE = @import("std").mem.zeroes(HANDLE),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    pAttributes: [*c]const SECURITY_ATTRIBUTES = @import("std").mem.zeroes([*c]const SECURITY_ATTRIBUTES),
    dwAccess: DWORD = @import("std").mem.zeroes(DWORD),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    acquireCount: u32 = @import("std").mem.zeroes(u32),
    pAcquireSyncs: [*c]const VkDeviceMemory = @import("std").mem.zeroes([*c]const VkDeviceMemory),
    pAcquireKeys: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    pAcquireTimeoutMilliseconds: [*c]const u32 = @import("std").mem.zeroes([*c]const u32),
    releaseCount: u32 = @import("std").mem.zeroes(u32),
    pReleaseSyncs: [*c]const VkDeviceMemory = @import("std").mem.zeroes([*c]const VkDeviceMemory),
    pReleaseKeys: [*c]const u64 = @import("std").mem.zeroes([*c]const u64),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fullScreenExclusive: VkFullScreenExclusiveEXT = @import("std").mem.zeroes(VkFullScreenExclusiveEXT),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*anyopaque = @import("std").mem.zeroes(?*anyopaque),
    fullScreenExclusiveSupported: VkBool32 = @import("std").mem.zeroes(VkBool32),
    sType: VkStructureType = @import("std").mem.zeroes(VkStructureType),
    pNext: ?*const anyopaque = @import("std").mem.zeroes(?*const anyopaque),
    hmonitor: HMONITOR = @import("std").mem.zeroes(HMONITOR),
